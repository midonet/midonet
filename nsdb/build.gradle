/*
 * Copyright 2014 Midokura SARL
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

apply plugin: 'scala'

jar {
    manifest {
        attributes 'Implementation-Title': 'Midonet Cluster library',
        'Implementation-Version': version
    }
}

sourceSets {
    main {
        scala { srcDirs = ['src/main/scala', 'src/main/java'] }
        java { srcDirs = [] }
    }
    test {
        scala { srcDirs = ['src/test/scala', 'src/test/java'] }
        java { srcDirs = [] }
    }
}

dependencies {
    compile project(':midonet-util')

    compile libraries.cassandra,
            libraries.collections4,
            libraries.commons_cli,
            libraries.commons_lang3,
            libraries.commons_dbcp2,
            libraries.commons_conf,
            libraries.curator_discovery,
            libraries.curator_recipes,
            libraries.guava,
            libraries.guice,
            libraries.logback,
            libraries.netty,
            libraries.protobuf,
            libraries.rx,
            libraries.sbe,
            libraries.scala,
            libraries.scala_async,
            libraries.scala_logging,
            libraries.scallop,
            libraries.typesafeconf,
            libraries.reflections

    testCompile project(path: ':midonet-util', configuration: 'tests')

    testCompile libraries.commons_conf,
                libraries.curator_test,
                libraries.hamcrest,
                libraries.logback,
                libraries.scalatest,
                libraries.scala_async,
                libraries.test_frameworks
}

cobertura {
    coverageExcludes = ['.*org.midonet.cluster.models.*',
                        '.*org.midonet.cluster.rpc.*',
                        '.*org.midonet.cluster.data.storage.StorageEval.*',
                        '.*org.midonet.cluster.flowstate.FlowStateTransfer.*',
                        '.*org.midonet.cluster.flowstate.proto.*',
                        '.*org.midonet.cluster.flowhistory.proto.*',
                        '.*org.midonet.containers.models.*',
                        '.*org.midonet.nsdb.BaseConfig.*',
                        '.*org.midonet.nsdb.ConfigWithProperties.*']
}

configurations {
    tests.extendsFrom (testCompile)
}

task jarTest (type: Jar, dependsOn: testClasses) {
    from sourceSets.test.output
    classifier = 'test'
}

artifacts {
    tests jarTest
}

task sbetool(type:JavaExec) {
    def targetDir = "$buildDir/generated/java"
    main = "uk.co.real_logic.sbe.SbeTool"
    args = [ "src/main/resources/flowhistory.schema.xml",
             "src/main/resources/flowstate.schema.xml",
             "src/main/resources/rulelogs.schema.xml"]

    systemProperty 'sbe.output.dir', targetDir
    classpath = sourceSets.main.compileClasspath

    sourceSets {
        sbeGen {
            java {
                srcDir targetDir
            }
            compileClasspath = sourceSets.main.compileClasspath
        }
    }
    sourceSets {
        main {
            compileClasspath += sbeGen.output
            runtimeClasspath += sbeGen.output
        }
        test {
            compileClasspath += sbeGen.output
            runtimeClasspath += sbeGen.output
        }
    }

    jar {
        from sourceSets.sbeGen.output
    }
}
compileSbeGenJava.dependsOn sbetool


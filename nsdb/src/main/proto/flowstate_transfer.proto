//
// Copyright 2016 Midokura SARL
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

// -------------------- MIDONET FLOWSTATE TRANSFER API --------------------

// Messages
// ========
// The MidoNet FlowState Transfer API protocol defines the messages between a
// MidoNet agent client requesting the flow state and another MidoNet agent
// serving this information (The agent that previously owned it).
// These are encoded as binary Prococol Buffer messages and are of two types:
// (i) requests and (ii) responses.

import "commons.proto";

package org.midonet.cluster.models;
option java_package = "org.midonet.cluster.flowstate";
option java_outer_classname = "FlowStateTransfer";

// A flow state transfer request for a given port
message StateForPortRequest {
    optional UUID port_id = 1;
}

// Flow state responses for a given port
message StateForPortResponse {

    // ACK with the requested flowstate to the server Agent
    message Ack {
        optional UUID port_id = 1;
        optional bytes flowstate = 2;
    }

    // ERROR sent when the server Agent was unable to complete the request
    message Error {
        enum Code {
            GENERIC = 1;
            BAD_REQUEST = 2; // Corrupted or incorrect object received
            STORAGE_ERROR = 3; // Error reading flowstate from internal storage
        }

        optional Code code = 1;
        optional string description = 2;
    }

    oneof data {
        Ack ack = 1;
        Error error = 2;
    }
}
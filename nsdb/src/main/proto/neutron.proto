//
// Copyright 2016 Midokura SARL
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

import "commons.proto";

package org.midonet.cluster.models;
option java_package = "org.midonet.cluster.models";
option java_outer_classname = "Neutron";

message NeutronNetwork {
    optional UUID id = 1;
    optional string tenant_id = 2;
    optional string name = 3;
    optional bool shared = 4;
    optional bool admin_state_up = 5;
    optional string status = 6;
    repeated UUID subnets = 7;
    optional bool external = 8;
    optional NetworkType network_type = 9;
    optional UUID qos_policy_id = 10;

    enum NetworkType {
        LOCAL = 0;
        FLAT = 1;
        VLAN = 2;
        GRE = 3;
        UPLINK = 4;
    }
}

message NeutronSubnet {
    optional UUID id = 1;
    optional UUID network_id = 2;
    optional string tenant_id = 3;
    optional string name = 4;
    optional IPSubnet cidr = 5;
    optional uint32 ip_version = 6;
    optional IPAddress gateway_ip = 7;

    message IPAllocationPool {
        optional IPAddress start = 1;
        optional IPAddress end = 2;
    }
    repeated IPAllocationPool allocation_pools = 8;
    repeated IPAddress dns_nameservers = 9;
    repeated NeutronRoute host_routes = 10;
    optional bool enable_dhcp = 11;
    optional bool shared = 12;
}

message NeutronRoute {
    optional IPSubnet destination = 1;
    optional IPAddress nexthop = 2;
}

message NeutronPort {
    optional UUID id = 1;
    optional UUID network_id = 2;
    optional string tenant_id = 3;
    optional string name = 4;

    optional string mac_address = 5;
    optional bool admin_state_up = 6;

    message IPAllocation {
        optional IPAddress ip_address = 1;
        optional UUID subnet_id = 2;
    }
    repeated IPAllocation fixed_ips = 7;

    enum DeviceOwner {
        DHCP = 0;
        FLOATINGIP = 1;
        ROUTER_GATEWAY = 2;
        ROUTER_INTERFACE = 3;
        COMPUTE = 4;
        LOADBALANCER = 5;
        REMOTE_SITE = 6;
        LOADBALANCERV2 = 7;
    }
    optional DeviceOwner device_owner = 8 [default = COMPUTE];
    // Device ID may be a composite ID.
    // E.g. for a DHCP port, it is: "dhcp" + HOST_ID + "-" + NETWORK_ID
    optional string device_id = 9;
    optional string status = 10;

    repeated UUID security_groups = 11;

    message BindingProfile {
        optional string interface_name = 1;
    }
    optional string host_id = 12;
    optional BindingProfile profile = 13;
    optional bool port_security_enabled = 14 [default = true];

    message AllowedAddressPair {
        optional IPSubnet ip_address = 1;
        optional string mac_address = 2;
    }

    repeated AllowedAddressPair allowed_address_pairs = 15;

    message ExtraDhcpOpts {
        optional string opt_name = 1;
        optional string opt_value = 2;
    }

    repeated ExtraDhcpOpts extra_dhcp_opts = 16;
    optional UUID qos_policy_id = 17;

    // Backreferences
    repeated UUID floating_ip_ids = 101;
    optional UUID gw_router_id = 102;
}

message NeutronRouter {
    optional UUID id = 1;
    optional string name = 2;
    optional string status = 3;
    optional string tenant_id = 4;
    optional UUID gw_port_id = 5;

    message ExternalGatewayInfo {
        optional UUID network_id = 1;
        optional bool enable_snat = 2;
    }
    optional ExternalGatewayInfo external_gateway_info = 6;
    optional bool admin_state_up = 7;
    repeated NeutronRoute routes = 8;
}

message NeutronRouterInterface {
    optional UUID id = 1;
    optional string tenant_id = 2;
    optional UUID port_id = 3;
    optional UUID subnet_id = 4;
    repeated UUID subnet_ids = 5;
}

message FloatingIp {
    optional UUID id = 1;
    optional string tenant_id = 2;
    optional UUID router_id = 3;
    optional UUID port_id = 4;
    optional IPAddress floating_ip_address = 5;
    optional IPAddress fixed_ip_address = 6;
    optional UUID floating_network_id = 7;
}

message SecurityGroup {
    optional UUID id = 1;
    optional string tenant_id = 2;
    optional string name = 3;
    optional string description = 4;
    repeated SecurityGroupRule security_group_rules = 5;
}

message SecurityGroupRule {
    optional UUID id = 1;
    optional string tenant_id = 2;
    optional UUID security_group_id = 3;
    optional RuleDirection direction = 4;
    optional EtherType ethertype = 5;
    optional Protocol protocol = 6;
    optional int32 port_range_min = 7;
    optional int32 port_range_max = 8;
    optional UUID remote_group_id = 9;
    optional string remote_ip_prefix = 10;
}

message NeutronLoadBalancerV2 {
    enum LoadBalancerV2Status {
        ACTIVE = 1;
        PENDING_CREATE = 2;
        ERROR = 3;
    }

    optional UUID id = 1;
    optional string tenant_id = 2;
    optional string name = 3;
    optional string description = 4;
    optional bool admin_state_up = 5;
    optional LoadBalancerV2Status provisioning_status = 6;
    optional LoadBalancerV2Status operating_status = 7;
    repeated UUID listeners = 8;
    optional string vip_address = 9;
    optional UUID vip_subnet_id = 10;
    optional UUID vip_port_id = 11;
    optional string provider = 12;
    optional UUID flavor_id = 13;
    repeated UUID pools = 14;
}

message NeutronLoadBalancerV2Listener {
    enum ListenerV2Protocol {
        TCP = 1;
        HTTP = 2;
        HTTPS = 3;
        HTTPS_TERMINATED = 4;
    }

    optional UUID id = 1;
    optional string tenant_id = 2;
    optional int32 connection_limit = 3;
    optional ListenerV2Protocol protocol = 4;
    optional string description = 5;
    optional bool admin_state_up = 6;
    optional UUID default_tls_container_ref = 7;
    repeated string sni_container_refs = 8;
    repeated UUID loadbalancers = 9;
    optional UUID default_pool_id = 10;
    optional string name = 11;
    optional int32 protocol_port = 12;
}

message NeutronLoadBalancerPool {
    optional UUID id = 1;
    optional string tenant_id = 2;
    optional string name = 3;
    optional string description = 4;
    optional bool admin_state_up = 5;
    optional string lb_method = 6;
    repeated UUID members = 7;
    optional UUID subnet_id = 8;
    optional UUID vip_id = 9;
    repeated UUID health_monitors = 10;
    optional string protocol = 11;
    optional string provider = 12;
    optional UUID router_id = 13;
    optional string status = 14;
    optional string status_description = 15;
}

message NeutronLoadBalancerV2Pool {
    enum LoadBalancerV2Algorithm {
        ROUND_ROBIN = 1;
    }

    enum LoadBalancerV2Protocol {
        TCP = 1;
        HTTP = 2;
        HTTPS = 3;
    }

    enum LBV2SessionPersistenceType {
        SOURCE_IP = 1;
        HTTP_COOKIE = 2;
        APP_COOKIE = 3;
    }

    optional UUID id = 1;
    optional string tenant_id = 2;
    optional string name = 3;
    optional string description = 4;
    optional bool admin_state_up = 5;
    optional LoadBalancerV2Algorithm lb_algorithm = 6;
    repeated UUID members = 7;
    optional UUID healthmonitor_id = 8;
    optional UUID listener_id = 9;
    repeated UUID listeners = 10;
    optional LoadBalancerV2Protocol protocol = 11;
    message LBV2SessionPersistenceAlgorithm {
        optional LBV2SessionPersistenceType type = 1;
        optional string cookie_name = 2;
    }
    optional LBV2SessionPersistenceAlgorithm session_persistence = 12;
}

message NeutronLoadBalancerPoolMember {
    optional UUID id = 1;
    optional string tenant_id = 2;
    optional UUID pool_id = 3;
    optional IPAddress address = 4;
    optional bool admin_state_up = 5;
    optional int32 protocol_port = 6;
    optional int32 weight = 7;
    optional string status = 8;
    optional string status_description = 9;
}

message NeutronLoadBalancerV2PoolMember {
    optional UUID id = 1;
    optional string tenant_id = 2;
    optional IPAddress address = 3;
    optional bool admin_state_up = 4;
    optional int32 protocol_port = 5;
    optional int32 weight = 6;
    optional UUID subnet_id = 7;
    optional string name = 8;
    optional UUID pool_id = 9;
}

message NeutronVIP {
    optional UUID id = 1;
    optional string tenant_id = 2;
    optional UUID subnet_id = 3;
    optional string name = 4;
    optional IPAddress address = 5;
    optional UUID pool_id = 6;
    optional UUID port_id = 7;
    optional string description = 8;
    optional bool admin_state_up = 9;
    optional string protocol = 10;
    optional int32 protocol_port = 11;
    optional int32 connection_limit = 12;
    message SessionPersistence {
        enum Type {
            SOURCE_IP = 0;
            HTTP_COOKIE = 1;
            APP_COOKIE = 2;
        }
        optional Type type = 1;
        optional string cookie_name = 2;
    }
    optional SessionPersistence session_persistence = 13;
    optional string status = 14;
    optional string status_description = 15;
}

message NeutronHealthMonitor {
    optional UUID id = 1;
    optional string tenant_id = 2;
    optional bool admin_state_up = 3;

    message Pool {
        optional UUID pool_id = 1;
        optional string status = 2;
        optional string status_description = 3;
    }
    repeated Pool pools = 4;

    optional int32 delay = 5;
    optional int32 max_retries = 6;
    optional int32 timeout = 7;
    optional string type = 8;
}

message NeutronHealthMonitorV2 {
    enum HealthMonitorV2Type {
        PING = 1;
        HTTP = 2;
        HTTPS = 3;
        TCP = 4;
    }

    optional UUID id = 1;
    optional string tenant_id = 2;
    optional bool admin_state_up = 3;
    repeated UUID pools = 4;
    optional string expected_codes = 5;
    optional string http_method = 6;
    optional string url_path = 7;
    optional int32 delay = 8;
    optional int32 max_retries = 9;
    optional int32 timeout = 10;
    optional HealthMonitorV2Type type = 11;
    optional string name = 12;
}

message PortBinding {  // This model itself will not be persisted in Storage.
    optional UUID id = 1;
    optional UUID host_id = 2;
    optional string interface_name = 3;
    optional UUID port_id = 4;
}

message AgentMembership {
    optional UUID id = 1;  // The same as Host ID
    optional IPAddress ip_address = 2;
}

message NeutronConfig {
    optional UUID id = 1;
    enum TunnelProtocol {
        GRE = 1;
        VXLAN = 2;
    }
    optional TunnelProtocol tunnel_protocol=2;
}

message NeutronFirewall {
    optional UUID id = 1;
    optional string tenant_id = 2;
    optional string name = 3;
    optional string description = 4;
    optional bool shared = 5;
    optional bool admin_state_up = 6;
    optional string status = 7;
    optional UUID firewall_policy_id = 8;
    repeated NeutronFirewallRule firewall_rule_list = 9;
    repeated UUID add_router_ids = 10;
    repeated UUID del_router_ids = 11;
    optional bool last_router = 12;
}

message NeutronFirewallRule {
    optional UUID id = 1;
    optional string tenant_id = 2;
    optional string name = 3;
    optional string description = 4;
    optional UUID firewall_policy_id = 5;
    optional bool shared = 6;
    optional Protocol protocol = 7;
    optional int32 ip_version = 8;
    optional IPSubnet source_ip_address = 9;  // IP address or subnet
    optional IPSubnet destination_ip_address = 10; // IP address or subnet
    optional string source_port = 11; // could be range min:max or single val
    optional string destination_port = 12; // same as above
    optional FirewallRuleAction action = 13;
    optional int32 position = 14;
    optional bool enabled = 15;

    enum FirewallRuleAction {
        ALLOW = 0;
        DENY = 1;
    }
}

message VpnService {
    optional UUID id = 1;
    optional string tenant_id = 2;
    optional string name = 3;
    optional string description = 4;
    optional bool admin_state_up = 5;
    optional UUID router_id = 6;

    // filled in during translation
    optional IPAddress external_ip = 20;
    optional UUID container_id = 21;

    // backreferences
    repeated UUID ipsec_site_connection_ids = 30;
}

message IPSecSiteConnection {
    optional UUID id = 1;
    optional string tenant_id = 2;
    optional string name = 3;
    optional string description = 4;

    optional bool admin_state_up = 5;
    optional string peer_address = 6;
    optional string peer_id = 7;
    repeated IPSubnet peer_cidrs = 8;
    repeated IPSubnet local_cidrs = 9;
    optional RouteMode route_mode = 10;
    optional uint32 mtu = 11;
    optional Initiator initiator = 12;
    optional AuthMode auth_mode = 13;
    optional string psk = 14;

    optional DpdAction dpd_action = 15;
    optional uint32 dpd_interval = 16; // milliseconds
    optional uint32 dpd_timeout = 17; // milliseconds

    optional UUID vpnservice_id = 18;

    optional IkePolicy ikepolicy = 20;
    optional IPSecPolicy ipsecpolicy = 21;

    // Backrefs
    repeated UUID route_ids = 101;

    enum Status {
        ACTIVE = 1;
        DOWN = 2;
        BUILD = 3;
        ERROR = 4;
        PENDING_CREATE = 5;
        PENDING_UPDATE = 6;
        PENDING_DELETE= 7;
    }

    enum DpdAction {
        CLEAR = 1;
        HOLD = 2;
        RESTART = 3;
        DISABLED = 4;
        RESTART_BY_PEER = 5;
    }

    enum AuthMode {
        PSK = 1;
    }

    enum Initiator {
        BI_DIRECTIONAL = 1;
        RESPONSE_ONLY = 2;
    }

    enum RouteMode {
        STATIC = 1;
    }

    enum IPSecPfs {
        GROUP2 = 1;
        GROUP5 = 2;
        GROUP14 = 3;
    }

    enum IPSecAuthAlgorithm {
        SHA1 = 0;
    }

    enum IPSecEncryptionAlgorithm {
        DES_3 = 0;
        AES_128 = 1;
        AES_192 = 2;
        AES_256 = 3;
   }

    message IkePolicy {
        optional IPSecAuthAlgorithm auth_algorithm = 1;
        optional IPSecEncryptionAlgorithm encryption_algorithm = 2;
        optional Phase1NegotiationMode phase1_negotiation_mode = 3;
        optional IkeVersion ike_version = 4;
        optional IPSecPfs pfs = 5;
        optional uint32 lifetime_value = 6;
        optional string lifetime_units = 7;

        enum Phase1NegotiationMode {
            MAIN = 1;
        }

        enum IkeVersion {
            V1 = 1;
            V2 = 2;
        }
    }

    message IPSecPolicy {
        optional TransformProtocol transform_protocol = 1;
        optional IPSecAuthAlgorithm auth_algorithm = 2;
        optional IPSecEncryptionAlgorithm encryption_algorithm = 3;
        optional EncapsulationMode encapsulation_mode = 4;
        optional IPSecPfs pfs = 5;
        optional uint32 lifetime_value = 6;
        optional string lifetime_units = 7;

        enum TransformProtocol {
            ESP = 1;
            AH = 2;
            AH_ESP = 3;
        }

        enum EncapsulationMode {
           TUNNEL = 1;
           TRANSPORT = 2;
        }
    }
}

message GatewayDevice {

    enum GatewayType {
        ROUTER_VTEP = 1;
        HW_VTEP = 2;
        NETWORK_VLAN = 3;
    }

    enum GatewayDeviceProtocol {
        OVSDB = 1;
    }

    optional UUID id = 1;
    optional GatewayType type = 2;
    optional UUID resource_id = 3;
    repeated IPAddress tunnel_ips = 4;
    optional IPAddress management_ip = 5;
    optional uint32 management_port = 6;
    optional GatewayDeviceProtocol management_protocol = 7;

    // Backrefs

    // Remote MAC entries associated with this gateway device.
    repeated UUID remote_mac_entry_ids = 101;
}

message L2Gateway {
    message L2GatewayDevice {
        optional UUID device_id = 1;
        optional uint32 segmentation_id = 2;
    }

    optional UUID id = 1;
    optional string name = 2;
    optional string tenant_id = 3;
    repeated L2GatewayDevice devices = 4;
}

message L2GatewayConnection {
    optional UUID id = 1;
    optional string tenant_id = 2;
    optional UUID network_id = 3;
    optional uint32 segmentation_id = 4;
    optional L2Gateway l2_gateway = 5;
}

message RemoteMacEntry {
    optional UUID id = 1;
    optional UUID device_id = 2;
    optional IPAddress vtep_address = 3;
    optional string mac_address = 4;
    optional uint32 segmentation_id = 5;

    // Ports using this remote MAC entry.
    repeated UUID port_ids = 6;
}

message NeutronBgpSpeaker {
    optional UUID id = 1;
    optional string tenant_id = 2;
    optional string name = 3;
    optional uint32 local_as = 4;
    optional uint32 ip_version = 5;
    optional UUID logical_router = 6;
    repeated UUID del_bgp_peer_ids = 7;
}

message NeutronBgpPeer {
    optional UUID id = 1;
    optional string tenant_id = 2;
    optional string name = 3;
    optional IPAddress peer_ip = 4;
    optional uint32 remote_as = 5;
    optional BgpAuthType auth_type = 6;
    optional string password = 7;
    optional NeutronBgpSpeaker bgp_speaker = 8;

    enum BgpAuthType {
        NONE = 1;
        MD5 = 2;
    }
}

message TapService {
    optional UUID id = 1;
    optional string tenant_id = 2;  // REVISIT(yamamoto): project_id
    optional string name = 3;
    optional string description = 4;
    optional UUID port_id = 5;
    // REVISIT(yamamoto): revisit after the spec is complete
    // optional UUID network_id = 6;
}

message TapFlow {
    optional UUID id = 1;
    optional string tenant_id = 2;  // REVISIT(yamamoto): project_id
    optional string name = 3;
    optional string description = 4;
    optional UUID tap_service_id = 5;
    optional UUID source_port = 6;
    optional TapFlowDirection direction = 7;

    enum TapFlowDirection {
        IN = 0;
        OUT = 1;
        BOTH = 2;
    }
}

message NeutronLoggingResource {
    optional UUID id = 1;
    optional string name = 2;
    optional string description = 3;
    optional string tenant_id = 4;
    optional bool enabled = 5;
}

message FirewallLog {
    optional UUID id = 1;
    optional string description = 2;
    optional string tenant_id = 3;
    optional UUID logging_resource_id = 4;
    optional NeutronLoggingResource logging_resource = 5;
    optional LogEvent fw_event = 6;
    optional UUID firewall_id = 7;
    optional NeutronFirewall firewall = 8;
}

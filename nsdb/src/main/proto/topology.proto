//
// Copyright 2015 Midokura SARL
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

import "commons.proto";

package org.midonet.cluster.models;
option java_package = "org.midonet.cluster.models";
option java_outer_classname = "Topology";

// One per type
enum Type {
    BGP = 1;
    BGP_ROUTE = 2;
    CHAIN = 3;
    DHCP = 4;
    HEALTH_MONITOR = 5;
    HOST = 6;
    IP_ADDR_GROUP = 7;
    LOAD_BALANCER = 8;
    NETWORK = 9;
    POOL = 10;
    POOL_MEMBER = 11;
    PORT = 12;
    PORT_GROUP = 13;
    ROUTE = 14;
    ROUTER = 15;
    RULE = 16;
    TUNNEL_ZONE = 17;
    VIP = 18;
    VTEP = 19;
    VTEP_BINDING = 20;
}

message Bgp {
    optional UUID id = 1;
    optional int32 local_as = 2;
    optional int32 peer_as = 3;
    optional IPAddress peer_address = 4;
    repeated UUID bgp_route_ids = 5;

    // Backreference
    optional UUID port_id = 6;
}

message BgpRoute {

    optional UUID id = 1;
    optional IPSubnet subnet = 2;

    // Backreference
    optional UUID bgp_id = 3;
}

message Chain {
    optional UUID id = 1;
    optional string name = 2;

    // Backreferences
    repeated UUID rule_ids = 101;
    repeated UUID network_ids = 102;
    repeated UUID router_ids = 103;
    repeated UUID port_ids = 104;
}

message Dhcp {
    optional UUID id = 1;
    optional UUID network_id = 2;
    optional IPSubnet subnet_address = 3;
    optional IPAddress server_address = 4;
    repeated IPAddress dns_server_address = 5;
    optional IPAddress default_gateway = 6;
    optional int32 interface_mtu = 7;

    message Opt121Route {
        optional IPSubnet dst_subnet = 1;
        optional IPAddress gateway = 2;
    }
    repeated Opt121Route opt121_routes = 8;

    message Host {
        optional string mac = 1;
        optional IPAddress ip_address = 2;
        optional string name = 3;
    }
    repeated Host hosts = 9;

    optional bool enabled = 10;

    // Backreference
    optional UUID router_gw_port_id = 101;
    // Gateway routes with a gateway via this DHCP.
    repeated UUID gateway_route_ids = 102;
}

message HealthMonitor {
    enum HealthMonitorType { TCP = 1; }

    optional UUID id = 1;
    optional bool admin_state_up = 2;
    optional HealthMonitorType type = 3 [default = TCP];
    optional LBStatus status = 4 [default = ACTIVE];
    optional int32 delay = 5;
    optional int32 timeout = 6;
    optional int32 max_retries = 7;

    // Backreference
    optional UUID pool_id = 101;
}

message Host {
    optional UUID id = 1;
    optional string name = 2;

    optional int32 flooding_proxy_weight = 3 [default = 1];

    // Backreference. Expected to be set from the Tunnel Zone side.
    repeated UUID tunnel_zone_ids = 101;

    // Backreference. Expected to be set from the Port side.
    repeated UUID port_ids = 102;
}

message IPAddrGroup {
    optional UUID id = 1;
    optional string name = 2;

    message IPAddrPorts {
        optional IPAddress ip_address = 1;
        repeated UUID port_ids = 2;
    }
    repeated IPAddrPorts ip_addr_ports = 3;

    optional UUID inbound_chain_id = 4;
    optional UUID outbound_chain_id = 5;

    // Backreferences
    repeated UUID rule_ids = 6;
}

message LoadBalancer {
    // Load Balancer ID is always the same as the Router ID to which the LB is
    // attached. Therefore, LoadBalancer does not have a reference to Router.
    optional UUID id = 1;
    optional bool admin_state_up = 2;
    repeated UUID vip_ids = 3;

    // Backreference
    optional UUID router_id = 101;
    repeated UUID pool_ids = 102;
}

message Network {
    // Neutron / MidoNet common attributes
    optional UUID id = 1;
    optional string tenant_id = 2;
    optional string name = 3;
    optional bool admin_state_up = 4;

    // MidoNet-specific fields
    optional uint64 tunnel_key = 5;
    optional UUID inbound_filter_id = 6;
    optional UUID outbound_filter_id = 7;
    // If the Network is bound to any VTEPs, it'll be assigned a VNI
    // that is used for all bindings to all VTEPs
    optional uint32 vni = 8;

    // Backreferences
    repeated UUID port_ids = 101;
    repeated UUID vxlan_port_ids = 102;
    repeated UUID dhcp_ids = 103;
}

message Pool {
    enum PoolProtocol { TCP = 1; }
    enum PoolLBMethod { ROUND_ROBIN = 1; }
    enum PoolHealthMonitorMappingStatus {
        ACTIVE = 1;
        INACTIVE = 2;
        PENDING_CREATE = 3;
        PENDING_UPDATE = 4;
        PENDING_DELETE = 5;
        ERROR = 6;
    }

    optional UUID id = 1;
    optional UUID health_monitor_id = 2;
    // load_balancer_id is always the same as the corresponding Router ID.
    optional UUID load_balancer_id = 3;
    optional bool admin_state_up = 4;

    optional PoolProtocol protocol = 5 [default = TCP];
    optional PoolLBMethod lb_method = 6 [default = ROUND_ROBIN];
    optional LBStatus status = 7 [default = ACTIVE];
    optional PoolHealthMonitorMappingStatus mapping_status = 8;

    repeated UUID pool_member_ids = 101;
}

message PoolMember {
    optional UUID id = 1;
    optional bool admin_state_up = 2;
    optional UUID pool_id = 3;
    optional LBStatus status = 4 [default = ACTIVE];
    optional IPAddress address = 5;
    optional int32 protocol_port = 6;
    optional int32 weight = 7;
}

message Port {
    optional UUID id = 1;
    optional UUID network_id = 2;  // Separate device id fields for ORM.
    optional UUID router_id = 3;
    optional UUID inbound_filter_id = 4;
    optional UUID outbound_filter_id = 5;
    optional uint64 tunnel_key = 6;
    optional UUID peer_id = 7;
    optional UUID vif_id = 8;
    optional UUID host_id = 9;
    optional string interface_name = 10;
    optional bool admin_state_up = 11 [default = true];

    repeated UUID port_group_ids = 12;

    // Interior bridge port specific
    optional uint32 vlan_id = 13;

    // Router port specific
    optional IPSubnet port_subnet = 14;
    optional IPAddress port_address = 15;
    optional string port_mac = 16;
    optional UUID bgp_id = 17;
    repeated UUID route_ids = 18;

    // Specific to router interface ports (not used for router gateway ports).
    optional UUID dhcp_id = 19;

    // VXLAN port specific
    optional UUID vtep_id = 20;

    // Backreferences
    repeated UUID rule_ids = 101;
    // For Router gateway port only. Back-references to VIPs that are associated
    // with this Router gateway port.
    repeated UUID vip_ids = 102;
}

message PortGroup {
    optional UUID id = 1;
    optional string name = 2;
    optional string tenant_id = 3;
    optional bool stateful = 4;

    // Backreferences
    repeated UUID port_ids = 101;
}

message Route {
    optional UUID id = 1;
    optional IPSubnet src_subnet = 2;
    optional IPSubnet dst_subnet = 3;
    enum NextHop {
        BLACKHOLE = 0;
        REJECT = 1;
        PORT = 2;
        LOCAL = 3;
    }
    optional NextHop next_hop = 4;
    optional UUID next_hop_port_id = 5;
    optional int32 weight = 6;
    optional string attributes = 7;
    optional UUID router_id = 8;

    optional IPAddress next_hop_gateway = 9;
    optional UUID gateway_dhcp_id = 10;
}

message Router {
    optional UUID id = 1;
    optional string tenant_id = 2;
    optional string name = 3;
    optional bool admin_state_up = 4;
    optional UUID inbound_filter_id = 5;
    optional UUID outbound_filter_id = 6;
    optional UUID load_balancer_id = 7;
    repeated UUID route_ids = 8;

    // Backreferences
    repeated UUID port_ids = 101;
}

message Rule {
    optional UUID id = 1;

    enum Type {
        LITERAL_RULE = 1;
        NAT_RULE = 2;
        JUMP_RULE = 3;
        TRACE_RULE = 4;
        MIRROR_RULE = 5;
    }
    optional Type type = 2;
    optional UUID chain_id = 3;

    enum Action {
        ACCEPT = 1;
        CONTINUE = 2;
        DROP = 3;
        JUMP = 4;
        REJECT = 5;
        RETURN = 6;
        MIRROR = 7;
    }
    optional Action action = 4;

    // Condition fields
    optional bool conjunction_inv = 5;
    optional bool match_forward_flow = 6;
    optional bool match_return_flow = 7;
    repeated UUID in_port_ids = 8;
    optional bool in_port_inv = 9;
    repeated UUID out_port_ids = 10;
    optional bool out_port_inv = 11;
    optional UUID port_group_id = 12;
    optional bool inv_port_group = 13;
    optional UUID ip_addr_group_id_src = 14;
    optional bool inv_ip_addr_group_id_src = 15;
    optional UUID ip_addr_group_id_dst = 16;
    optional bool inv_ip_addr_group_id_dst = 17;
    optional int32 dl_type = 18;
    optional bool inv_dl_type = 19;
    optional string dl_src = 20;
    optional int64 dl_src_mask = 21 [default = -1];  // Top 16 bits ignored.
    optional bool inv_dl_src = 22;
    optional string dl_dst = 23;
    optional int64 dl_dst_mask =  24 [default = -1];  // Top 16 bits ignored.
    optional bool inv_dl_dst = 25;
    optional int32 nw_tos = 26;
    optional bool nw_tos_inv = 27;
    optional int32 nw_proto = 28;
    optional bool nw_proto_inv = 29;
    optional IPSubnet nw_src_ip = 30;
    optional IPSubnet nw_dst_ip = 31;
    optional Int32Range tp_src = 32;
    optional Int32Range tp_dst = 33;
    optional bool nw_src_inv = 34;
    optional bool nw_dst_inv = 35;
    optional bool tp_src_inv = 36;
    optional bool tp_dst_inv = 37;
    optional UUID traversed_device = 38;
    optional bool traversed_device_inv = 39;

    enum FragmentPolicy {
        ANY = 1;
        NONHEADER = 2;
        HEADER = 3;
        UNFRAGMENTED = 4;
    }
    optional FragmentPolicy fragment_policy = 40;
    // end of condition fields

    message JumpRuleData {
        optional UUID jump_to = 1;
        optional string jump_chain_name = 2;
    }
    message NatTarget {
        optional IPAddress nw_start = 1;
        optional IPAddress nw_end = 2;
        optional uint32 tp_start = 3;
        optional uint32 tp_end = 4;
    }
    message NatRuleData {
        repeated NatTarget nat_targets = 1;

        // True if it's a destination NAT rule, otherwise it's a source NAT rule.
        optional bool dnat = 2;

        // True for reverse NAT rules. Reverse NAT rules have no targets.
        optional bool reverse = 3;
    }
    message MirrorRuleData {
        optional UUID dst_port_id = 1;
    }
    oneof rule_data {
        JumpRuleData jump_rule_data = 100;
        NatRuleData nat_rule_data = 101;
        MirrorRuleData mirror_rule_data = 102;
    }
}

message TunnelZone {
    optional UUID id = 1;
    optional string name = 2;
    enum Type {
        GRE = 1;
        VXLAN = 2;
        VTEP = 3;
    }
    optional Type type = 3;

    message HostToIp {
        optional UUID host_id = 1;
        optional IPAddress ip = 2;
    }
    repeated HostToIp hosts = 4; // Hosts in this zone

    // Tunnel zone member host IDs.
    // Note: ZOOM cannot yet enforce referential integrity from / to a nested
    // message field, therefore the information is duplicated here and in the
    // "hosts" field above.
    repeated UUID host_ids = 5;
}

message Vip {
    enum SessionPersistence {
        SOURCE_IP = 1;
    }

    optional UUID id = 1;
    optional bool admin_state_up = 2;
    optional UUID pool_id = 3;
    optional IPAddress address = 4;
    optional uint32 protocol_port = 5;
    optional SessionPersistence session_persistence = 6;
    optional UUID gateway_port_id = 7;

    // Backreference
    optional UUID load_balancer_id = 101;
}

message Vtep {
    optional UUID id = 1;
    optional IPAddress management_ip = 2;
    optional uint32 management_port = 3;
    optional UUID tunnel_zone_id = 4;
    repeated string tunnel_ips = 5;

    repeated UUID bindings = 101;   // A back-ref to VTEP bindings.
}

message VtepBinding {
    optional UUID id = 1;
    optional string port_name = 2;
    optional uint32 vlan_id = 3;    // A VLAN ID is a short int.
    optional UUID network_id = 4;
    optional UUID vtep_id = 5;      // A forward ref to VtEP.
}

//
// Copyright 2015 Midokura SARL
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

import "commons.proto";

package org.midonet.cluster.models;
option java_package = "org.midonet.cluster.models";
option java_outer_classname = "Topology";

// One per type
enum Type {
    BGP_NETWORK = 1;
    BGP_PEER = 2;
    CHAIN = 3;
    DHCP = 4;
    DHCP_V6 = 5;
    HEALTH_MONITOR = 6;
    HOST = 7;
    IP_ADDR_GROUP = 8;
    LOAD_BALANCER = 9;
    NETWORK = 10;
    POOL = 11;
    POOL_MEMBER = 12;
    PORT = 13;
    PORT_GROUP = 14;
    ROUTE = 15;
    ROUTER = 16;
    RULE = 17;
    TRACE_REQUEST = 18;
    TUNNEL_ZONE = 19;
    VIP = 20;
    VTEP = 21;
    MIRROR = 22;
    HOST_GROUP = 23;
    L2INSERTION = 31;
    SERVICE_CONTAINER = 32;
    SERVICE_CONTAINER_GROUP = 33;
    QOS_POLICY = 34;
    QOS_RULE_BWLIMIT = 35;
    QOS_RULE_DSCP = 36;
}

message BgpNetwork {
    optional UUID id = 1;
    optional IPSubnet subnet = 2;

    // Backreference
    optional UUID router_id = 3;
}

message BgpPeer {
    optional UUID id = 1;
    optional int32 as_number = 2;
    optional IPAddress address = 3;
    optional int32 keep_alive = 4;
    optional int32 hold_time = 5;
    optional int32 connect_retry = 6;
    optional string password = 8;

    // Backreference
    optional UUID router_id = 7;
}

message Chain {
    optional UUID id = 1;
    optional string name = 2;
    optional string tenant_id = 3;
    repeated UUID logger_ids = 4;
    repeated MetadataEntry metadata = 5;

    // Backreferences
    repeated UUID rule_ids = 101;
    repeated UUID network_inbound_ids = 102;
    repeated UUID network_outbound_ids = 103;
    repeated UUID router_inbound_ids = 104;
    repeated UUID router_outbound_ids = 105;
    repeated UUID port_inbound_ids = 106;
    repeated UUID port_outbound_ids = 107;
    repeated UUID jump_rule_ids = 108;
    repeated UUID router_redirect_ids = 109;
}

message Dhcp {
    optional UUID id = 1;
    optional UUID network_id = 2;
    optional IPSubnet subnet_address = 3;
    optional IPAddress server_address = 4;
    repeated IPAddress dns_server_address = 5;
    optional IPAddress default_gateway = 6;
    optional int32 interface_mtu = 7;

    message Opt121Route {
        optional IPSubnet dst_subnet = 1;
        optional IPAddress gateway = 2;
    }
    repeated Opt121Route opt121_routes = 8;

    message Host {
        optional string mac = 1;
        optional IPAddress ip_address = 2;
        optional string name = 3;

        message ExtraDhcpOpt {
            optional string name = 1;
            optional string value = 2;
        }
        repeated ExtraDhcpOpt extra_dhcp_opts = 4;
    }
    repeated Host hosts = 9;

    optional bool enabled = 10;

    // Backreferences

    // Router interface port associated with this DHCP.
    optional UUID router_if_port_id = 101;

    // Gateway routes with a gateway via this DHCP.
    repeated UUID gateway_route_ids = 102;
}

message DhcpV6 {
    optional UUID id = 1;
    optional UUID network_id = 2;
    optional IPSubnet subnet_address = 3;

    message Host {
        optional string client_id = 1;
        optional IPAddress ip_address = 2;
        optional string name = 3;
    }

    repeated Host hosts = 4;
}

message HealthMonitor {
    enum HealthMonitorType { TCP = 1; }

    optional UUID id = 1;
    optional bool admin_state_up = 2;
    optional HealthMonitorType type = 3 [default = TCP];
    optional LBStatus status = 4 [default = ACTIVE];
    optional int32 delay = 5;
    optional int32 timeout = 6;
    optional int32 max_retries = 7;

    // Backreferences
    repeated UUID pool_ids = 101;
}

message Host {
    optional UUID id = 1;
    optional string name = 2;

    optional int32 flooding_proxy_weight = 3 [default = 1];
    optional int32 container_weight = 4 [default = 1];
    optional int32 container_limit = 5 [default = -1];
    optional bool enforce_container_limit = 6 [default = false];

    // Backreferences
    repeated UUID tunnel_zone_ids = 101;
    repeated UUID port_ids = 102;
    repeated UUID host_group_ids = 103;
}

message HostGroup {
    optional UUID id = 1;
    optional string name = 2;

    // Backreferences
    repeated UUID host_ids = 101;
    repeated UUID service_group_ids = 102;
}

message IPAddrGroup {
    optional UUID id = 1;
    optional string name = 2;

    message IPAddrPorts {
        optional IPAddress ip_address = 1;
        repeated UUID port_ids = 2;
    }
    repeated IPAddrPorts ip_addr_ports = 3;

    optional UUID inbound_chain_id = 4;
    optional UUID outbound_chain_id = 5;

    // Backreferences
    repeated UUID rule_ids = 6;
}

message L2Insertion {
    optional UUID id = 1;
    optional UUID port_id = 2;
    optional UUID srv_port_id = 3;
    optional uint32 vlan = 4;
    optional bool fail_open = 5;

    optional uint32 position = 6;
    optional string mac = 7;

    // Keep a reference to the corresponding service port rule
    optional UUID srv_rule_in_id = 100;
    optional UUID srv_rule_out_id = 101;
}

message LoadBalancer {
    // Load Balancer ID is always the same as the Router ID to which the LB is
    // attached. Therefore, LoadBalancer does not have a reference to Router.
    optional UUID id = 1;
    optional bool admin_state_up = 2;

    // Backreference
    optional UUID router_id = 101;
    repeated UUID pool_ids = 102;
}

message LoggingResource {
    optional UUID id = 1;
    optional Type type = 2;
    optional bool enabled = 3;

    // Backreferences
    repeated UUID logger_ids = 101;

    enum Type {
        FILE = 1;
    }
}

message Mirror {
    optional UUID id = 1;
    optional UUID to_port_id = 2;
    repeated Condition conditions = 3;

    // Backreferences
    repeated UUID network_inbound_ids = 101;
    repeated UUID network_outbound_ids = 102;
    repeated UUID router_inbound_ids = 103;
    repeated UUID router_outbound_ids = 104;
    repeated UUID port_inbound_ids = 105;
    repeated UUID port_outbound_ids = 106;
    repeated UUID port_post_in_filter_ids = 107;
    repeated UUID port_pre_out_filter_ids = 108;
}

message Network {
    // Neutron / MidoNet common attributes
    optional UUID id = 1;
    optional string tenant_id = 2;
    optional string name = 3;
    optional bool admin_state_up = 4;

    // MidoNet-specific fields
    optional uint64 tunnel_key = 5;
    optional UUID inbound_filter_id = 6;
    optional UUID outbound_filter_id = 7;
    // If the Network is bound to any VTEPs, it'll be assigned a VNI
    // that is used for all bindings to all VTEPs
    optional uint32 vni = 8;
    repeated UUID inbound_mirror_ids = 9;
    repeated UUID outbound_mirror_ids = 10;

    // QoS Policy
    optional UUID qos_policy_id = 11;

    // Backreferences
    repeated UUID port_ids = 101;
    repeated UUID vxlan_port_ids = 102;
    repeated UUID dhcp_ids = 103;
    repeated UUID dhcpv6_ids = 104;
    repeated UUID trace_request_ids = 105;
}

message Pool {
    enum PoolProtocol { TCP = 1; }
    enum PoolLBMethod { ROUND_ROBIN = 1; }
    enum PoolHealthMonitorMappingStatus {
        ACTIVE = 1;
        INACTIVE = 2;
        PENDING_CREATE = 3;
        PENDING_UPDATE = 4;
        PENDING_DELETE = 5;
        ERROR = 6;
    }

    optional UUID id = 1;
    optional UUID health_monitor_id = 2;
    // load_balancer_id is always the same as the corresponding Router ID.
    optional UUID load_balancer_id = 3;
    optional bool admin_state_up = 4;

    optional PoolProtocol protocol = 5 [default = TCP];
    optional PoolLBMethod lb_method = 6 [default = ROUND_ROBIN];
    optional LBStatus status = 7 [default = ACTIVE];
    optional PoolHealthMonitorMappingStatus mapping_status = 8;

    // Same field exists in VIP.  The field in VIP is there so that it matches
    // the LBaaS v1 model. This field was added later to match the LBaaS v2
    // model.  Depending on the version LBaaS version, only one of them would
    // be set by the C3PO translator.  As far as the simulation is concerned,
    // there is no distinction, whichever one set is used.  For now, this field
    // is settable only from the translator, not REST API, but will be the
    // primary way to set session persistence in the future.
    optional SessionPersistence session_persistence = 9;

    // Backreferences
    repeated UUID pool_member_ids = 101;
    repeated UUID vip_ids = 102;
}

message PoolMember {
    optional UUID id = 1;
    optional bool admin_state_up = 2;
    optional UUID pool_id = 3;
    optional LBStatus status = 4 [default = ACTIVE];
    optional IPAddress address = 5;
    optional int32 protocol_port = 6;
    optional int32 weight = 7;
}

message Port {
    optional UUID id = 1;
    optional UUID network_id = 2;  // Separate device id fields for ORM.
    optional UUID router_id = 3;
    optional UUID inbound_filter_id = 4;
    optional UUID outbound_filter_id = 5;
    optional uint64 tunnel_key = 6;
    optional UUID peer_id = 7;
    optional UUID vif_id = 8;
    optional UUID host_id = 9;
    optional UUID previous_host_id = 28;
    optional string interface_name = 10;
    optional bool admin_state_up = 11 [default = true];

    repeated UUID port_group_ids = 12;

    // Interior bridge port specific
    optional uint32 vlan_id = 13;

    // Router port specific
    repeated IPSubnet port_subnet = 14;
    optional IPAddress port_address = 15;
    optional string port_mac = 16;
    repeated UUID route_ids = 17;

    // Specific to router interface ports (not used for router gateway ports).
    optional UUID dhcp_id = 18;

    // VXLAN port specific
    optional UUID vtep_id = 19;

    // mirroring
    repeated UUID inbound_mirror_ids = 20;
    repeated UUID outbound_mirror_ids = 21;

    // l2 insertion filters (should only be set by translation)
    optional UUID l2insertion_infilter_id = 23;
    optional UUID l2insertion_outfilter_id = 24;

    // service containers
    optional UUID service_container_id = 25;

    // mirroring (cont.)
    repeated UUID post_in_filter_mirror_ids = 26;
    repeated UUID pre_out_filter_mirror_ids = 27;

    // Overlay VTEP on Routers
    optional uint32 vni = 40;
    optional bool off_ramp_vxlan = 41;
    optional IPAddress tunnel_ip = 42;

    // QoS Policy
    optional UUID qos_policy_id = 43;

    // Backreferences

    // For Router gateway port only. Back-references to VIPs that are associated
    // with this Router gateway port.
    repeated UUID vip_ids = 101;

    // NAT rules that implement FIP for this port.
    repeated UUID fip_nat_rule_ids = 102;

    repeated UUID trace_request_ids = 103;

    // Mirrors that forward to this port
    repeated UUID mirror_ids = 104;

    // service insertion
    repeated UUID insertion_ids = 110;
    repeated UUID srv_insertion_ids = 111;

    // RemoteMacEntries in this port's peering table. Only applicable to VTEP
    // router ports.
    repeated UUID remote_mac_entry_ids = 120;
}

message PortGroup {
    optional UUID id = 1;
    optional string name = 2;
    optional string tenant_id = 3;
    optional bool stateful = 4;

    // Backreferences
    repeated UUID port_ids = 101;
    repeated UUID service_group_ids = 102;
}

message QosRuleBandwidthLimit {
    optional UUID id = 1;
    optional int32 max_kbps = 2;
    optional int32 max_burst_kb = 3;

    // Backreferences
    optional UUID policy_id = 101;
}

message QosRuleDscp {
    optional UUID id = 1;
    optional int32 dscp_mark = 2;

    // Backreferences
    optional UUID policy_id = 101;
}

message QosPolicy {
    optional UUID id = 1;
    optional string name = 2;
    optional string description = 3;
    optional bool shared = 4;

    message QosRule {
        optional UUID id = 1;
        optional string type = 2;
        optional int32 max_kbps = 3;
        optional int32 max_burst_kb = 4;
        optional int32 dscp_mark = 5;
    }

    repeated QosRule rules = 5;
    repeated UUID bandwidth_limit_rule_ids = 6;
    repeated UUID dscp_marking_rule_ids = 7;

    optional string tenant_id = 8;

    // Backreferences
    repeated UUID port_ids = 101;
    repeated UUID network_ids = 102;
}

message Route {
    optional UUID id = 1;
    optional IPSubnet src_subnet = 2;
    optional IPSubnet dst_subnet = 3;
    enum NextHop {
        BLACKHOLE = 0;
        REJECT = 1;
        PORT = 2;
        LOCAL = 3;
    }
    optional NextHop next_hop = 4;
    optional UUID next_hop_port_id = 5;
    optional int32 weight = 6;
    optional string attributes = 7;
    optional UUID router_id = 8;

    optional IPAddress next_hop_gateway = 9;
    optional UUID gateway_dhcp_id = 10;
    optional UUID ipsec_site_connection_id = 11;
}

message Router {
    optional UUID id = 1;
    optional string tenant_id = 2;
    optional string name = 3;
    optional bool admin_state_up = 4;
    optional UUID inbound_filter_id = 5;
    optional UUID outbound_filter_id = 6;
    optional UUID load_balancer_id = 7;
    repeated UUID route_ids = 8;

    // Specific to routers that have BGP routing enabled.
    optional int32 as_number = 9 [default = -1];
    repeated UUID bgp_network_ids = 10;
    repeated UUID bgp_peer_ids = 11;

    // Mirroring
    repeated UUID inbound_mirror_ids = 12;
    repeated UUID outbound_mirror_ids = 13;

    optional UUID local_redirect_chain_id = 14;
    optional UUID forward_chain_id = 15;

    // Backreferences
    repeated UUID port_ids = 101;
    repeated UUID trace_request_ids = 102;
    repeated UUID vpn_service_ids = 103;
}

message Rule {
    optional UUID id = 1;

    enum Type {
        LITERAL_RULE = 1;
        NAT_RULE = 2;
        JUMP_RULE = 3;
        TRACE_RULE = 4;
        L2TRANSFORM_RULE = 5;
        NAT64_RULE = 6;
    }
    optional Type type = 2;
    optional UUID chain_id = 3;

    enum Action {
        ACCEPT = 1;
        CONTINUE = 2;
        DROP = 3;
        JUMP = 4;
        REJECT = 5;
        RETURN = 6;
        REDIRECT = 7;
    }
    optional Action action = 4;

    optional Condition condition = 5;

    // Port for which this rule implements floating IP NAT.
    optional UUID fip_port_id = 6;

    repeated MetadataEntry metadata = 7;

    message JumpRuleData {
        optional UUID jump_chain_id = 1;
        optional string jump_chain_name = 2;
    }
    message NatTarget {
        optional IPAddress nw_start = 1;
        optional IPAddress nw_end = 2;
        optional uint32 tp_start = 3;
        optional uint32 tp_end = 4;
    }
    message NatRuleData {
        repeated NatTarget nat_targets = 1;

        // True if it's a destination NAT rule, otherwise it's a source NAT rule.
        optional bool dnat = 2;

        // True for reverse NAT rules. Reverse NAT rules have no targets.
        optional bool reverse = 3;
    }
    message Nat64RuleData {
        optional IPSubnet port_address = 1;
        optional NatTarget nat_pool = 2;
    }
    message TraceRuleData {
        optional UUID trace_request_id = 1;
        optional uint64 limit = 2;
    }
    message L2TransformRuleData {
        optional bool pop_vlan = 1;
        optional uint32 push_vlan = 2;
        optional UUID target_port_id = 3;
        optional bool ingress = 4;
        optional bool fail_open = 5;
    }
    oneof rule_data {
        JumpRuleData jump_rule_data = 100;
        NatRuleData nat_rule_data = 101;
        TraceRuleData trace_rule_data = 102;
        L2TransformRuleData transform_rule_data = 103;
        Nat64RuleData nat64_rule_data = 104;
    }
}

// Called RuleLogger because it logs the outcome of rule evaluations.
// Can currently be associated only with a chain, but may be associated with
// rules in the future.
message RuleLogger {
    optional UUID id = 1;
    optional UUID logging_resource_id = 2;
    optional LogEvent event = 3;
    optional UUID chain_id = 4;
}

message ServiceContainer {
    optional UUID id = 1;
    optional UUID service_group_id = 2;
    // Each ServiceContainer has a virtual port where it's bound to the
    // virtual topology
    optional UUID port_id = 3;
    optional string service_type = 4;
    // This field contains the ID of the configuration that originates this
    // service container.  E.g.: a VPNService.
    optional UUID configuration_id = 5;
}

message ServiceContainerGroup {
    optional UUID id = 1;

    optional ServiceContainerPolicy policy = 2 [default = WEIGHTED_SCHEDULER];
    optional UUID host_group_id = 3;
    optional UUID port_group_id = 4;

    // Backreferences
    repeated UUID service_container_ids = 101;
}

enum ServiceContainerPolicy {
    WEIGHTED_SCHEDULER = 0;
    LEAST_SCHEDULER = 1;
}

enum SessionPersistence {
    SOURCE_IP = 1;
}

message TraceRequest {
    optional UUID id = 1;
    optional bool enabled = 2;
    optional Condition condition = 3;
    optional uint64 limit = 4;
    optional string name = 5;
    optional uint64 create_timestamp_ms = 6;

    optional UUID port_id = 101;
    optional UUID network_id = 102;
    optional UUID router_id = 103;
}

message TunnelZone {
    optional UUID id = 1;
    optional string name = 2;
    enum Type {
        GRE = 1;
        VXLAN = 2;
        VTEP = 3;
    }
    optional Type type = 3;

    message HostToIp {
        optional UUID host_id = 1;
        optional IPAddress ip = 2;
    }
    repeated HostToIp hosts = 4; // Hosts in this zone

    // Tunnel zone member host IDs.
    // Note: ZOOM cannot yet enforce referential integrity from / to a nested
    // message field, therefore the information is duplicated here and in the
    // "hosts" field above.
    repeated UUID host_ids = 5;
}

message Vip {
    optional UUID id = 1;
    optional bool admin_state_up = 2;
    optional UUID pool_id = 3;
    optional IPAddress address = 4;
    optional uint32 protocol_port = 5;
    optional SessionPersistence session_persistence = 6;
    optional UUID gateway_port_id = 7;
}

message Vtep {
    optional UUID id = 1;
    optional IPAddress management_ip = 2;
    optional uint32 management_port = 3;
    optional UUID tunnel_zone_id = 4;

    message Binding {
        optional string port_name = 1;
        optional uint32 vlan_id = 2;    // A VLAN ID is a short int.
        optional UUID network_id = 3;
    }

    repeated Binding bindings = 6;
}

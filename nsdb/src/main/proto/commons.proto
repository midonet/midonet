//
// Copyright 2014 Midokura SARL
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

package org.midonet.cluster.models;
option java_package = "org.midonet.cluster.models";
option java_outer_classname = "Commons";

enum IPVersion {
    V4 = 1;
    V6 = 2;
}

message UUID {
    required uint64 msb = 1;
    required uint64 lsb = 2;
}

message IPAddress {
    required IPVersion version = 1;
    required string address = 2;
}

message IPSubnet {
    required IPVersion version = 1;
    optional string address = 2;
    optional uint32 prefix_length = 3;
}

message Int32Range {
    optional int32 start = 1;
    optional int32 end = 2;
}

enum RuleDirection {
    EGRESS = 0;
    INGRESS = 1;
}

enum EtherType {
    ARP = 2054;    // 0x0806
    IPV4 = 2048;   // 0x0800
    IPV6 = 34525;  // 0x86dd
}

enum Protocol {
    TCP = 6;      // 0x6
    UDP = 17;     // 0x11
    ICMP = 1;     // 0x1
    ICMPV6 = 58;  // 0x3a
}

enum LBStatus {
    ACTIVE = 1;
    INACTIVE = 2;
}

message Condition {
    // Condition fields
    optional bool conjunction_inv = 1;
    optional bool match_forward_flow = 2;
    optional bool match_return_flow = 3;
    repeated UUID in_port_ids = 4;
    optional bool in_port_inv = 5;
    repeated UUID out_port_ids = 6;
    optional bool out_port_inv = 7;
    optional UUID port_group_id = 8;
    optional bool inv_port_group = 9;
    optional UUID ip_addr_group_id_src = 10;
    optional bool inv_ip_addr_group_id_src = 11;
    optional UUID ip_addr_group_id_dst = 12;
    optional bool inv_ip_addr_group_id_dst = 13;
    optional int32 dl_type = 14;
    optional bool inv_dl_type = 15;
    optional string dl_src = 16;
    optional int64 dl_src_mask = 17 [default = -1];  // Top 16 bits ignored.
    optional bool inv_dl_src = 18;
    optional string dl_dst = 19;
    optional int64 dl_dst_mask = 20 [default = -1];  // Top 16 bits ignored.
    optional bool inv_dl_dst = 21;
    optional int32 nw_tos = 22;
    optional bool nw_tos_inv = 23;
    optional int32 nw_proto = 24;
    optional bool nw_proto_inv = 25;
    optional IPSubnet nw_src_ip = 26;
    optional IPSubnet nw_dst_ip = 27;
    optional Int32Range tp_src = 28;
    optional Int32Range tp_dst = 29;
    optional bool nw_src_inv = 30;
    optional bool nw_dst_inv = 31;
    optional bool tp_src_inv = 32;
    optional bool tp_dst_inv = 33;
    optional UUID traversed_device = 34;
    optional bool traversed_device_inv = 35;

    enum FragmentPolicy {
        ANY = 1;
        NONHEADER = 2;
        HEADER = 3;
        UNFRAGMENTED = 4;
    }
    optional FragmentPolicy fragment_policy = 36;

    optional bool no_vlan = 60;
    optional uint32 vlan = 61;
    // end of condition fields
}

{
  "comments": [
    {
      "key": {
        "uuid": "3a1371a2_39f149ce",
        "filename": "midolman/src/main/java/org/midonet/midolman/simulation/Chain.java",
        "patchSetId": 14
      },
      "lineNbr": 26,
      "author": {
        "id": 1002751
      },
      "writtenOn": "2015-03-16T12:22:11Z",
      "side": 1,
      "message": "Import order.",
      "range": {
        "startLine": 25,
        "startChar": 0,
        "endLine": 26,
        "endChar": 0
      },
      "revId": "627b543a3a53b362d8065d8a4ce7159a22a1db22",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "3a1371a2_79baa1e2",
        "filename": "midolman/src/main/scala/org/midonet/cluster/services/MidonetBackendService.scala",
        "patchSetId": 14
      },
      "lineNbr": 92,
      "author": {
        "id": 1002751
      },
      "writtenOn": "2015-03-16T12:22:11Z",
      "side": 1,
      "message": "Bindings may affect the number of notifications you receive in the mapper, and consequently your unit tests: why not adding them now?",
      "range": {
        "startLine": 92,
        "startChar": 8,
        "endLine": 92,
        "endChar": 68
      },
      "revId": "627b543a3a53b362d8065d8a4ce7159a22a1db22",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "3a1371a2_59d52542",
        "filename": "midolman/src/main/scala/org/midonet/midolman/topology/ChainMapper.scala",
        "patchSetId": 14
      },
      "lineNbr": 53,
      "author": {
        "id": 1002751
      },
      "writtenOn": "2015-03-16T12:22:11Z",
      "side": 1,
      "message": "The ChainState from the DeviceWithChainsMapper already saves the current chain. Is this needed now?\n\nIf no, do we need the JumpChainState at all? Then, the jumpChains could simply be a:\n\n  Map[UUID, Int] \u003d chainId -\u003e refCount",
      "range": {
        "startLine": 51,
        "startChar": 0,
        "endLine": 53,
        "endChar": 70
      },
      "revId": "627b543a3a53b362d8065d8a4ce7159a22a1db22",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "3a1371a2_f9717178",
        "filename": "midolman/src/main/scala/org/midonet/midolman/topology/ChainMapper.scala",
        "patchSetId": 14
      },
      "lineNbr": 70,
      "author": {
        "id": 1002751
      },
      "writtenOn": "2015-03-16T12:22:11Z",
      "side": 1,
      "message": "Why not performing the zoom conversion here in doOnNext, and expose an Observable[SimRule]? The conversion can also update the local cache (currentRule), such that the method below setRule is not needed.",
      "range": {
        "startLine": 67,
        "startChar": 8,
        "endLine": 70,
        "endChar": 40
      },
      "revId": "627b543a3a53b362d8065d8a4ce7159a22a1db22",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "3a1371a2_39be6900",
        "filename": "midolman/src/main/scala/org/midonet/midolman/topology/ChainMapper.scala",
        "patchSetId": 14
      },
      "lineNbr": 73,
      "author": {
        "id": 1002751
      },
      "writtenOn": "2015-03-16T12:22:11Z",
      "side": 1,
      "message": "Remove \"\u003d\" or add \": Unit\" as return type.",
      "range": {
        "startLine": 73,
        "startChar": 38,
        "endLine": 73,
        "endChar": 39
      },
      "revId": "627b543a3a53b362d8065d8a4ce7159a22a1db22",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "3a1371a2_3955c9c6",
        "filename": "midolman/src/main/scala/org/midonet/midolman/topology/ChainMapper.scala",
        "patchSetId": 14
      },
      "lineNbr": 93,
      "author": {
        "id": 1002751
      },
      "writtenOn": "2015-03-16T12:22:11Z",
      "side": 1,
      "message": "I think this a blocker: Looking at the old ChainMapper and ClusterChainBuilder, I think we have to maintain the same order for rules as it appears in the chain, that is we can\u0027t pass to the SimulationChain the rules by simply doing:\n\n  rules.values.map(_.rule).toList.asJava\n\nMaybe we can use the old approach: maintain an order list of ruleIds:\n\n  var ruleIds: Seq[UUID] \u003d Seq.empty\n\ntaken from the protobuf as is, simply converted to scala:\n\n  ruleIds \u003d chain.getRuleIdsList.asScala.map(_.asJava)\n\nThen, when passing the rules to the SimulationChain, we can do:\n\n  ruleIds.map(rules.get(_))\n\nTo keep the same order.",
      "range": {
        "startLine": 93,
        "startChar": 3,
        "endLine": 93,
        "endChar": 62
      },
      "revId": "627b543a3a53b362d8065d8a4ce7159a22a1db22",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "3a1371a2_596365b1",
        "filename": "midolman/src/main/scala/org/midonet/midolman/topology/ChainMapper.scala",
        "patchSetId": 14
      },
      "lineNbr": 121,
      "author": {
        "id": 1002751
      },
      "writtenOn": "2015-03-16T12:22:11Z",
      "side": 1,
      "message": "I don\u0027t think we should log the protobuf, especially since the UUIDs are not intelligible, and add many lines to the log. I would go for logging individual fields as needed such as chainId, perhaps the ruleIds below.",
      "range": {
        "startLine": 121,
        "startChar": 55,
        "endLine": 121,
        "endChar": 60
      },
      "revId": "627b543a3a53b362d8065d8a4ce7159a22a1db22",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "3a1371a2_995dddec",
        "filename": "midolman/src/main/scala/org/midonet/midolman/topology/ChainMapper.scala",
        "patchSetId": 14
      },
      "lineNbr": 152,
      "author": {
        "id": 1002751
      },
      "writtenOn": "2015-03-16T12:22:11Z",
      "side": 1,
      "message": "Same comment here about logging protobufs. Maybe adding the rule after the zoom conversion?",
      "range": {
        "startLine": 152,
        "startChar": 54,
        "endLine": 152,
        "endChar": 58
      },
      "revId": "627b543a3a53b362d8065d8a4ce7159a22a1db22",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "3a1371a2_d96e3596",
        "filename": "midolman/src/main/scala/org/midonet/midolman/topology/ChainMapper.scala",
        "patchSetId": 14
      },
      "lineNbr": 165,
      "author": {
        "id": 1002751
      },
      "writtenOn": "2015-03-16T12:22:11Z",
      "side": 1,
      "message": "Only a question: why do you use isReady here? Does it mapper whether the rule is ready or not?",
      "range": {
        "startLine": 165,
        "startChar": 11,
        "endLine": 165,
        "endChar": 40
      },
      "revId": "627b543a3a53b362d8065d8a4ce7159a22a1db22",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "3a1371a2_396ca99c",
        "filename": "midolman/src/main/scala/org/midonet/midolman/topology/ChainMapper.scala",
        "patchSetId": 14
      },
      "lineNbr": 167,
      "author": {
        "id": 1002751
      },
      "writtenOn": "2015-03-16T12:22:11Z",
      "side": 1,
      "message": "Ahhh... I see, you need the previous rule before an update. How about caching the previous rule in the RuleState?\n\n  var currentRule: SimRule \u003d null\n  var previousRule: SimRule \u003d null\n\nAnd in doOnNext:\n\n  previousRule \u003d currentRule",
      "range": {
        "startLine": 166,
        "startChar": 16,
        "endLine": 167,
        "endChar": 57
      },
      "revId": "627b543a3a53b362d8065d8a4ce7159a22a1db22",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "3a1371a2_19172def",
        "filename": "midolman/src/main/scala/org/midonet/midolman/topology/ChainMapper.scala",
        "patchSetId": 14
      },
      "lineNbr": 190,
      "author": {
        "id": 1002751
      },
      "writtenOn": "2015-03-16T12:22:11Z",
      "side": 1,
      "message": "There is no need to save the jump chain in a local map. It is already available via:\n\n  def currentChains",
      "range": {
        "startLine": 190,
        "startChar": 8,
        "endLine": 190,
        "endChar": 50
      },
      "revId": "627b543a3a53b362d8065d8a4ce7159a22a1db22",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "3a1371a2_99f83de7",
        "filename": "midolman/src/main/scala/org/midonet/midolman/topology/ChainMapper.scala",
        "patchSetId": 14
      },
      "lineNbr": 201,
      "author": {
        "id": 1002751
      },
      "writtenOn": "2015-03-16T12:22:11Z",
      "side": 1,
      "message": "Add parentheses: this method has side effects.",
      "revId": "627b543a3a53b362d8065d8a4ce7159a22a1db22",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "3a1371a2_b9dd3945",
        "filename": "midolman/src/main/scala/org/midonet/midolman/topology/ChainMapper.scala",
        "patchSetId": 14
      },
      "lineNbr": 208,
      "author": {
        "id": 1002751
      },
      "writtenOn": "2015-03-16T12:22:11Z",
      "side": 1,
      "message": "Nit: Not needed.",
      "range": {
        "startLine": 208,
        "startChar": 8,
        "endLine": 208,
        "endChar": 13
      },
      "revId": "627b543a3a53b362d8065d8a4ce7159a22a1db22",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "3a1371a2_f9c33188",
        "filename": "midolman/src/main/scala/org/midonet/midolman/topology/ChainMapper.scala",
        "patchSetId": 14
      },
      "lineNbr": 218,
      "author": {
        "id": 1002751
      },
      "writtenOn": "2015-03-16T12:22:11Z",
      "side": 1,
      "message": "Nit: remove \"new\"?",
      "range": {
        "startLine": 218,
        "startChar": 19,
        "endLine": 218,
        "endChar": 22
      },
      "revId": "627b543a3a53b362d8065d8a4ce7159a22a1db22",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "3a1371a2_f9dcd176",
        "filename": "midolman/src/main/scala/org/midonet/midolman/topology/ChainMapper.scala",
        "patchSetId": 14
      },
      "lineNbr": 254,
      "author": {
        "id": 1002751
      },
      "writtenOn": "2015-03-16T12:22:11Z",
      "side": 1,
      "message": "Long lines: A possible solution suggested previously by Galo is to take each observable as a separate lazy val. This also makes it clearer to understand the purpose of each observable.",
      "range": {
        "startLine": 247,
        "startChar": 40,
        "endLine": 254,
        "endChar": 86
      },
      "revId": "627b543a3a53b362d8065d8a4ce7159a22a1db22",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "3a1371a2_99b95dec",
        "filename": "midolman/src/main/scala/org/midonet/midolman/topology/VirtualTopology.scala",
        "patchSetId": 14
      },
      "lineNbr": 32,
      "author": {
        "id": 1002751
      },
      "writtenOn": "2015-03-16T12:22:11Z",
      "side": 1,
      "message": "Import order.",
      "range": {
        "startLine": 32,
        "startChar": 0,
        "endLine": 32,
        "endChar": 44
      },
      "revId": "627b543a3a53b362d8065d8a4ce7159a22a1db22",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "3a1371a2_d992b59e",
        "filename": "midolman/src/test/scala/org/midonet/midolman/topology/ChainMapperTest.scala",
        "patchSetId": 14
      },
      "lineNbr": 80,
      "author": {
        "id": 1002751
      },
      "writtenOn": "2015-03-16T12:22:11Z",
      "side": 1,
      "message": "Missing parentheses.",
      "revId": "627b543a3a53b362d8065d8a4ce7159a22a1db22",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "3a1371a2_b9f37909",
        "filename": "midolman/src/test/scala/org/midonet/midolman/topology/ChainMapperTest.scala",
        "patchSetId": 14
      },
      "lineNbr": 179,
      "author": {
        "id": 1002751
      },
      "writtenOn": "2015-03-16T12:22:11Z",
      "side": 1,
      "message": "Same here.",
      "range": {
        "startLine": 179,
        "startChar": 57,
        "endLine": 179,
        "endChar": 69
      },
      "revId": "627b543a3a53b362d8065d8a4ce7159a22a1db22",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "3a1371a2_79e9011a",
        "filename": "midolman/src/test/scala/org/midonet/midolman/topology/ChainMapperTest.scala",
        "patchSetId": 14
      },
      "lineNbr": 206,
      "author": {
        "id": 1002751
      },
      "writtenOn": "2015-03-16T12:22:11Z",
      "side": 1,
      "message": "Same here.",
      "range": {
        "startLine": 206,
        "startChar": 57,
        "endLine": 206,
        "endChar": 69
      },
      "revId": "627b543a3a53b362d8065d8a4ce7159a22a1db22",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "3a1371a2_59eec523",
        "filename": "midolman/src/test/scala/org/midonet/midolman/topology/ChainMapperTest.scala",
        "patchSetId": 14
      },
      "lineNbr": 275,
      "author": {
        "id": 1002751
      },
      "writtenOn": "2015-03-16T12:22:11Z",
      "side": 1,
      "message": "Same here.",
      "range": {
        "startLine": 275,
        "startChar": 57,
        "endLine": 275,
        "endChar": 69
      },
      "revId": "627b543a3a53b362d8065d8a4ce7159a22a1db22",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    }
  ]
}
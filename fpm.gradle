/*
* Derived from gradle-fpm-plugin at https://github.com/kenshoo/gradle-fpm-plugin
*
* Copyright 2012 Kenshoo.com
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

import org.gradle.api.DefaultTask
import org.gradle.api.Plugin
import org.gradle.api.Project
import org.gradle.api.tasks.TaskAction
import org.gradle.api.tasks.Input
import org.gradle.api.tasks.OutputDirectory

apply plugin: PackagingPlugin

class PackagingPlugin implements Plugin<Project> {

    @Override
    void apply(Project project) {
        project.ext.pkgDestDir = "${project.buildDir}/TMPINST"
        project.extensions.create('packaging', PackagingPluginExtension)
        project.packaging.packageDir = new File(project.buildDir, "/packages")

        project.ext.packageTypes = ["debian", "rpm", "tar"]
        project.task('debian', group: 'Build', type: DebianTask)
        project.task('rpm', group: 'Build', type: RpmTask)
        project.task('tar', group: 'Build', type: TarTask)

        project.ext.pf9PackageTypes = ["mem_repo_debian", "mem_repo_rpm", "pf9wrapper"]
        project.task('mem_repo_debian', group: 'Build', type: DebianTask)
        project.task('mem_repo_rpm', group: 'Build', type: RpmTask)
        project.task('pf9wrapper', group: 'Build', type: RpmTask)

        project.ext.allPackageTypes = project.ext.packageTypes.clone()
        project.ext.allPackageTypes.addAll(project.ext.pf9PackageTypes)
        project.ext.allPackageTypes.each { pkgName ->
            project.task("cleanPkg_$pkgName", group: 'Build', type: Delete) {
                delete "${project.ext.pkgDestDir}"
            }
        }
    }

}

class PackagingPluginExtension {
    @Input
    def name

    @Input
    def version

    @Input
    def iteration

    @Input
    def maintainer

    @Input
    def vendor

    @Input
    def url

    @Input
    def description

    @Input
    def dependencies = []

    @Input
    def prefix

    @OutputDirectory
    def packageDir

    @Input
    def fpmOpts = []

    @Input
    def fpmOpts_common = []

    @Input
    def confFiles = []
}

class DebianTask extends PackagingTask {
    DebianTask(){
        super('deb')
    }
}

class RpmTask extends PackagingTask {
    RpmTask(){
        super('rpm')
    }
}

class TarTask extends PackagingTask {
    TarTask(){
        super('tar')
    }

    def getArgs() {
        def version = project.version
        if (conf.version)
            version = conf.version
        def name = "${project.name}-"+version
        def compress_ext = ".tar.gz"
        ["-t", this.type, "-s", "dir", "-n", name,
         "-p", name+compress_ext, "-C", project.ext.pkgDestDir]
    }
}

class PackagingTask extends DefaultTask {
    def conf
    def type

    PackagingTask(String type_){
        type = type_
    }

    @TaskAction
    pkg() {
        conf = project.packaging

        def outDir = conf.packageDir
        if (!outDir.exists())
            outDir.mkdirs()


        def fpmArgs = getArgs()
        logger.info('running fpm with: ' + fpmArgs)

        project.exec {
            commandLine 'fpm'
            args fpmArgs
            workingDir outDir.getAbsolutePath()
        }
    }

    def getArgs() {
        def version = project.version
        if (conf.version)
            version = conf.version

        def fpmArgs = ["-t", this.type, "-s", "dir", "-n", conf.name,
                       "-v", version, "-C", project.ext.pkgDestDir]

        if (conf.prefix)
            fpmArgs.addAll(["--prefix", prefix])
        if (conf.description)
            fpmArgs.addAll(["--description", conf.description])
        if (conf.vendor)
            fpmArgs.addAll(["--vendor", conf.vendor])
        if (conf.iteration)
            fpmArgs.addAll(["--iteration", conf.iteration])
        if (conf.maintainer)
            fpmArgs.addAll(["--maintainer", conf.maintainer])
        if (conf.url)
            fpmArgs.addAll(["--url", conf.url])
        conf.dependencies.each() {
            fpmArgs << "-d"
            fpmArgs << it
        }
        conf.confFiles.each() {
            fpmArgs << "--config-files"
            fpmArgs << it
        }
        if (conf.fpmOpts)
            fpmArgs.addAll(conf.fpmOpts)
        fpmArgs << "."

        fpmArgs
    }
}

{
  "comments": [
    {
      "key": {
        "uuid": "9ad9bd40_151e8d63",
        "filename": "cluster/midonet-cluster/src/main/scala/org/midonet/cluster/services/c3po/translators/PortTranslator.scala",
        "patchSetId": 1
      },
      "lineNbr": 85,
      "author": {
        "id": 1002821
      },
      "writtenOn": "2015-07-14T08:52:17Z",
      "side": 1,
      "message": "I know we do this some places, but it really isn\u0027t necessary. NeutronTranslator.translate() catches all nonfatal exceptions (including TranslationException) and wraps them in new TranslationException(op, _). I suggest throwing a more specific exception.",
      "range": {
        "startLine": 85,
        "startChar": 30,
        "endLine": 85,
        "endChar": 72
      },
      "revId": "224945108919694d70a7850dc16440aaeedba64a",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9ad9bd40_b5a961e1",
        "filename": "cluster/midonet-cluster/src/main/scala/org/midonet/cluster/services/c3po/translators/PortTranslator.scala",
        "patchSetId": 1
      },
      "lineNbr": 85,
      "author": {
        "id": 1002731
      },
      "writtenOn": "2015-07-14T09:04:48Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "9ad9bd40_151e8d63",
      "range": {
        "startLine": 85,
        "startChar": 30,
        "endLine": 85,
        "endChar": 72
      },
      "revId": "224945108919694d70a7850dc16440aaeedba64a",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9ad9bd40_9558dd33",
        "filename": "cluster/midonet-cluster/src/main/scala/org/midonet/cluster/services/rest_api/neutron/plugin/NeutronZoomPlugin.scala",
        "patchSetId": 1
      },
      "lineNbr": 50,
      "author": {
        "id": 1002821
      },
      "writtenOn": "2015-07-14T08:52:17Z",
      "side": 1,
      "message": "Should either of these be bundled into the ResourceContext?\n\nAlternatively, what\u0027s the justification for the existence of ResourceContext? With injection, is there actually any advantage to bundling resources together?",
      "range": {
        "startLine": 49,
        "startChar": 34,
        "endLine": 50,
        "endChar": 67
      },
      "revId": "224945108919694d70a7850dc16440aaeedba64a",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9ad9bd40_f591299b",
        "filename": "cluster/midonet-cluster/src/main/scala/org/midonet/cluster/services/rest_api/neutron/plugin/NeutronZoomPlugin.scala",
        "patchSetId": 1
      },
      "lineNbr": 50,
      "author": {
        "id": 1002731
      },
      "writtenOn": "2015-07-14T09:04:48Z",
      "side": 1,
      "message": "I didn\u0027t want to expose PathBuilder or ZookeeperLockFactory to all other resources, they should not use them.\n\nCTOR injection would do the same *if* it\u0027s only injected in one resource. The moment you want to share it on many, you need to modify each and every resource. If you want to share it in an AbstractResource, you turn all class declarations into verbose class Foo(x: X, y: Y, z: Z) extends AbstractResource(x, y, z). Which again are too cumbersome to refactor. See our v1 APIs and AbstractResource for a live example.\n\nPacking them all in ResourceContext fixes this. Adding a new ref. to resource context implies changing 3 lines (the constructor, the construction, and the specific resource that needs the new binding). And it\u0027s inmediately available to any other Resources that chose to use  it.",
      "parentUuid": "9ad9bd40_9558dd33",
      "range": {
        "startLine": 49,
        "startChar": 34,
        "endLine": 50,
        "endChar": 67
      },
      "revId": "224945108919694d70a7850dc16440aaeedba64a",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9ad9bd40_3547114d",
        "filename": "cluster/midonet-cluster/src/main/scala/org/midonet/cluster/services/rest_api/resources/PortResource.scala",
        "patchSetId": 1
      },
      "lineNbr": 70,
      "author": {
        "id": 1002821
      },
      "writtenOn": "2015-07-14T08:52:17Z",
      "side": 1,
      "message": "Should we include t as the cause?\n\nAlso, if the getOrElse block throws the exception, this is going to say \"Unable to generate new tunnel key: Unable to generate new tunnel key.\" Might as well just call get instead of getOrElse and catch the exception that throws.",
      "range": {
        "startLine": 69,
        "startChar": 22,
        "endLine": 70,
        "endChar": 70
      },
      "revId": "224945108919694d70a7850dc16440aaeedba64a",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9ad9bd40_358c717f",
        "filename": "cluster/midonet-cluster/src/main/scala/org/midonet/cluster/services/rest_api/resources/PortResource.scala",
        "patchSetId": 1
      },
      "lineNbr": 70,
      "author": {
        "id": 1002731
      },
      "writtenOn": "2015-07-14T09:04:48Z",
      "side": 1,
      "message": "Oh this is a mess, I didn\u0027t clean this up. Fixing.\n\nI\u0027ll keep the t.getMessage in the Http exception as this will be shown to the end-user and it doesn\u0027t need to show all info. But will log the error with the stack trace.",
      "parentUuid": "9ad9bd40_3547114d",
      "range": {
        "startLine": 69,
        "startChar": 22,
        "endLine": 70,
        "endChar": 70
      },
      "revId": "224945108919694d70a7850dc16440aaeedba64a",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9ad9bd40_fe7cabb7",
        "filename": "cluster/midonet-cluster/src/test/scala/org/midonet/cluster/services/c3po/translators/PortTranslatorTest.scala",
        "patchSetId": 1
      },
      "lineNbr": 119,
      "author": {
        "id": 1002760
      },
      "writtenOn": "2015-07-14T00:31:08Z",
      "side": 1,
      "message": "Alternatively, you can just mock SequenceDispenser using mockito.",
      "range": {
        "startLine": 109,
        "startChar": 4,
        "endLine": 119,
        "endChar": 5
      },
      "revId": "224945108919694d70a7850dc16440aaeedba64a",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9ad9bd40_b55b212d",
        "filename": "cluster/midonet-cluster/src/test/scala/org/midonet/cluster/services/c3po/translators/PortTranslatorTest.scala",
        "patchSetId": 1
      },
      "lineNbr": 119,
      "author": {
        "id": 1002731
      },
      "writtenOn": "2015-07-14T08:47:14Z",
      "side": 1,
      "message": "Yeah, I prefer to use this approach when the overrides are small as it ends up similar to programming the mock.",
      "parentUuid": "9ad9bd40_fe7cabb7",
      "range": {
        "startLine": 109,
        "startChar": 4,
        "endLine": 119,
        "endChar": 5
      },
      "revId": "224945108919694d70a7850dc16440aaeedba64a",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9ad9bd40_3e4e1397",
        "filename": "cluster/midonet-cluster/src/test/scala/org/midonet/cluster/services/c3po/translators/PortTranslatorTest.scala",
        "patchSetId": 1
      },
      "lineNbr": 1235,
      "author": {
        "id": 1002760
      },
      "writtenOn": "2015-07-14T00:31:08Z",
      "side": 1,
      "message": "Should Router Interface Port have a tunnel key?",
      "range": {
        "startLine": 1226,
        "startChar": 4,
        "endLine": 1235,
        "endChar": 9
      },
      "revId": "224945108919694d70a7850dc16440aaeedba64a",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9ad9bd40_f53cc9c1",
        "filename": "cluster/midonet-cluster/src/test/scala/org/midonet/cluster/services/c3po/translators/PortTranslatorTest.scala",
        "patchSetId": 1
      },
      "lineNbr": 1235,
      "author": {
        "id": 1002731
      },
      "writtenOn": "2015-07-14T08:47:14Z",
      "side": 1,
      "message": "All ports created in midonet do get one. I added the assert here because it has the midoOp exposed already.",
      "parentUuid": "9ad9bd40_3e4e1397",
      "range": {
        "startLine": 1226,
        "startChar": 4,
        "endLine": 1235,
        "endChar": 9
      },
      "revId": "224945108919694d70a7850dc16440aaeedba64a",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    }
  ]
}
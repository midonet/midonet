{
  "comments": [
    {
      "key": {
        "uuid": "9ad9bd40_82fbc545",
        "filename": "cluster/midonet-cluster/src/main/scala/org/midonet/cluster/services/rest_api/resources/BridgeResource.scala",
        "patchSetId": 3
      },
      "lineNbr": 97,
      "author": {
        "id": 1002821
      },
      "writtenOn": "2015-08-06T09:58:19Z",
      "side": 1,
      "message": "tryWith is the same as Try(...).orElse(...)\n\nval addr \u003d Try(IPv4Addr.fromString(parts(0))).orElse(\n            throw new BadRequestHttpException(getMessage(IP_ADDR_INVALID)))\n\n\nAlternatively, since you use this pattern several times in this file alone, consider a function that just takes a function and a message, and throws a BadRequestHttpException with that message if it fails:\n\n  val addr \u003d tryOrBadRequest(IPv4Addr.fromString(parts(0)), IP_ADDR_INVALID)",
      "range": {
        "startLine": 95,
        "startChar": 0,
        "endLine": 97,
        "endChar": 9
      },
      "revId": "3f5500130c89ddb0ec6555ffe93bd97bf0d20337",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9ad9bd40_427a9dbd",
        "filename": "cluster/midonet-cluster/src/main/scala/org/midonet/cluster/services/rest_api/resources/BridgeResource.scala",
        "patchSetId": 3
      },
      "lineNbr": 124,
      "author": {
        "id": 1002821
      },
      "writtenOn": "2015-08-06T09:58:19Z",
      "side": 1,
      "message": "This is fine, but FYI you can also do this:\n\n        for ((ip, mac) \u003c- entries.toList)\n            yield new Ip4MacPair(resContext.uriInfo.getBaseUri,\n                                 bridgeId, ip.toString, mac.toString)",
      "range": {
        "startLine": 121,
        "startChar": 0,
        "endLine": 124,
        "endChar": 16
      },
      "revId": "3f5500130c89ddb0ec6555ffe93bd97bf0d20337",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9ad9bd40_625c014c",
        "filename": "cluster/midonet-cluster/src/main/scala/org/midonet/cluster/services/rest_api/resources/MidonetResource.scala",
        "patchSetId": 3
      },
      "lineNbr": 79,
      "author": {
        "id": 1002821
      },
      "writtenOn": "2015-08-06T09:58:19Z",
      "side": 1,
      "message": "As noted in the previous file, this is just Try(f).orElse(throw e). It\u0027s slightly more concise, but IMO not enough to justify reinventing the wheel.",
      "range": {
        "startLine": 73,
        "startChar": 0,
        "endLine": 79,
        "endChar": 5
      },
      "revId": "3f5500130c89ddb0ec6555ffe93bd97bf0d20337",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9ad9bd40_822e65a3",
        "filename": "cluster/midonet-cluster/src/main/scala/org/midonet/cluster/services/rest_api/resources/MidonetResource.scala",
        "patchSetId": 3
      },
      "lineNbr": 92,
      "author": {
        "id": 1002821
      },
      "writtenOn": "2015-08-06T09:58:19Z",
      "side": 1,
      "message": "Can you get these exceptions on a read?",
      "range": {
        "startLine": 87,
        "startChar": 0,
        "endLine": 92,
        "endChar": 67
      },
      "revId": "3f5500130c89ddb0ec6555ffe93bd97bf0d20337",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9ad9bd40_a517f343",
        "filename": "cluster/midonet-cluster/src/main/scala/org/midonet/cluster/services/rest_api/resources/MidonetResource.scala",
        "patchSetId": 3
      },
      "lineNbr": 104,
      "author": {
        "id": 1002821
      },
      "writtenOn": "2015-08-06T09:58:19Z",
      "side": 1,
      "message": "Why do you log the attempt number only when you\u0027re not going to retry?",
      "range": {
        "startLine": 104,
        "startChar": 0,
        "endLine": 104,
        "endChar": 71
      },
      "revId": "3f5500130c89ddb0ec6555ffe93bd97bf0d20337",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9ad9bd40_05209f99",
        "filename": "cluster/midonet-cluster/src/main/scala/org/midonet/cluster/services/rest_api/resources/MidonetResource.scala",
        "patchSetId": 3
      },
      "lineNbr": 107,
      "author": {
        "id": 1002821
      },
      "writtenOn": "2015-08-06T09:58:19Z",
      "side": 1,
      "message": "I don\u0027t think these should be logged as errors. They\u0027re most likely to be caused by user error, right? We shouldn\u0027t log user errors at error level.",
      "range": {
        "startLine": 107,
        "startChar": 0,
        "endLine": 107,
        "endChar": 71
      },
      "revId": "3f5500130c89ddb0ec6555ffe93bd97bf0d20337",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9ad9bd40_e52c9b9b",
        "filename": "cluster/midonet-cluster/src/main/scala/org/midonet/cluster/services/rest_api/resources/MidonetResource.scala",
        "patchSetId": 3
      },
      "lineNbr": 116,
      "author": {
        "id": 1002821
      },
      "writtenOn": "2015-08-06T09:58:19Z",
      "side": 1,
      "message": "This is where we should be logging the attempt number, isn\u0027t it?",
      "range": {
        "startLine": 115,
        "startChar": 0,
        "endLine": 116,
        "endChar": 32
      },
      "revId": "3f5500130c89ddb0ec6555ffe93bd97bf0d20337",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9ad9bd40_c529578b",
        "filename": "cluster/midonet-cluster/src/main/scala/org/midonet/cluster/services/rest_api/resources/MidonetResource.scala",
        "patchSetId": 3
      },
      "lineNbr": 118,
      "author": {
        "id": 1002821
      },
      "writtenOn": "2015-08-06T09:58:19Z",
      "side": 1,
      "message": "Shouldn\u0027t this increment attempt? If there\u0027s an unhandled exception that happens every time, this will keep retrying forever.",
      "range": {
        "startLine": 117,
        "startChar": 0,
        "endLine": 118,
        "endChar": 55
      },
      "revId": "3f5500130c89ddb0ec6555ffe93bd97bf0d20337",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9ad9bd40_45446749",
        "filename": "cluster/midonet-cluster/src/main/scala/org/midonet/cluster/services/rest_api/resources/MidonetResource.scala",
        "patchSetId": 3
      },
      "lineNbr": 131,
      "author": {
        "id": 1002821
      },
      "writtenOn": "2015-08-06T09:58:19Z",
      "side": 1,
      "message": "I don\u0027t think this is right. NOT_ACCEPTABLE (406) means that this endpoint can\u0027t provide data with the characteristics (usually media type, for us) requested by the caller. For example, if a caller requested data of type APPLICATION_BRIDGE from the getArpEntry endpoint. I think all such cases should be handled automatically by the web service framework.\n\nWhat exceptions other than NoStatePathException are you expecting to get here?",
      "range": {
        "startLine": 131,
        "startChar": 53,
        "endLine": 131,
        "endChar": 74
      },
      "revId": "3f5500130c89ddb0ec6555ffe93bd97bf0d20337",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9ad9bd40_456b87b6",
        "filename": "cluster/midonet-cluster/src/main/scala/org/midonet/cluster/services/rest_api/resources/MidonetResource.scala",
        "patchSetId": 3
      },
      "lineNbr": 149,
      "author": {
        "id": 1002821
      },
      "writtenOn": "2015-08-06T09:58:19Z",
      "side": 1,
      "message": "Ditto.",
      "range": {
        "startLine": 148,
        "startChar": 0,
        "endLine": 149,
        "endChar": 62
      },
      "revId": "3f5500130c89ddb0ec6555ffe93bd97bf0d20337",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    }
  ]
}
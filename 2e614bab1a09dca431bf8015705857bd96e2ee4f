{
  "comments": [
    {
      "key": {
        "uuid": "1a106d94_09094995",
        "filename": "midolman/src/main/scala/org/midonet/midolman/PacketWorkflow.scala",
        "patchSetId": 1
      },
      "lineNbr": 184,
      "author": {
        "id": 1003555
      },
      "writtenOn": "2015-04-15T10:48:36Z",
      "side": 1,
      "message": "object type should be ArpRequestBroker",
      "range": {
        "startLine": 184,
        "startChar": 28,
        "endLine": 184,
        "endChar": 29
      },
      "revId": "2e614bab1a09dca431bf8015705857bd96e2ee4f",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "1a106d94_89f41988",
        "filename": "midolman/src/main/scala/org/midonet/midolman/state/ArpRequestBroker.scala",
        "patchSetId": 1
      },
      "lineNbr": 84,
      "author": {
        "id": 1003555
      },
      "writtenOn": "2015-04-15T10:48:36Z",
      "side": 1,
      "message": "How do routers get deleted from the map or do they live forever? Perhaps the SingleRouterArpRequestBroker could live as part of the Router object, as a ThreadLocal? The fact that you are passing in the router to each call indicates that it should be owned by the router.",
      "revId": "2e614bab1a09dca431bf8015705857bd96e2ee4f",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "1a106d94_8491a054",
        "filename": "midolman/src/main/scala/org/midonet/midolman/state/ArpRequestBroker.scala",
        "patchSetId": 1
      },
      "lineNbr": 84,
      "author": {
        "id": 1002763
      },
      "writtenOn": "2015-04-15T13:07:33Z",
      "side": 1,
      "message": "They now get cleaned up in my local copy. Basically, on each process() loop all empty brokers are forgotten.\n\n\"Perhaps the SingleRouterArpRequestBroker could live as part of the Router object, as a ThreadLocal? The fact that you are passing in the router to each call indicates that it should be owned by the router.\"\n\nThat\u0027s a fair point. I chose this trade-off because The SingleRouter... needs stuff private that belongs to the packet workflow, such as the packet emitter and the flow invalidator. The emitter is accessible in the packet context, but then it\u0027s also used as a result of process(). The flow invalidator could be worked around, as the RouterManager, which builds the arp tables, has one. \n\nThere\u0027s another code code-organisation trade-off: Adding the thread-local to the router object in the cluster layer, or offering the arp table as a facility in the pkt context and have this clearly instantiated and managed in the packet workflow which is the thread that really owns each instance (with the drawback of passing in the router).\n\nMore thoughts welcome, also 3rd opinions.",
      "parentUuid": "1a106d94_89f41988",
      "revId": "2e614bab1a09dca431bf8015705857bd96e2ee4f",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "1a106d94_292d25ff",
        "filename": "midolman/src/main/scala/org/midonet/midolman/state/ArpRequestBroker.scala",
        "patchSetId": 1
      },
      "lineNbr": 111,
      "author": {
        "id": 1003555
      },
      "writtenOn": "2015-04-15T10:48:36Z",
      "side": 1,
      "message": "This doesn\u0027t seem to be called from anywhere. Perhaps it should be called after each of the above operations.",
      "revId": "2e614bab1a09dca431bf8015705857bd96e2ee4f",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "1a106d94_c4a9d87c",
        "filename": "midolman/src/main/scala/org/midonet/midolman/state/ArpRequestBroker.scala",
        "patchSetId": 1
      },
      "lineNbr": 111,
      "author": {
        "id": 1002763
      },
      "writtenOn": "2015-04-15T13:07:33Z",
      "side": 1,
      "message": "It\u0027s now, out of packetworkflow.process()",
      "parentUuid": "1a106d94_292d25ff",
      "revId": "2e614bab1a09dca431bf8015705857bd96e2ee4f",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "1a106d94_04bbf0c4",
        "filename": "midolman/src/main/scala/org/midonet/midolman/state/ArpRequestBroker.scala",
        "patchSetId": 1
      },
      "lineNbr": 230,
      "author": {
        "id": 1002763
      },
      "writtenOn": "2015-04-15T13:07:33Z",
      "side": 1,
      "message": "this is done too.",
      "revId": "2e614bab1a09dca431bf8015705857bd96e2ee4f",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "1a106d94_297b65f6",
        "filename": "midolman/src/main/scala/org/midonet/midolman/state/ArpRequestBroker.scala",
        "patchSetId": 1
      },
      "lineNbr": 233,
      "author": {
        "id": 1003555
      },
      "writtenOn": "2015-04-15T10:48:36Z",
      "side": 1,
      "message": "unused",
      "range": {
        "startLine": 233,
        "startChar": 44,
        "endLine": 233,
        "endChar": 49
      },
      "revId": "2e614bab1a09dca431bf8015705857bd96e2ee4f",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "1a106d94_64b2a4e7",
        "filename": "midolman/src/main/scala/org/midonet/midolman/state/ArpRequestBroker.scala",
        "patchSetId": 1
      },
      "lineNbr": 233,
      "author": {
        "id": 1002763
      },
      "writtenOn": "2015-04-15T13:07:33Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "1a106d94_297b65f6",
      "range": {
        "startLine": 233,
        "startChar": 44,
        "endLine": 233,
        "endChar": 49
      },
      "revId": "2e614bab1a09dca431bf8015705857bd96e2ee4f",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "1a106d94_49d6a1c6",
        "filename": "midolman/src/main/scala/org/midonet/midolman/state/ArpRequestBroker.scala",
        "patchSetId": 1
      },
      "lineNbr": 310,
      "author": {
        "id": 1003555
      },
      "writtenOn": "2015-04-15T10:48:36Z",
      "side": 1,
      "message": "this should also remove the loops waiting for that ip",
      "revId": "2e614bab1a09dca431bf8015705857bd96e2ee4f",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "1a106d94_44ecc8c7",
        "filename": "midolman/src/main/scala/org/midonet/midolman/state/ArpRequestBroker.scala",
        "patchSetId": 1
      },
      "lineNbr": 310,
      "author": {
        "id": 1002763
      },
      "writtenOn": "2015-04-15T13:07:33Z",
      "side": 1,
      "message": "processArpLoops() takes that into account by checking (loop.shouldRetry) instead of blindly retrying. This keeps the loop handling code in one place and prevents poking inside the priority queue deeper than its head.",
      "parentUuid": "1a106d94_49d6a1c6",
      "revId": "2e614bab1a09dca431bf8015705857bd96e2ee4f",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    }
  ]
}
{
  "comments": [
    {
      "key": {
        "uuid": "baa041b7_fb6e33c8",
        "filename": "midolman/src/main/scala/org/midonet/midolman/containers/ContainerService.scala",
        "patchSetId": 1
      },
      "lineNbr": 446,
      "author": {
        "id": 1003318
      },
      "writtenOn": "2016-04-18T10:58:59Z",
      "side": 1,
      "message": "r",
      "revId": "83467046eee89b817ce6699fe8e1ff264ba690e3",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "baa041b7_7bba2325",
        "filename": "midolman/src/main/scala/org/midonet/midolman/containers/ContainerService.scala",
        "patchSetId": 1
      },
      "lineNbr": 446,
      "author": {
        "id": 1002751
      },
      "writtenOn": "2016-04-18T11:02:13Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "baa041b7_fb6e33c8",
      "revId": "83467046eee89b817ce6699fe8e1ff264ba690e3",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "baa041b7_9b64c7e5",
        "filename": "midolman/src/test/scala/org/midonet/midolman/containers/ContainerServiceTest.scala",
        "patchSetId": 1
      },
      "lineNbr": 875,
      "author": {
        "id": 1003318
      },
      "writtenOn": "2016-04-18T10:58:59Z",
      "side": 1,
      "message": "This comes from another patch, ContainerLimit and Quota refers to the same value. May be good to homogenize the anems (setContainerQuota and getQuota, or setContainerLimit and getLimit).",
      "range": {
        "startLine": 875,
        "startChar": 40,
        "endLine": 875,
        "endChar": 57
      },
      "revId": "83467046eee89b817ce6699fe8e1ff264ba690e3",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "baa041b7_9baba7d6",
        "filename": "midolman/src/test/scala/org/midonet/midolman/containers/ContainerServiceTest.scala",
        "patchSetId": 1
      },
      "lineNbr": 875,
      "author": {
        "id": 1002751
      },
      "writtenOn": "2016-04-18T11:02:13Z",
      "side": 1,
      "message": "They are different:\n- limit: is the max number of containers we can start at a host, set by the operator\n- count: how many containers the host has at any given moment\n- quota \u003d limit - count",
      "parentUuid": "baa041b7_9b64c7e5",
      "range": {
        "startLine": 875,
        "startChar": 40,
        "endLine": 875,
        "endChar": 57
      },
      "revId": "83467046eee89b817ce6699fe8e1ff264ba690e3",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "baa041b7_bbde6b6b",
        "filename": "midolman/src/test/scala/org/midonet/midolman/containers/ContainerServiceTest.scala",
        "patchSetId": 1
      },
      "lineNbr": 875,
      "author": {
        "id": 1003318
      },
      "writtenOn": "2016-04-18T11:13:05Z",
      "side": 1,
      "message": "ok",
      "parentUuid": "baa041b7_9baba7d6",
      "range": {
        "startLine": 875,
        "startChar": 40,
        "endLine": 875,
        "endChar": 57
      },
      "revId": "83467046eee89b817ce6699fe8e1ff264ba690e3",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "baa041b7_fbcab3a0",
        "filename": "midolman/src/test/scala/org/midonet/midolman/containers/ContainerServiceTest.scala",
        "patchSetId": 1
      },
      "lineNbr": 919,
      "author": {
        "id": 1003318
      },
      "writtenOn": "2016-04-18T11:13:05Z",
      "side": 1,
      "message": "I\u0027d like to see a test here updating the limit and then the quota is updated accordingly (the same as the previous test but when count !\u003d 0).",
      "revId": "83467046eee89b817ce6699fe8e1ff264ba690e3",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "baa041b7_41bbf0e5",
        "filename": "midolman/src/test/scala/org/midonet/midolman/containers/ContainerServiceTest.scala",
        "patchSetId": 1
      },
      "lineNbr": 919,
      "author": {
        "id": 1002751
      },
      "writtenOn": "2016-04-18T17:36:08Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "baa041b7_fbcab3a0",
      "revId": "83467046eee89b817ce6699fe8e1ff264ba690e3",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "baa041b7_fbf3d308",
        "filename": "midolman/src/test/scala/org/midonet/midolman/containers/ContainerServiceTest.scala",
        "patchSetId": 1
      },
      "lineNbr": 923,
      "author": {
        "id": 1003318
      },
      "writtenOn": "2016-04-18T11:13:05Z",
      "side": 1,
      "message": "o",
      "range": {
        "startLine": 923,
        "startChar": 30,
        "endLine": 923,
        "endChar": 31
      },
      "revId": "83467046eee89b817ce6699fe8e1ff264ba690e3",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "baa041b7_81f218d1",
        "filename": "midolman/src/test/scala/org/midonet/midolman/containers/ContainerServiceTest.scala",
        "patchSetId": 1
      },
      "lineNbr": 923,
      "author": {
        "id": 1002751
      },
      "writtenOn": "2016-04-18T17:36:08Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "baa041b7_fbf3d308",
      "range": {
        "startLine": 923,
        "startChar": 30,
        "endLine": 923,
        "endChar": 31
      },
      "revId": "83467046eee89b817ce6699fe8e1ff264ba690e3",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "baa041b7_9b3607e6",
        "filename": "nsdb/src/main/proto/state.proto",
        "patchSetId": 1
      },
      "lineNbr": 25,
      "author": {
        "id": 1003555
      },
      "writtenOn": "2016-04-18T10:49:13Z",
      "side": 1,
      "message": "does it make sense to have quota and count here? Can\u0027t the scheduler minion work with just the count?",
      "revId": "83467046eee89b817ce6699fe8e1ff264ba690e3",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "baa041b7_7b6343dd",
        "filename": "nsdb/src/main/proto/state.proto",
        "patchSetId": 1
      },
      "lineNbr": 25,
      "author": {
        "id": 1002751
      },
      "writtenOn": "2016-04-18T10:59:36Z",
      "side": 1,
      "message": "I added it here because it was easier/less code (yes, the scheduler should be able to work just with the container limit and count - but now the scheduler does not monitor the Host objects only the container service status - so to get the limit, I would have needed to add another observable in the HostSelector/HostTracker just to monitor the limit, which isn\u0027t even supposed to change that often). I also though that this increases the znode data size, but reduces the number of zk watches/reads.",
      "parentUuid": "baa041b7_9b3607e6",
      "revId": "83467046eee89b817ce6699fe8e1ff264ba690e3",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    }
  ]
}
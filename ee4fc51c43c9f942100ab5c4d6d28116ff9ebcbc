{
  "comments": [
    {
      "key": {
        "uuid": "1a106d94_6414644e",
        "filename": "midolman/src/main/scala/org/midonet/midolman/state/ArpRequestBroker.scala",
        "patchSetId": 2
      },
      "lineNbr": 61,
      "author": {
        "id": 1002754
      },
      "writtenOn": "2015-04-15T14:27:59Z",
      "side": 1,
      "message": "Do we need the trait?",
      "revId": "ee4fc51c43c9f942100ab5c4d6d28116ff9ebcbc",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "1a106d94_7821a44c",
        "filename": "midolman/src/main/scala/org/midonet/midolman/state/ArpRequestBroker.scala",
        "patchSetId": 2
      },
      "lineNbr": 61,
      "author": {
        "id": 1002763
      },
      "writtenOn": "2015-04-15T15:07:56Z",
      "side": 1,
      "message": "guess not.",
      "parentUuid": "1a106d94_6414644e",
      "revId": "ee4fc51c43c9f942100ab5c4d6d28116ff9ebcbc",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "1a106d94_847360e6",
        "filename": "midolman/src/main/scala/org/midonet/midolman/state/ArpRequestBroker.scala",
        "patchSetId": 2
      },
      "lineNbr": 78,
      "author": {
        "id": 1002754
      },
      "writtenOn": "2015-04-15T14:27:59Z",
      "side": 1,
      "message": ": Unit",
      "revId": "ee4fc51c43c9f942100ab5c4d6d28116ff9ebcbc",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "1a106d94_24626c3e",
        "filename": "midolman/src/main/scala/org/midonet/midolman/state/ArpRequestBroker.scala",
        "patchSetId": 2
      },
      "lineNbr": 86,
      "author": {
        "id": 1002754
      },
      "writtenOn": "2015-04-15T14:27:59Z",
      "side": 1,
      "message": "Is this use-case still valid? It seems the reply will always be valid (it will be the opinion of this agent).",
      "revId": "ee4fc51c43c9f942100ab5c4d6d28116ff9ebcbc",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "1a106d94_3828cc33",
        "filename": "midolman/src/main/scala/org/midonet/midolman/state/ArpRequestBroker.scala",
        "patchSetId": 2
      },
      "lineNbr": 86,
      "author": {
        "id": 1002763
      },
      "writtenOn": "2015-04-15T15:07:56Z",
      "side": 1,
      "message": "It is unless you add replies cache to the broker. Because get() goes to the replicated map, a newly learned mac will remain null in all local threads until the zk callback is fired.",
      "parentUuid": "1a106d94_24626c3e",
      "revId": "ee4fc51c43c9f942100ab5c4d6d28116ff9ebcbc",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "1a106d94_38844c0b",
        "filename": "midolman/src/main/scala/org/midonet/midolman/state/ArpRequestBroker.scala",
        "patchSetId": 2
      },
      "lineNbr": 86,
      "author": {
        "id": 1002754
      },
      "writtenOn": "2015-04-15T15:23:52Z",
      "side": 1,
      "message": "Hum... I don\u0027t get it. Will ask f2f.",
      "parentUuid": "1a106d94_3828cc33",
      "revId": "ee4fc51c43c9f942100ab5c4d6d28116ff9ebcbc",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "1a106d94_f805947a",
        "filename": "midolman/src/main/scala/org/midonet/midolman/state/ArpRequestBroker.scala",
        "patchSetId": 2
      },
      "lineNbr": 107,
      "author": {
        "id": 1003555
      },
      "writtenOn": "2015-04-15T15:43:54Z",
      "side": 1,
      "message": "I think what looked weird here for me was that by passing in the Router and having a map based on the router, it looks like you\u0027re trying to retrofit a new field on the router, rather than grouping the arp entries by the router id. Perhaps this would be clearer if only the router id was passed in.",
      "range": {
        "startLine": 107,
        "startChar": 17,
        "endLine": 107,
        "endChar": 20
      },
      "revId": "ee4fc51c43c9f942100ab5c4d6d28116ff9ebcbc",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "1a106d94_24438215",
        "filename": "midolman/src/main/scala/org/midonet/midolman/state/ArpRequestBroker.scala",
        "patchSetId": 2
      },
      "lineNbr": 107,
      "author": {
        "id": 1002763
      },
      "writtenOn": "2015-04-17T10:17:28Z",
      "side": 1,
      "message": "Actually, what I needed to get a hold of was two things, the router id and its arpCache. I could just pass the Id, but then this class would depend on the VirtualTopologyActor, I wanted to avoid that dependency.\n\nStill open to suggestions :\\",
      "parentUuid": "1a106d94_f805947a",
      "range": {
        "startLine": 107,
        "startChar": 17,
        "endLine": 107,
        "endChar": 20
      },
      "revId": "ee4fc51c43c9f942100ab5c4d6d28116ff9ebcbc",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "1a106d94_64557a4f",
        "filename": "midolman/src/main/scala/org/midonet/midolman/state/ArpRequestBroker.scala",
        "patchSetId": 2
      },
      "lineNbr": 107,
      "author": {
        "id": 1003555
      },
      "writtenOn": "2015-04-17T12:28:27Z",
      "side": 1,
      "message": "Ah, missed the arp cache reference.",
      "parentUuid": "1a106d94_24438215",
      "range": {
        "startLine": 107,
        "startChar": 17,
        "endLine": 107,
        "endChar": 20
      },
      "revId": "ee4fc51c43c9f942100ab5c4d6d28116ff9ebcbc",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "1a106d94_9819007c",
        "filename": "midolman/src/main/scala/org/midonet/midolman/state/ArpRequestBroker.scala",
        "patchSetId": 2
      },
      "lineNbr": 145,
      "author": {
        "id": 1002754
      },
      "writtenOn": "2015-04-15T14:27:59Z",
      "side": 1,
      "message": "a.nextTry.compareTo(b.nextTry)?",
      "revId": "ee4fc51c43c9f942100ab5c4d6d28116ff9ebcbc",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "1a106d94_581ca813",
        "filename": "midolman/src/main/scala/org/midonet/midolman/state/ArpRequestBroker.scala",
        "patchSetId": 2
      },
      "lineNbr": 145,
      "author": {
        "id": 1002763
      },
      "writtenOn": "2015-04-15T15:07:56Z",
      "side": 1,
      "message": ":)",
      "parentUuid": "1a106d94_9819007c",
      "revId": "ee4fc51c43c9f942100ab5c4d6d28116ff9ebcbc",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "1a106d94_9830e0e9",
        "filename": "midolman/src/main/scala/org/midonet/midolman/state/ArpRequestBroker.scala",
        "patchSetId": 2
      },
      "lineNbr": 186,
      "author": {
        "id": 1002754
      },
      "writtenOn": "2015-04-15T14:27:59Z",
      "side": 1,
      "message": "MpscArrayQueue, right?",
      "revId": "ee4fc51c43c9f942100ab5c4d6d28116ff9ebcbc",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "1a106d94_38df2c3d",
        "filename": "midolman/src/main/scala/org/midonet/midolman/state/ArpRequestBroker.scala",
        "patchSetId": 2
      },
      "lineNbr": 186,
      "author": {
        "id": 1002763
      },
      "writtenOn": "2015-04-15T15:07:56Z",
      "side": 1,
      "message": "why M, it would be S.\n\nBut, what size? i didn\u0027t want to cap it for something so such low volume.",
      "parentUuid": "1a106d94_9830e0e9",
      "revId": "ee4fc51c43c9f942100ab5c4d6d28116ff9ebcbc",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "1a106d94_1887d010",
        "filename": "midolman/src/main/scala/org/midonet/midolman/state/ArpRequestBroker.scala",
        "patchSetId": 2
      },
      "lineNbr": 186,
      "author": {
        "id": 1002754
      },
      "writtenOn": "2015-04-15T15:23:52Z",
      "side": 1,
      "message": "Ah, there are unbounded SPSC queues in the package.",
      "parentUuid": "1a106d94_38df2c3d",
      "revId": "ee4fc51c43c9f942100ab5c4d6d28116ff9ebcbc",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "1a106d94_04464623",
        "filename": "midolman/src/main/scala/org/midonet/midolman/state/ArpRequestBroker.scala",
        "patchSetId": 2
      },
      "lineNbr": 186,
      "author": {
        "id": 1002763
      },
      "writtenOn": "2015-04-17T10:17:28Z",
      "side": 1,
      "message": "will change.",
      "parentUuid": "1a106d94_1887d010",
      "revId": "ee4fc51c43c9f942100ab5c4d6d28116ff9ebcbc",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "1a106d94_8c21c24f",
        "filename": "midolman/src/main/scala/org/midonet/midolman/state/ArpRequestBroker.scala",
        "patchSetId": 2
      },
      "lineNbr": 194,
      "author": {
        "id": 1003555
      },
      "writtenOn": "2015-04-16T08:17:18Z",
      "side": 1,
      "message": "macDiscovered is filled as a result of a notification from the ArpCache which occurs when the replicationmap updates it\u0027s contents after a ChildrenChanged event from zookeeper. This means, that an arp response has to wait for a zookeeper write (including an fsync) before being given to the requester. This seems like a very long time given that the arp response should come back in well under a millisecond.",
      "range": {
        "startLine": 194,
        "startChar": 12,
        "endLine": 194,
        "endChar": 26
      },
      "revId": "ee4fc51c43c9f942100ab5c4d6d28116ff9ebcbc",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "1a106d94_045da6e9",
        "filename": "midolman/src/main/scala/org/midonet/midolman/state/ArpRequestBroker.scala",
        "patchSetId": 2
      },
      "lineNbr": 194,
      "author": {
        "id": 1002763
      },
      "writtenOn": "2015-04-17T10:17:28Z",
      "side": 1,
      "message": "Totally right.  This a limitation of the current replicated map.\n\nI did think about adding a cache to this class filled by set() and cleared by processDiscoveredMacs(). But didn\u0027t get around to it. Mixed feelings between added complexity and benefit. Opinions welcome.",
      "parentUuid": "1a106d94_8c21c24f",
      "range": {
        "startLine": 194,
        "startChar": 12,
        "endLine": 194,
        "endChar": 26
      },
      "revId": "ee4fc51c43c9f942100ab5c4d6d28116ff9ebcbc",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "1a106d94_a47812f3",
        "filename": "midolman/src/main/scala/org/midonet/midolman/state/ArpRequestBroker.scala",
        "patchSetId": 2
      },
      "lineNbr": 194,
      "author": {
        "id": 1003555
      },
      "writtenOn": "2015-04-17T12:28:27Z",
      "side": 1,
      "message": "since this is something that already exists, I wouldn\u0027t change it. I guess this will change when the device tables are moved out to cass.",
      "parentUuid": "1a106d94_045da6e9",
      "range": {
        "startLine": 194,
        "startChar": 12,
        "endLine": 194,
        "endChar": 26
      },
      "revId": "ee4fc51c43c9f942100ab5c4d6d28116ff9ebcbc",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "1a106d94_447208e6",
        "filename": "midolman/src/main/scala/org/midonet/midolman/state/ArpRequestBroker.scala",
        "patchSetId": 2
      },
      "lineNbr": 200,
      "author": {
        "id": 1002754
      },
      "writtenOn": "2015-04-15T14:27:59Z",
      "side": 1,
      "message": "Do we really need both expiration and staleness as two distinct things?",
      "revId": "ee4fc51c43c9f942100ab5c4d6d28116ff9ebcbc",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "1a106d94_18e23003",
        "filename": "midolman/src/main/scala/org/midonet/midolman/state/ArpRequestBroker.scala",
        "patchSetId": 2
      },
      "lineNbr": 200,
      "author": {
        "id": 1002763
      },
      "writtenOn": "2015-04-15T15:07:56Z",
      "side": 1,
      "message": "Yes.",
      "parentUuid": "1a106d94_447208e6",
      "revId": "ee4fc51c43c9f942100ab5c4d6d28116ff9ebcbc",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "1a106d94_182510ab",
        "filename": "midolman/src/main/scala/org/midonet/midolman/state/ArpRequestBroker.scala",
        "patchSetId": 2
      },
      "lineNbr": 373,
      "author": {
        "id": 1002754
      },
      "writtenOn": "2015-04-15T14:27:59Z",
      "side": 1,
      "message": "I wouldn\u0027t retry explicitly, but would instead let new packets drive the retries.",
      "revId": "ee4fc51c43c9f942100ab5c4d6d28116ff9ebcbc",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "1a106d94_58e30805",
        "filename": "midolman/src/main/scala/org/midonet/midolman/state/ArpRequestBroker.scala",
        "patchSetId": 2
      },
      "lineNbr": 373,
      "author": {
        "id": 1002763
      },
      "writtenOn": "2015-04-15T15:07:56Z",
      "side": 1,
      "message": "mmm. Fair point, but:\n\nwhile it complicates the retry timing logic a bit, it doesn\u0027t provide anything. For a lowly wanted entry, we just emit about 4 or 5 extra ARPs. For a highly sought after entry, we\u0027ll still emit all of the requests.",
      "parentUuid": "1a106d94_182510ab",
      "revId": "ee4fc51c43c9f942100ab5c4d6d28116ff9ebcbc",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "1a106d94_d8a538b6",
        "filename": "midolman/src/main/scala/org/midonet/midolman/state/ArpRequestBroker.scala",
        "patchSetId": 2
      },
      "lineNbr": 373,
      "author": {
        "id": 1002754
      },
      "writtenOn": "2015-04-15T15:23:52Z",
      "side": 1,
      "message": "i\u0027m missing something. aren\u0027t the approaches equivalent? instead of explicitly triggering a new arp request you should break the promises and wait until a new packets drives the request request.",
      "parentUuid": "1a106d94_58e30805",
      "revId": "ee4fc51c43c9f942100ab5c4d6d28116ff9ebcbc",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    }
  ]
}
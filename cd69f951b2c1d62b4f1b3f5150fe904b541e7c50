{
  "comments": [
    {
      "key": {
        "uuid": "3a961159_8c71077a",
        "filename": "midonet-cluster/src/main/scala/org/midonet/cluster/services/containers/schedulers/ContainerScheduler.scala",
        "patchSetId": 2
      },
      "lineNbr": 64,
      "author": {
        "id": 1003555
      },
      "writtenOn": "2015-12-27T22:03:48Z",
      "side": 1,
      "message": "Could you rename these to DownState, UpState and ScheduledState to make the distinction between them and the events clearer.",
      "range": {
        "startLine": 64,
        "startChar": 16,
        "endLine": 64,
        "endChar": 20
      },
      "revId": "cd69f951b2c1d62b4f1b3f5150fe904b541e7c50",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "3a961159_ac08832e",
        "filename": "midonet-cluster/src/main/scala/org/midonet/cluster/services/containers/schedulers/ContainerScheduler.scala",
        "patchSetId": 2
      },
      "lineNbr": 64,
      "author": {
        "id": 1002751
      },
      "writtenOn": "2015-12-28T12:11:00Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "3a961159_8c71077a",
      "range": {
        "startLine": 64,
        "startChar": 16,
        "endLine": 64,
        "endChar": 20
      },
      "revId": "cd69f951b2c1d62b4f1b3f5150fe904b541e7c50",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9aa7fdbe_44636cb1",
        "filename": "midonet-cluster/src/main/scala/org/midonet/cluster/services/containers/schedulers/ContainerScheduler.scala",
        "patchSetId": 2
      },
      "lineNbr": 205,
      "author": {
        "id": 1003555
      },
      "writtenOn": "2015-12-24T15:39:37Z",
      "side": 1,
      "message": "while ultimately i think this observable will run on context.scheduler, its not immediately clear from the code, as it is with the rest.\nI\u0027d change this to feedbackSubject.observeOn(context.scheduler) just to be clear.",
      "range": {
        "startLine": 205,
        "startChar": 12,
        "endLine": 205,
        "endChar": 27
      },
      "revId": "cd69f951b2c1d62b4f1b3f5150fe904b541e7c50",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9aa7fdbe_b87b5828",
        "filename": "midonet-cluster/src/main/scala/org/midonet/cluster/services/containers/schedulers/ContainerScheduler.scala",
        "patchSetId": 2
      },
      "lineNbr": 205,
      "author": {
        "id": 1002751
      },
      "writtenOn": "2015-12-26T00:13:48Z",
      "side": 1,
      "message": "Good catch.\n\nActually, this was maybe the only subject for which I missed to schedule the notifications on the context thread (see below line 225 - notifications arriving from storage need observeOn). And also it might need an additional observerOn because behavior subjects - if primed with a value - deliver their initial notification on the subscription thread.\n\nMaybe in the light of these would be good to add a thread assertion.",
      "parentUuid": "9aa7fdbe_44636cb1",
      "range": {
        "startLine": 205,
        "startChar": 12,
        "endLine": 205,
        "endChar": 27
      },
      "revId": "cd69f951b2c1d62b4f1b3f5150fe904b541e7c50",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9aa7fdbe_f8f16096",
        "filename": "midonet-cluster/src/main/scala/org/midonet/cluster/services/containers/schedulers/ContainerScheduler.scala",
        "patchSetId": 2
      },
      "lineNbr": 205,
      "author": {
        "id": 1003555
      },
      "writtenOn": "2015-12-26T12:41:21Z",
      "side": 1,
      "message": "a thread assertion sounds good.",
      "parentUuid": "9aa7fdbe_b87b5828",
      "range": {
        "startLine": 205,
        "startChar": 12,
        "endLine": 205,
        "endChar": 27
      },
      "revId": "cd69f951b2c1d62b4f1b3f5150fe904b541e7c50",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9aa7fdbe_045244dd",
        "filename": "midonet-cluster/src/main/scala/org/midonet/cluster/services/containers/schedulers/ContainerScheduler.scala",
        "patchSetId": 2
      },
      "lineNbr": 315,
      "author": {
        "id": 1003555
      },
      "writtenOn": "2015-12-24T15:39:37Z",
      "side": 1,
      "message": "use Observable[Option[Port]] rather than just Observable[Port]. with the latter is is not obvious that a null can be emitted.",
      "range": {
        "startLine": 315,
        "startChar": 57,
        "endLine": 315,
        "endChar": 61
      },
      "revId": "cd69f951b2c1d62b4f1b3f5150fe904b541e7c50",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9aa7fdbe_9887740f",
        "filename": "midonet-cluster/src/main/scala/org/midonet/cluster/services/containers/schedulers/ContainerScheduler.scala",
        "patchSetId": 2
      },
      "lineNbr": 315,
      "author": {
        "id": 1002751
      },
      "writtenOn": "2015-12-26T00:13:48Z",
      "side": 1,
      "message": "Changed. I agree it\u0027s not obvious: however many times I get reviews saying that Option generate additional garbage.",
      "parentUuid": "9aa7fdbe_045244dd",
      "range": {
        "startLine": 315,
        "startChar": 57,
        "endLine": 315,
        "endChar": 61
      },
      "revId": "cd69f951b2c1d62b4f1b3f5150fe904b541e7c50",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9aa7fdbe_18ef04b2",
        "filename": "midonet-cluster/src/main/scala/org/midonet/cluster/services/containers/schedulers/ContainerScheduler.scala",
        "patchSetId": 2
      },
      "lineNbr": 315,
      "author": {
        "id": 1003555
      },
      "writtenOn": "2015-12-26T12:41:21Z",
      "side": 1,
      "message": "Gc shouldn\u0027t be a concern here. We only really care about garbage in the fast path. For the frequency that this code path will be accessed, the GC overhead is unimportant. The Option will only ever live in the young generation too.",
      "parentUuid": "9aa7fdbe_9887740f",
      "range": {
        "startLine": 315,
        "startChar": 57,
        "endLine": 315,
        "endChar": 61
      },
      "revId": "cd69f951b2c1d62b4f1b3f5150fe904b541e7c50",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9aa7fdbe_841474f6",
        "filename": "midonet-cluster/src/main/scala/org/midonet/cluster/services/containers/schedulers/ContainerScheduler.scala",
        "patchSetId": 2
      },
      "lineNbr": 354,
      "author": {
        "id": 1003555
      },
      "writtenOn": "2015-12-24T15:39:37Z",
      "side": 1,
      "message": "This is all to simulate having a non-reentrant lock around schedule? Isn\u0027t this what Observable#serialize is for?",
      "range": {
        "startLine": 354,
        "startChar": 0,
        "endLine": 354,
        "endChar": 70
      },
      "revId": "cd69f951b2c1d62b4f1b3f5150fe904b541e7c50",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9aa7fdbe_7882d001",
        "filename": "midonet-cluster/src/main/scala/org/midonet/cluster/services/containers/schedulers/ContainerScheduler.scala",
        "patchSetId": 2
      },
      "lineNbr": 354,
      "author": {
        "id": 1002751
      },
      "writtenOn": "2015-12-26T00:13:48Z",
      "side": 1,
      "message": "Removed.\n\nActually, I didn\u0027t realize that I have already solved this problem in a different way.\n\nThe problem here was not ensuring thread-safety between notifications, but rather the order of notification, for the updates that we emit in the `schedule` method (i.e. where we update the current host namespace). I wasn\u0027t sure how to use serialize here: ideally the combinelatest operator would have included a serialized observer inside it.\n\nThe patch already included the solution, which was to add a CurrentHostEvent in the output observable, which would be filtered and interpreted as changing the current host namespace, without injecting additional notifications during the combiner `schedule` method, which now doesn\u0027t perform any onNext for an observable that goes back as input to combine latest (one onNext call was removed because it was redundant).",
      "parentUuid": "9aa7fdbe_841474f6",
      "range": {
        "startLine": 354,
        "startChar": 0,
        "endLine": 354,
        "endChar": 70
      },
      "revId": "cd69f951b2c1d62b4f1b3f5150fe904b541e7c50",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9aa7fdbe_382be8ec",
        "filename": "midonet-cluster/src/main/scala/org/midonet/cluster/services/containers/schedulers/ContainerScheduler.scala",
        "patchSetId": 2
      },
      "lineNbr": 354,
      "author": {
        "id": 1003555
      },
      "writtenOn": "2015-12-26T12:41:21Z",
      "side": 1,
      "message": "ok",
      "parentUuid": "9aa7fdbe_7882d001",
      "range": {
        "startLine": 354,
        "startChar": 0,
        "endLine": 354,
        "endChar": 70
      },
      "revId": "cd69f951b2c1d62b4f1b3f5150fe904b541e7c50",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "3a961159_6c5dbbe9",
        "filename": "midonet-cluster/src/main/scala/org/midonet/cluster/services/containers/schedulers/ContainerScheduler.scala",
        "patchSetId": 2
      },
      "lineNbr": 354,
      "author": {
        "id": 1003555
      },
      "writtenOn": "2015-12-27T22:03:48Z",
      "side": 1,
      "message": "Actually, this CurrentHostEvent thing is weird. You\u0027re using a notification for control, and this is confusing.\n\nThe problem as I understand it, is that you don\u0027t want to call namespaceSubject onNext from schedule, because that could cause a cascade of actions that could eventually make another call to schedule, while there is still call call to schedule ongoing further up in the call stack. \n\nI agree that serialize with combine latest is onclear. Perhaps you could create a ScheduleContext(Boolean, Port,  HostsEvent, ServiceContainerGroup, ServiceContainer) type, which is emitted from schedule. Then you could have \ncombineLatest(a, b, c, d, buildContext).serialize().map(schedule) and CurrentHostEvent would not be needed.\n\nIs there a test case that triggers the problematic behaviour? I tried moving the onNext back into schedule and nothing failed.",
      "parentUuid": "9aa7fdbe_382be8ec",
      "range": {
        "startLine": 354,
        "startChar": 0,
        "endLine": 354,
        "endChar": 70
      },
      "revId": "cd69f951b2c1d62b4f1b3f5150fe904b541e7c50",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "3a961159_ac6ec394",
        "filename": "midonet-cluster/src/main/scala/org/midonet/cluster/services/containers/schedulers/ContainerScheduler.scala",
        "patchSetId": 2
      },
      "lineNbr": 354,
      "author": {
        "id": 1003555
      },
      "writtenOn": "2015-12-27T22:03:48Z",
      "side": 1,
      "message": "retry and group are unused. I assume this is only because they are used trigger the action. \n\nAs such, you only need Port, HostsEvent and ServiceContainer in the ScheduleContext I mentioned above.",
      "range": {
        "startLine": 354,
        "startChar": 24,
        "endLine": 354,
        "endChar": 29
      },
      "revId": "cd69f951b2c1d62b4f1b3f5150fe904b541e7c50",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "3a961159_cfc30137",
        "filename": "midonet-cluster/src/main/scala/org/midonet/cluster/services/containers/schedulers/ContainerScheduler.scala",
        "patchSetId": 2
      },
      "lineNbr": 354,
      "author": {
        "id": 1002751
      },
      "writtenOn": "2015-12-28T12:11:00Z",
      "side": 1,
      "message": "I added the onNext back to schedule, so the ScheduleContext is no longer needed.",
      "parentUuid": "3a961159_ac6ec394",
      "range": {
        "startLine": 354,
        "startChar": 24,
        "endLine": 354,
        "endChar": 29
      },
      "revId": "cd69f951b2c1d62b4f1b3f5150fe904b541e7c50",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "3a961159_4fb0f1dd",
        "filename": "midonet-cluster/src/main/scala/org/midonet/cluster/services/containers/schedulers/ContainerScheduler.scala",
        "patchSetId": 2
      },
      "lineNbr": 354,
      "author": {
        "id": 1002751
      },
      "writtenOn": "2015-12-28T12:11:00Z",
      "side": 1,
      "message": "You\u0027re right. Previously there were some test failures because of this. I speculate that some of the changes to the how the state transitions are handled covered the corned case that triggered this issue.",
      "parentUuid": "3a961159_6c5dbbe9",
      "range": {
        "startLine": 354,
        "startChar": 0,
        "endLine": 354,
        "endChar": 70
      },
      "revId": "cd69f951b2c1d62b4f1b3f5150fe904b541e7c50",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    }
  ]
}
/*
 * Copyright 2014 Midokura SARL
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

apply plugin: 'scala'
apply plugin: 'application'
apply from: "${rootProject.projectDir}/fpm.gradle"
apply from: "${rootProject.projectDir}/git.gradle"

jar {
    manifest {
        attributes 'Implementation-Title': 'Midolman Java daemon',
                   'Implementation-Version': version
    }
}

sourceSets {
    main {
        scala { srcDirs = ['src/main/scala', 'src/main/java'] }
        java { srcDirs = [] }
    }
    test {
        scala { srcDirs = ['src/test/scala', 'src/test/java'] }
        java { srcDirs = [] }
    }
    perf {
        scala { srcDirs = ['src/perf/scala', 'src/perf/java'] }
        java { srcDirs = [] }
    }
}

dependencies {
    runtime project(':midonet-jdk-bootstrap')
    compile project(':midonet-util'), project(':netlink'),
            project(':odp'), project(':cluster'), project(':rpc')

    compile libraries.scala, libraries.akka, libraries.hamcrest, libraries.jna,
            libraries.commons_lang, libraries.commons_lang3,
            libraries.commons_conf, libraries.commons_cli, libraries.commons_io,
            libraries.guava, libraries.guice, libraries.metrics, libraries.rx,
            libraries.jetty, libraries.jackson_scala, libraries.cassandra,
            libraries.zookeeper, libraries.jetty_server,
            libraries.jetty_websocket, libraries.jetty_deploy, libraries.jminix,
            libraries.jsonpath, libraries.curator_recipes,
            libraries.scala_logging, libraries.scala_async, libraries.scallop,
            libraries.protobuf

    testCompile libraries.akkatest, libraries.scalatest,
                libraries.jsonpath_assert, libraries.cassandraunit,
                libraries.curator_test, libraries.mockit
}

cobertura {
    coverageSourceDirs << sourceSets.main.java.srcDirs
    coverageSourceDirs << sourceSets.main.scala.srcDirs

    coverageExcludes = [
        '.*org.midonet.midolman.io.*Test.*',
        '.*org.midonet.midolman.tools.*',
        '.*org.midonet.midolman.Midolman',
        '.*FlowController$Wildcard.*',
        '.*FlowController$Wildcard.*',
        '.*FlowController$Add.*',
        '.*FlowController$Remove.*',
        '.*FlowController$Invalidate.*',
        '.*FlowController$FlowAdded.*',
        '.*FlowController$Internal$.*',

        '.*DatapathController$DpPort.*',
        '.*DatapathController$Init.*',
        '.*DatapathController$Datapath.*',
        '.*DatapathController$Internal$.*',

        '.*DeduplicationActor$ApplyFlow.*',
        '.*DeduplicationActor$.*Packet.*',
        '.*DeduplicationActor$_.*',

        '.*PacketWorkflow$PacketIn.*',
        '.*PacketWorkflow$SendPacket.*',
        '.*PacketWorkflow$AddVirtual.*',

        '.*Coordinator$ToPort.*',
        '.*Coordinator$DoFlowAction.*',
        '.*Coordinator$ForkAction.*',
        '.*VirtualActions$.*',

        '.*VxLanPortMapper$Internal$.*'
    ]
}

task preparePkg(type: Copy, dependsOn: installApp) {
    from("${buildDir}/install/${project.name}") {
        include "**/*"
        exclude "bin"
        into "usr/share/midolman"
    }
    from("CHANGE-LOG.txt") {
        into "usr/share/doc/midolman/"
    }
    from("src/deb/init/midolman.conf") {
        into "etc/init"
    }
    from("conf") {
        into "etc/midolman"
    }
    from("src/deb/quagga/bgpd.conf") {
        into "etc/quagga"
    }
    from("src/deb/bin/mm-dpctl") {
        into "usr/bin"
    }
    from("src/deb/bin/mm-trace") {
        into "usr/bin"
    }
    from("src/deb/bin/mm-meter") {
        into "usr/bin"
    }
    from("src/deb/bin/mm-ctl") {
        into "usr/bin"
    }
    from("src/deb/bin/mm-tests") {
        into "usr/bin"
    }
    from("src/deb/bin/mm-stat") {
        into "usr/bin"
    }
    from("src/deb/init/midolman-prepare") {
        into "usr/share/midolman"
    }
    from("src/deb/init/midolman-start") {
        into "usr/share/midolman"
    }
    from("src/deb/init/midolman-env.sh") {
        into "usr/share/midolman"
    }
    into "${pkgDestDir}"

    doLast {
        new File("${pkgDestDir}/usr/share/midolman/lib/${project.name}-${midonetVersion}.jar").
                renameTo("${pkgDestDir}/usr/share/midolman/${project.name}-${midonetVersion}.jar")
        new File("${pkgDestDir}/usr/share/midolman/lib").
                renameTo("${pkgDestDir}/usr/share/midolman/dep")
    }
}

task rhel7Prepare(type: Copy, dependsOn: installApp) {
    from("src/rhel7/systemd/midolman.service") {
        into "usr/lib/systemd/system"
    }
    into "${pkgDestDir}"
}

task rhel6Prepare(type: Copy, dependsOn: installApp) {
    from("src/rhel6/init.d/midolman") {
        into "etc/init.d"
    }
    into "${pkgDestDir}"
}

packaging {
    version = project.debVersion
    maintainer = project.maintainer
    vendor = project.vendor
    url = project.url
    description = 'Midolman is a virtual network controller'
    dependencies = [ 'bridge-utils', 'haproxy']
    confFiles = ['/etc/midolman/midolman-akka.conf',
                 '/etc/midolman/midolman-akka.conf.compute',
                 '/etc/midolman/midolman-akka.conf.gateway',
                 '/etc/midolman/midolman-env.sh',
                 '/etc/midolman/midolman-env.sh.compute',
                 '/etc/midolman/midolman-env.sh.gateway',
                 '/etc/midolman/midolman.conf',
                 '/etc/midolman/midolman.conf.compute',
                 '/etc/midolman/midolman.conf.gateway',
                 '/etc/midolman/logback.xml' ]
    fpmOpts = ['-a', 'all',
               '--category', 'network',
               '--url', 'http://midokura.com',
               '--epoch', '0']
}

preparePkg.dependsOn cleanPkg
debian.dependsOn preparePkg

if (project.rhelTarget == "7") {
    rpm.dependsOn rhel7Prepare
    rhel7Prepare.dependsOn preparePkg
} else {
    rpm.dependsOn rhel6Prepare
    rhel6Prepare.dependsOn preparePkg
}

debian.doFirst {
    project.packaging.version = project.debVersion
    project.packaging.fpmOpts = project.packaging.fpmOpts.clone()
    project.packaging.fpmOpts.addAll([
        '-d', 'quagga (>= 0.99.21)',
        '-d', 'java7-runtime-headless',
        '-d', 'iproute (>= 20111117-1ubuntu2.1)',
        '-d', 'openvswitch-datapath-dkms (>= 1.10) | linux-image-generic (>= 3.13.0) | linux-image-virtual (>= 3.13.0)',
        '--conflicts', 'openvswitch-switch',
        '--conflicts', 'openvswitch-datapath-source (>= 1.11)',
        '--conflicts', 'openvswitch-datapath-dkms (>= 1.11)',
        '--deb-recommends', 'java7-runtime-headless | java7-runtime',
        '--after-install', "${project.projectDir}/src/deb/control/postinst",
        '--before-install', "${project.projectDir}/src/deb/control/preinst",
        '--after-remove', "${project.projectDir}/src/deb/control/postrm",
        '--before-remove', "${project.projectDir}/src/deb/control/prerm" ])
}

rpm.doFirst {
    project.packaging.version = project.rpmVersion
    project.packaging.iteration = project.rpmRelease
    project.packaging.fpmOpts = project.packaging.fpmOpts.clone()
    project.packaging.fpmOpts.addAll([
        '-d', 'quagga >= 0.99.21',
        '-d', 'iproute',
        '--after-install', "${project.projectDir}/src/rhel6/control/postinst"])
    if (project.rhelTarget == "7") {
        project.packaging.fpmOpts.addAll([
            '--after-install', "${project.projectDir}/src/rhel7/control/postinst",
            '--before-install', "${project.projectDir}/src/rhel7/control/preinst",
            '--after-remove', "${project.projectDir}/src/rhel7/control/postrm",
            '--before-remove', "${project.projectDir}/src/rhel7/control/prerm",
            '--depends', 'java'])
    } else {
        project.packaging.fpmOpts.addAll([
            '--after-install', "${project.projectDir}/src/rhel6/control/postinst",
            '--before-install', "${project.projectDir}/src/rhel6/control/preinst",
            '--before-remove', "${project.projectDir}/src/rhel6/control/prerm",
            '--depends', 'java7'])
    }
}

debian.doLast {
    new File("${buildDir}/install/${project.name}").deleteDir()
}
rpm.doLast {
    new File("${buildDir}/install/${project.name}").deleteDir()
}

mainClassName = "org.midonet.midolman.Midolman"

task runWithSudo(type:Exec, dependsOn: installApp) {
    commandLine 'sudo', 'java', '-Djava.library.path=/lib:/usr/lib'
    commandLine += '-Xbootclasspath:' + file(project.jdkBootstrap)
    commandLine += '-cp'
    commandLine += sourceSets.main.runtimeClasspath.collect{ it.toString() }.join(':')
    commandLine += mainClassName
}

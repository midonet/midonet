/*
 * Copyright 2014 Midokura SARL
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

apply plugin: 'scala'
apply plugin: 'application'
apply from: "${rootProject.projectDir}/fpm.gradle"
apply from: "${rootProject.projectDir}/git.gradle"

jar {
    manifest {
        attributes 'Implementation-Title': 'Midolman Java daemon',
                   'Implementation-Version': version
    }
}

sourceSets {
    main {
        scala { srcDirs = ['src/main/scala', 'src/main/java'] }
        java { srcDirs = [] }
    }
    test {
        scala { srcDirs = ['src/test/scala', 'src/test/java'] }
        java { srcDirs = [] }
    }
    perf {
        scala { srcDirs = ['src/perf/scala', 'src/perf/java'] }
        java { srcDirs = [] }
    }
    integration {
        scala { srcDirs = ['src/integration/scala', 'src/integration/java'] }
        java { srcDirs = [] }
    }
}

dependencies {
    compile project(':midonet-util'), project(':netlink'), project(':nsdb')

    compile libraries.scala,
            libraries.akka,
            libraries.commons_lang3,
            libraries.commons_lang,
            libraries.commons_cli,
            libraries.commons_codec,
            libraries.guava,
            libraries.guice,
            libraries.metrics,
            libraries.rx,
            libraries.logback,
            libraries.logback_logstash,
            libraries.zookeeper,
            libraries.curator_recipes,
            libraries.scala_logging,
            libraries.scallop,
            libraries.protobuf,
            libraries.disruptor,
            libraries.curator_test,
            libraries.jersey_client,
            libraries.jetty_server,
            "com.fasterxml.jackson.core:jackson-databind:2.3.0"

    testCompile project(':midonet-cluster')
    testCompile project(path: ':nsdb', configuration: 'tests')
    testCompile project(path: ':midonet-util', configuration: 'tests')
    testCompile libraries.akkatest, libraries.scalatest,
                libraries.jsonpath_assert, libraries.cassandraunit,
                libraries.curator_test, libraries.mockit,
                libraries.test_frameworks, libraries.jsonpath
}

cobertura {
    coverageExcludes = [
        '.*org.midonet.cluster.client.*',
        '.*org.midonet.cluster.data.*',
        '.*org.midonet.cluster.Cluster.*',
        '.*org.midonet.cluster.zookeeper.*',
        '.*org.midonet.midolman.state.zkManagers.*',
        '.*org.midonet.midolman.io.*Test.*',
        '.*org.midonet.midolman.tools.*',
        '.*org.midonet.midolman.Midolman',
        '.*FlowController$Wildcard.*',
        '.*FlowController$Wildcard.*',
        '.*FlowController$Add.*',
        '.*FlowController$Remove.*',
        '.*FlowController$Invalidate.*',
        '.*FlowController$FlowAdded.*',
        '.*FlowController$Internal$.*',

        '.*DatapathController$DpPort.*',
        '.*DatapathController$Init.*',
        '.*DatapathController$Datapath.*',
        '.*DatapathController$Internal$.*',

        '.*DeduplicationActor$ApplyFlow.*',
        '.*DeduplicationActor$.*Packet.*',
        '.*DeduplicationActor$_.*',

        '.*PacketWorkflow$PacketIn.*',
        '.*PacketWorkflow$SendPacket.*',
        '.*PacketWorkflow$AddVirtual.*',

        '.*Coordinator$ToPort.*',
        '.*Coordinator$ForkAction.*',
        '.*VirtualActions$.*',

        '.*VxLanPortMapper$Internal$.*'
    ]
}

// These three below allow exposing some test classes to other modules

configurations {
    tests.extendsFrom (testCompile)
}

task jarTest (type: Jar, dependsOn: testClasses) {
    from sourceSets.test.output
    classifier = 'test'
}

artifacts {
    tests jarTest
}

packageTypes.each { pkgName ->
    task "preparePkg_$pkgName"(type: Copy, dependsOn: installShadowApp) {
        from(
                "${buildDir}/installShadow/${project.name}/lib/${project.name}-${midonetVersion}-all.jar") {
            into "usr/share/midolman"
        }
        from("${buildDir}/man/") {
            include "*.*"
            into "usr/share/man/man1"
        }
        from("CHANGE-LOG.txt") {
            into "usr/share/doc/midolman/"
        }
        from("src/deb/init/midolman.conf") {
            into "etc/init"
        }
        from("conf") {
            into "etc/midolman"
        }
        from("src/deb/quagga/bgpd.conf") {
            into "etc/midolman/quagga"
        }
        from("src/deb/bin/wdog") {
            into "usr/bin"
        }
        from("src/deb/bin/mm-dpctl") {
            into "usr/bin"
        }
        from("src/deb/bin/mm-trace") {
            into "usr/bin"
        }
        from("src/deb/bin/mm-meter") {
            into "usr/bin"
        }
        from("src/deb/bin/mm-ctl") {
            into "usr/bin"
        }
        from("src/deb/bin/mm-tests") {
            into "usr/bin"
        }
        from("src/deb/bin/mm-stat") {
            into "usr/bin"
        }
        from("src/deb/bin/mn-conf") {
            into "usr/bin"
        }
        from("src/lib/midolman/bgpd-helper") {
            into "usr/lib/midolman"
        }
        from("src/deb/init/midolman-prepare") {
            into "usr/share/midolman"
        }
        from("src/deb/init/midolman-start") {
            into "usr/share/midolman"
        }
        from("src/deb/init/prepare-java") {
            into "usr/share/midolman"
        }
        into "${pkgDestDir}"
        doLast {
            new File(
                    "${pkgDestDir}/usr/share/midolman/${project.name}-${midonetVersion}-all.jar").
                    renameTo(
                            "${pkgDestDir}/usr/share/midolman/${project.name}.jar")
        }
    }
}

task debianPrepare(type: Copy, dependsOn: installShadowApp) {
    from("src/systemd/midolman.service") {
        into "lib/systemd/system"
    }
    into "${pkgDestDir}"
}

task rhel7Prepare(type: Copy, dependsOn: installShadowApp) {
    from("src/systemd/midolman.service") {
        into "usr/lib/systemd/system"
    }
    into "${pkgDestDir}"
}

packageTypes.each { pkgName ->
    task "pf9PreparePkg_$pkgName"(type: Copy, dependsOn: installShadowApp) {
        from("pf9/midolman/config") {
            into "opt/pf9/midolman"
        }
        from("pf9/midolman/$pkgName/midolman") {
            into "etc/sudoers.d"
        }
        into "${pkgDestDir}"
    }

    // Disable the pf9prepare if not a pf9 build
    if (pf9build)
        tasks["pf9PreparePkg_${pkgName}"].enabled = true
    else
        tasks["pf9PreparePkg_${pkgName}"].enabled = false
}

packaging {
    version = project.debVersion
    maintainer = project.maintainer
    vendor = project.vendor
    url = project.url
    description = 'Midolman is a virtual network controller'
    dependencies = [ 'bridge-utils', 'haproxy', 'midonet-tools']
    confFiles = ['/etc/midolman/midolman-env.sh',
                 '/etc/midolman/midolman-env.sh.compute.large',
                 '/etc/midolman/midolman-env.sh.gateway.large',
                 '/etc/midolman/midolman.conf',
                 '/etc/midolman/logback.xml' ]
    fpmOpts_common = ['-a', 'all',
                      '--category', 'network',
                      '--url', 'http://midokura.com',
                      '--epoch', '2']
}

// Task dependencies
preparePkg_debian.dependsOn manpages

pf9PreparePkg_debian.dependsOn cleanPkg_debian
preparePkg_debian.dependsOn pf9PreparePkg_debian
debian.dependsOn preparePkg_debian

pf9PreparePkg_rpm.dependsOn cleanPkg_rpm
preparePkg_rpm.dependsOn pf9PreparePkg_rpm
rhel7Prepare.dependsOn preparePkg_rpm
rpm.dependsOn rhel7Prepare

preparePkg_tar.dependsOn cleanPkg_tar
tar.dependsOn preparePkg_tar

debian.doFirst {
    project.packaging.name = project.name
    project.packaging.version = project.debVersion
    project.packaging.fpmOpts = project.packaging.fpmOpts_common.clone()
    project.packaging.fpmOpts.addAll([
        '-d', 'python',
        '-d', 'python-setproctitle',
        '-d', 'quagga (>= 0.99.23)',
        '-d', 'openjdk-8-jdk-headless | java8-runtime-headless | java8-runtime',
        '-d', 'iproute (>= 20111117-1ubuntu2.1)',
        '-d', 'openvswitch-datapath-dkms (>= 1.10) | linux-image-generic (>= 3.13.0) | linux-image-virtual (>= 3.13.0) | linux-image-generic-lts-trusty (>= 3.13.0) | linux-image-virtual-lts-trusty (>= 3.13.0)',
        '--conflicts', 'openvswitch-switch',
        '--deb-recommends', 'java8-runtime-headless | java8-runtime',
        '--before-install', "${project.projectDir}/src/deb/control/preinst",
        '--after-remove', "${project.projectDir}/src/deb/control/postrm",
        '--before-remove', "${project.projectDir}/src/deb/control/prerm" ])

    if (pf9build) {
        project.packaging.fpmOpts.addAll([
                '--after-install', "${project.projectDir}/src/deb/control/pf9postinst",
                '-d', 'pf9-bbslave',
                '--provides', 'pf9app',
                '--deb-user', 'pf9',
                '--deb-group', 'pf9group'])
        project.packaging.iteration = "pf9"
    } else {
        project.packaging.fpmOpts.addAll([
                '--after-install', "${project.projectDir}/src/deb/control/postinst"])
    }
}

rpm.doFirst {
    project.packaging.name = project.name
    project.packaging.version = project.rpmVersion
    project.packaging.iteration = project.rpmRelease
    project.packaging.fpmOpts = project.packaging.fpmOpts_common.clone()
    project.packaging.fpmOpts.addAll([
        '-d', 'python',
        '-d', 'quagga >= 0.99.23',
        '-d', 'iproute'])
    if (project.rhelTarget == "el7") {
        project.packaging.fpmOpts.addAll([
            '--before-install', "${project.projectDir}/src/rhel7/control/preinst",
            '--after-remove', "${project.projectDir}/src/rhel7/control/postrm",
            '--before-remove', "${project.projectDir}/src/rhel7/control/prerm",
            '--depends', 'python-setproctitle',
            '--depends', 'java-1.8.0-openjdk-headless'])
    } else { // (project.rhelTarget == "sles12")
        project.packaging.fpmOpts.addAll([
            '--before-install', "${project.projectDir}/src/rhel7/control/preinst",
            '--after-remove', "${project.projectDir}/src/rhel7/control/postrm",
            '--before-remove', "${project.projectDir}/src/rhel7/control/prerm",
            '--depends', 'iproute2',
            '--depends', 'java >= 1.8.0'])
    }

    if (pf9build) {
        project.packaging.fpmOpts.addAll([
                '--after-install', "${project.projectDir}/src/rhel7/control/pf9postinst",
                '-d', 'pf9-bbslave',
                '--provides', 'pf9app',
                '--rpm-user', 'pf9',
                '--rpm-group', 'pf9group'])
        project.packaging.iteration = "${project.rpmRelease}.pf9"
    } else {
        project.packaging.fpmOpts.addAll([
                '--after-install', "${project.projectDir}/src/rhel7/control/postinst"])

    }
}

tar.doFirst {
    project.packaging.version = project.debVersion
    project.packaging.fpmOpts = project.packaging.fpmOpts_common.clone()
}

debian.doLast {
    new File("${buildDir}/install/${project.name}").deleteDir()
}

rpm.doLast {
    new File("${buildDir}/install/${project.name}").deleteDir()
}

tar.doLast {
    new File("${buildDir}/install/${project.name}").deleteDir()
}

// PF9 SPECIFICS
import org.apache.tools.ant.filters.ReplaceTokens

if (pf9build) {
    task pf9RepoDebPrepare(type: Copy) {
        from("pf9/mem_repo/config") {
            into "opt/pf9/mem_repo"
        }
        from("pf9/mem_repo/deb/mem_repo") {
            into "etc/sudoers.d"
        }
        from("pf9/mem_repo/deb/midokura_mem.list") {
            into "etc/sources.list.d/"
            filter(ReplaceTokens, tokens: ["username": project.pf9username,
                                           "password": project.pf9password])
        }
        into "${pkgDestDir}"
    }

    task pf9RepoRpmPrepare(type: Copy) {
        from("pf9/mem_repo/config") {
            into "opt/pf9/mem_repo"
        }
        from("pf9/mem_repo/rpm/mem_repo") {
            into "etc/sudoers.d"
        }
        from("pf9/mem_repo/rpm/midokura_mem.repo") {
            filter(ReplaceTokens, tokens: ["username": project.pf9username,
                                           "password": project.pf9password])
            into "etc/yum.repos.d/"
        }
        into "${pkgDestDir}"
    }

    task pf9wrapperPrepare(type: Copy) {
        from("pf9/midolman_wrapper/midolman-role.json") {
            filter(ReplaceTokens,
                   tokens: ["rpmVersion": project.rpmVersion.toString(),
                            "rpmRelease": project.rpmRelease.toString(),
                            "debVersion": project.debVersion.toString()])
            into "etc/pf9/resmgr_roles/midolman/${project.version}/"
        }
        from("${project.buildDir}/packages/") {
            into "opt/pf9/www/private/"
        }
        into "${pkgDestDir}"
    }

    pf9wrapper.dependsOn pf9wrapperPrepare
    pf9wrapper.dependsOn rpm
    pf9wrapper.dependsOn debian
    pf9wrapper.dependsOn mem_repo_debian
    pf9wrapper.dependsOn mem_repo_rpm

    pf9wrapperPrepare.mustRunAfter rpm
    pf9wrapperPrepare.mustRunAfter debian
    pf9wrapperPrepare.mustRunAfter mem_repo_debian
    pf9wrapperPrepare.mustRunAfter mem_repo_rpm
    pf9wrapperPrepare.dependsOn cleanPkg_pf9wrapper

    mem_repo_debian.dependsOn pf9RepoDebPrepare
    pf9RepoDebPrepare.dependsOn cleanPkg_mem_repo_debian

    mem_repo_rpm.dependsOn pf9RepoRpmPrepare
    pf9RepoRpmPrepare.dependsOn cleanPkg_mem_repo_rpm

    mem_repo_debian.doFirst {
        project.packaging.name = "mem_repo"
        project.packaging.version = project.debVersion
        project.packaging.iteration = "pf9"
        project.packaging.fpmOpts = project.packaging.fpmOpts_common.clone()
        project.packaging.fpmOpts.addAll([
                '--after-install', "${project.projectDir}/pf9/mem_repo/postinst",
                '-d', 'pf9-bbslave',
                '--provides', 'pf9app',
                '--deb-user', 'pf9',
                '--deb-group', 'pf9group'])
        project.packaging.description =
                'MEM repository for Platform9 integration'
        project.packaging.dependencies = []
        project.packaging.confFiles = []
    }

    mem_repo_rpm.doFirst {
        project.packaging.name = "mem_repo"
        project.packaging.version = project.rpmVersion
        project.packaging.iteration = "${project.rpmRelease}.pf9"
        project.packaging.fpmOpts = project.packaging.fpmOpts_common.clone()
        project.packaging.fpmOpts.addAll([
                '--after-install', "${project.projectDir}/pf9/mem_repo/postinst",
                '-d', 'pf9-bbslave',
                '--provides', 'pf9app',
                '--rpm-user', 'pf9',
                '--rpm-group', 'pf9group'])
        project.packaging.description =
                'MEM repository for Platform9 integration'
        project.packaging.dependencies = []
        project.packaging.confFiles = []
    }

    pf9wrapper.doFirst {
        project.packaging.name = "pf9-${project.name}-wrapper"
        project.packaging.fpmOpts = project.packaging.fpmOpts_common.clone()
        project.packaging.fpmOpts.addAll([
                '--rpm-user', 'pf9',
                '--rpm-group', 'pf9group'])
        project.packaging.description =
                'Midolman wrapper for Platform9 integration'
        project.packaging.dependencies = []
        project.packaging.confFiles = []
    }

    mem_repo_debian.doLast {
        new File("${buildDir}/install/${project.name}").deleteDir()
    }

    mem_repo_rpm.doLast {
        new File("${buildDir}/install/${project.name}").deleteDir()
    }

    pf9wrapper.doLast {
        new File("${buildDir}/install/${project.name}").deleteDir()
    }
}

// RUNNING AND TESTING ASKS
mainClassName = "org.midonet.midolman.Midolman"

task runWithSudo(type:Exec, dependsOn: installApp) {
    commandLine 'sudo', 'java', '-Djava.library.path=/lib:/usr/lib'
    commandLine += '-cp'
    commandLine += sourceSets.main.runtimeClasspath.collect{ it.toString() }.join(':')
    commandLine += mainClassName
}

// run cassandra tests in series. Otherwise they interfere with each other
task testCassandra(type:Test, dependsOn: testClasses) {
    include 'org/midonet/midolman/logging/FlowTracingAppenderTest.class',
            'org/midonet/midolman/logging/FlowTracingSchemaTest.class',
            'org/midonet/midolman/state/FlowStateStorageTest.class'
}

test {
    exclude 'org/midonet/midolman/logging/FlowTracingAppenderTest.class',
            'org/midonet/midolman/logging/FlowTracingSchemaTest.class',
            'org/midonet/midolman/state/FlowStateStorageTest.class'
}

task testReport(type: TestReport, dependsOn: test) {
    destinationDir = file("$buildDir/reports/tests")
    // Include the results from the `test` task in all subprojects
    if (!System.getProperties().containsKey('test.single')) {
         reportOn test, testCassandra
    }
}

test.finalizedBy(testReport)

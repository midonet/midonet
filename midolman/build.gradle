/*
 * Copyright 2014 Midokura SARL
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

apply plugin: 'scala'
apply plugin: 'application'
apply plugin: 'cpp'
apply plugin: 'google-test-test-suite'
apply from: "${rootProject.projectDir}/fpm.gradle"
apply from: "${rootProject.projectDir}/git.gradle"

import org.gradle.internal.jvm.Jvm

def JNI_INCLUDE_DIR = "${Jvm.current().getJavacExecutable().getParentFile().getParent()}/include"

// native C++ library (must  be at start of file)
model {
    repositories {
        libs(PrebuiltLibraries) {
            googleTest {
                headers.srcDir "${gtestHeaderDir}"
                binaries.withType(StaticLibraryBinary) {
                    if (targetPlatform.operatingSystem.linux) {
                        staticLibraryFile =
                                file("${gtestDir}/lib/linux-x86_64/libgtest.a")
                    }
                    if (targetPlatform.operatingSystem.macOsX) {
                        staticLibraryFile =
                                file("${gtestDir}/lib/osx-x86_64/libgtest.a")
                    }
                }
            }
            tbb {
                headers.srcDir "${tbbHeaderDir}"
                binaries.withType(SharedLibraryBinary) {
                    if (targetPlatform.operatingSystem.linux) {
                        sharedLibraryFile = file("${tbbDir}/linux-x86_64/libtbb.so.2")
                    }
                    if (targetPlatform.operatingSystem.macOsX) {
                        sharedLibraryFile = file("${tbbDir}/osx-x86_64/libtbb.dylib")
                    }
                }
            }
        }
    }
    components {
        nativeFlowController(NativeLibrarySpec) {
            baseName "nativeFlowController"
            sources {
                cpp {
                    source {
                        include "**/*.cpp"
                        include "**/*.h"
                    }
                }
            }
        }
        nativeMetering(NativeLibrarySpec) {
            baseName "nativeMetering"
            sources {
                cpp {
                    source {
                        include "**/*.cpp"
                        include "**/*.h"
                    }
                }
            }
        }
        nativeFlowMatchList(NativeLibrarySpec) {
            baseName "nativeFlowMatchList"
            sources {
                cpp {
                    source {
                        include "**/*.cpp"
                        include "**/*.h"
                    }
                }
            }
        }
    }
    testSuites {
        nativeFlowControllerTest(GoogleTestTestSuiteSpec) {
            testing $.components.nativeFlowController
            sources {
                cpp {
                    source {
                        include "**/*.cpp"
                        include "**/*.h"
                    }
                }
            }
        }
        nativeMeteringTest(GoogleTestTestSuiteSpec) {
            testing $.components.nativeMetering
            sources {
                cpp {
                    source {
                        include "**/*.cpp"
                        include "**/*.h"
                    }
                }
            }
        }
        nativeFlowMatchListTest(GoogleTestTestSuiteSpec) {
            testing $.components.nativeFlowMatchList
            sources {
                cpp {
                    source {
                        include "**/*.cpp"
                        include "**/*.h"
                    }
                }
            }
        }
    }
    tasks.test {
        dependsOn nativeFlowControllerSharedLibrary
        dependsOn nativeMeteringSharedLibrary
        dependsOn nativeFlowMatchListSharedLibrary
        dependsOn runNativeFlowControllerTestGoogleTestExe
        dependsOn runNativeMeteringTestGoogleTestExe
        dependsOn runNativeFlowMatchListTestGoogleTestExe

        def libPaths = "${nativeLibraryDir}:${project(':midonet-util').nativeLibraryDir}:${tbbLibraryDir}"
        systemProperty "java.library.path", "${libPaths}:${nativeLibraryDir}:${tbbLibraryDir}"
    }
    tasks.jar {
        dependsOn nativeFlowControllerSharedLibrary
        dependsOn nativeMeteringSharedLibrary
        dependsOn nativeFlowMatchListSharedLibrary
    }

    binaries {
        all {
            if (toolChain in GccCompatibleToolChain) {
                cppCompiler.args << "--std=c++11" \
                                 << "-I" << "${JNI_INCLUDE_DIR}" \
                                 << "-I" << "$tbbHeaderDir"

                if (targetPlatform.operatingSystem.linux) {
                    cppCompiler.args << "-I" << "${JNI_INCLUDE_DIR}/linux"
                }
                if (targetPlatform.operatingSystem.macOsX) {
                    cppCompiler.args << "-I" << "${JNI_INCLUDE_DIR}/darwin"
                }
            }
        }
        nativeFlowControllerSharedLibrary {
            if (targetPlatform.operatingSystem.linux) {
                sharedLibraryFile = "${nativeLibraryDir}/libnativeFlowController.so"
                ext.tbbLibraryDir = "${tbbDir}/linux-x86_64"
            }
            if (targetPlatform.operatingSystem.macOsX) {
                sharedLibraryFile = "${nativeLibraryDir}/libnativeFlowController.dylib"
                ext.tbbLibraryDir = "${tbbDir}/osx-x86_64"
            }
        }
        nativeMeteringSharedLibrary {
            lib library: "tbb", linkage: "shared"

            if (targetPlatform.operatingSystem.linux) {
                sharedLibraryFile = "${nativeLibraryDir}/libnativeMetering.so"
                ext.tbbLibraryDir = "${tbbDir}/linux-x86_64"
            }
            if (targetPlatform.operatingSystem.macOsX) {
                sharedLibraryFile = "${nativeLibraryDir}/libnativeMetering.dylib"
                ext.tbbLibraryDir = "${tbbDir}/osx-x86_64"
            }
        }
        nativeFlowMatchListSharedLibrary {
            if (targetPlatform.operatingSystem.linux) {
                sharedLibraryFile = "${nativeLibraryDir}/libnativeFlowMatchList.so"
            }
            if (targetPlatform.operatingSystem.macOsX) {
                sharedLibraryFile = "${nativeLibraryDir}/libnativeFlowMatchList.dylib"
            }
        }
        withType(GoogleTestTestSuiteBinarySpec) {
            lib library: "googleTest", linkage: "static"
            lib library: "tbb", linkage: "shared"

            if (targetPlatform.operatingSystem.linux) {
                cppCompiler.args '-pthread'
                linker.args '-pthread'
            }
        }
    }
}

task generateJniHeadersFlowController(type:Exec) {
    def classpath = sourceSets.main.output.classesDir
    def nativeIncludes = "src/nativeFlowController/headers"
    commandLine "javah", "-d", nativeIncludes, \
                         "-classpath", classpath, \
                         "org.midonet.midolman.flows.NativeFlowControllerJNI"
    dependsOn classes
}

task generateJniHeadersMetering(type:Exec) {
    def classpath = sourceSets.main.output.classesDir
    def nativeIncludes = "src/nativeMetering/headers"
    commandLine "javah", "-d", nativeIncludes, \
                         "-classpath", classpath, \
                         "org.midonet.midolman.monitoring.NativeMeterRegistryJNI"
    dependsOn classes
}

task generateJniHeadersFlowMatchList(type:Exec) {
    def classpath = sourceSets.main.output.classesDir
    def nativeIncludes = "src/nativeFlowMatchList/headers"
    commandLine "javah", "-d", nativeIncludes, \
                         "-classpath", classpath,
                         "org.midonet.midolman.flows.NativeFlowMatchListJNI"
    dependsOn classes
}

tasks.withType(RunTestExecutable) {
    args "--gtest_output=xml:test_detail.xml"
}

tasks.withType(CppCompile) {
    dependsOn generateJniHeadersFlowController
    dependsOn generateJniHeadersMetering
    dependsOn generateJniHeadersFlowMatchList
}

jar {
    manifest {
        attributes 'Implementation-Title': 'Midolman Java daemon',
                   'Implementation-Version': version
    }
}

sourceSets {
    main {
        scala { srcDirs = ['src/main/scala', 'src/main/java'] }
        java { srcDirs = [] }
    }
    test {
        scala { srcDirs = ['src/test/scala', 'src/test/java'] }
        java { srcDirs = [] }
    }
    perf {
        scala { srcDirs = ['src/perf/scala', 'src/perf/java'] }
        java { srcDirs = [] }
    }
    integration {
        scala { srcDirs = ['src/integration/scala', 'src/integration/java'] }
        java { srcDirs = [] }
    }
}

dependencies {
    compile project(':midonet-util'), project(':netlink'), project(':nsdb')

    compile libraries.scala,
            libraries.akka,
            libraries.commons_lang3,
            libraries.commons_lang,
            libraries.commons_cli,
            libraries.commons_codec,
            libraries.guava,
            libraries.guice,
            libraries.guice_servlet,
            libraries.metrics,
            libraries.rx,
            libraries.logback,
            libraries.logback_logstash,
            libraries.zookeeper,
            libraries.curator_recipes,
            libraries.scala_logging,
            libraries.scallop,
            libraries.protobuf,
            libraries.disruptor,
            libraries.curator_test,
            libraries.jersey_client,
            libraries.jersey_guice,
            libraries.jersey_servlet,
            libraries.jetty_server,
            libraries.jetty_servlet,
            libraries.jctools,
            libraries.reflections,
            libraries.snappy,
            libraries.vpp_core,
            libraries.vpp_registry,
            "com.fasterxml.jackson.core:jackson-databind:2.3.0"

    runtime libraries.jackson_jaxrs

    testCompile project(':midonet-cluster')
    testCompile project(path: ':nsdb', configuration: 'tests')
    testCompile project(path: ':midonet-util', configuration: 'tests')
    testCompile libraries.akkatest, libraries.scalatest,
                libraries.jsonpath_assert,
                libraries.curator_test, libraries.mockit,
                libraries.test_frameworks, libraries.jsonpath

    integrationCompile libraries.java_allocation_instrumenter
}

cobertura {
    coverageExcludes = [
        '.*org.midonet.cluster.client.*',
        '.*org.midonet.cluster.data.*',
        '.*org.midonet.cluster.Cluster.*',
        '.*org.midonet.cluster.zookeeper.*',
        '.*org.midonet.midolman.state.zkManagers.*',
        '.*org.midonet.midolman.io.*Test.*',
        '.*org.midonet.midolman.tools.*',
        '.*org.midonet.midolman.serialization.*',
        '.*org.midonet.midolman.Midolman',
        '.*FlowController$Wildcard.*',
        '.*FlowController$Wildcard.*',
        '.*FlowController$Add.*',
        '.*FlowController$Remove.*',
        '.*FlowController$Invalidate.*',
        '.*FlowController$FlowAdded.*',
        '.*FlowController$Internal$.*',

        '.*DatapathController$DpPort.*',
        '.*DatapathController$Init.*',
        '.*DatapathController$Datapath.*',
        '.*DatapathController$Internal$.*',

        '.*DeduplicationActor$ApplyFlow.*',
        '.*DeduplicationActor$.*Packet.*',
        '.*DeduplicationActor$_.*',

        '.*PacketWorkflow$PacketIn.*',
        '.*PacketWorkflow$SendPacket.*',
        '.*PacketWorkflow$AddVirtual.*',

        '.*Coordinator$ToPort.*',
        '.*Coordinator$ForkAction.*',
        '.*VirtualActions$.*',

        '.*VxLanPortMapper$Internal$.*'
    ]
}

// These three below allow exposing some test classes to other modules

configurations {
    tests.extendsFrom (testCompile)
}

task jarTest (type: Jar, dependsOn: testClasses) {
    from sourceSets.test.output
    classifier = 'test'
}

artifacts {
    tests jarTest
}

task preparePkg(type: Copy, dependsOn: installShadowApp) {
    from("${buildDir}/installShadow/${project.name}/lib/${project.name}-${midonetVersion}-all.jar") {
        into "usr/share/midolman"
    }
    from("${buildDir}/man/") {
        include "*.*"
        into "usr/share/man/man1"
    }
    from("CHANGE-LOG.txt") {
        into "usr/share/doc/midolman/"
    }
    from("src/deb/init/midolman.conf") {
        into "etc/init"
    }
    from("conf") {
        into "etc/midolman"
    }
    from("src/deb/quagga/bgpd.conf") {
        into "etc/midolman/quagga"
    }
    from("src/deb/bin/wdog") {
        into "usr/bin"
    }
    from("src/deb/bin/mm-dpctl") {
        into "usr/bin"
    }
    from("src/deb/bin/mm-logxl") {
        into "usr/bin"
    }
    from("src/deb/bin/mm-trace") {
        into "usr/bin"
    }
    from("src/deb/bin/mm-meter") {
        into "usr/bin"
    }
    from("src/deb/bin/mm-ctl") {
        into "usr/bin"
    }
    from("src/deb/bin/mm-ctl-fallback") {
        into "usr/bin"
    }
    from("src/deb/bin/mm-tests") {
        into "usr/bin"
    }
    from("src/deb/bin/mm-stat") {
        into "usr/bin"
    }
    from("src/deb/bin/mm-reboot") {
        into "usr/bin"
    }
    from("src/lib/midolman/bgpd-helper") {
        into "usr/lib/midolman"
    }
    from("src/lib/midolman/service_containers/vpn/vpn-helper") {
        into "usr/lib/midolman"
    }
    from("src/lib/midolman/service_containers/haproxy/haproxy-helper") {
        into "usr/lib/midolman"
    }
    from("${nativeLibraryDir}") {
        include "*.so"
        into "usr/lib/midolman"
    }
    from("${tbbDir}/linux-x86_64") {
        include "*.so*"
        into "usr/lib/midolman"
    }
    from("${project(':midonet-util').nativeLibraryDir}") {
        include "*.so"
        into "usr/lib/midolman"
    }
    from("src/deb/init/midolman-prepare") {
        into "usr/share/midolman"
    }
    from("src/deb/init/midolman-start") {
        into "usr/share/midolman"
    }
    from("src/deb/init/minions-start") {
        into "usr/share/midolman"
    }
    from("src/deb/init/vpp-start") {
        into "usr/share/midolman"
    }
    from("src/deb/init/prepare-java") {
        into "usr/share/midolman"
    }
    into "${pkgDestDir}"
    doLast {
        new File("${pkgDestDir}/usr/share/midolman/${project.name}-${midonetVersion}-all.jar").
                renameTo("${pkgDestDir}/usr/share/midolman/${project.name}.jar")
    }
}

task debianPrepare(type: Copy, dependsOn: installShadowApp) {
    from("src/systemd/midolman.service") {
        into "lib/systemd/system"
    }
    into "${pkgDestDir}"
}

task rhel7Prepare(type: Copy, dependsOn: installShadowApp) {
    from("src/systemd/midolman.service") {
        into "usr/lib/systemd/system"
    }
    into "${pkgDestDir}"
}

packaging {
    version = project.debVersion
    maintainer = project.maintainer
    vendor = project.vendor
    url = project.url
    description = 'Midolman is a virtual network controller'
    dependencies = ['haproxy']
    confFiles = ['/etc/midolman/midolman-env.sh',
                 '/etc/midolman/midolman-env.sh.compute.small',
                 '/etc/midolman/midolman-env.sh.gateway.large',
                 '/etc/midolman/midolman.conf',
                 '/etc/midolman/minions-env.sh',
                 '/etc/midolman/logback.xml',
                 '/etc/midolman/logback-minions.xml' ]
    fpmOpts = ['-a', 'all',
               '--category', 'network',
               '--url', 'http://midokura.com',
               '--epoch', '2']
}

preparePkg.dependsOn cleanPkg

debian.dependsOn debianPrepare
debianPrepare.dependsOn preparePkg

rpm.dependsOn rhel7Prepare
rhel7Prepare.dependsOn preparePkg

tar.dependsOn preparePkg

debian.doFirst {
    project.packaging.version = project.debVersion
    project.packaging.fpmOpts = project.packaging.fpmOpts.clone()
    project.packaging.fpmOpts.addAll([
        '-d', "midonet-tools (>= ${project.debVersion})",
        '-d', 'python',
        '-d', 'python-setproctitle',
        '-d', 'quagga (>= 0.99.23)',
        '-d', 'libreswan (>= 3.14-1)',
        '-d', 'openjdk-8-jdk-headless | java8-runtime-headless | java8-runtime',
        '-d', 'iproute (>= 20111117-1ubuntu2.1)',
        '-d', 'linux-image-generic (>= 3.13.0) | linux-image-virtual (>= 3.13.0) | linux-image-generic-lts-trusty (>= 3.13.0) | linux-image-virtual-lts-trusty (>= 3.13.0) | openvswitch-datapath-dkms (>= 1.10)',
        '-d', 'vpp',
        '--deb-recommends', 'java8-runtime-headless | java8-runtime',
        '--after-install', "${project.projectDir}/src/deb/control/postinst",
        '--before-install', "${project.projectDir}/src/deb/control/preinst",
        '--after-remove', "${project.projectDir}/src/deb/control/postrm",
        '--before-remove', "${project.projectDir}/src/deb/control/prerm" ])
}

rpm.doFirst {
    project.packaging.version = project.rpmVersion
    project.packaging.iteration = project.rpmRelease
    project.packaging.fpmOpts = project.packaging.fpmOpts.clone()
    project.packaging.fpmOpts.addAll([
        '-d', "midonet-tools >= ${project.rpmVersion}",
        '-d', 'python',
        '-d', 'iproute',
        '--after-install', "${project.projectDir}/src/rhel7/control/postinst",
        '--before-install', "${project.projectDir}/src/rhel7/control/preinst",
        '--after-remove', "${project.projectDir}/src/rhel7/control/postrm",
        '--before-remove', "${project.projectDir}/src/rhel7/control/prerm",
    ])
    switch(project.rhelTarget) {
      case "el7":
        project.packaging.fpmOpts.addAll([
            '--depends', 'python-setproctitle',
            '--depends', 'java-openjdk-headless >= 1.8.0',
            '--depends', 'libreswan >= 1.15.0',
            '--depends', 'quagga >= 0.99.23',
            '--depends', 'vpp'
        ])
        break
      case "sles12":
        project.packaging.fpmOpts.addAll([
            '--depends', 'iproute2',
            '--depends', 'java-1_8_0-openjdk-headless',
            '--depends', 'quagga >= 0.99.22',
        ])
        break
      default:
        logger.warn("Invalid project-rhelTarget: " + project.rhelTarget +
                    ". Must be either 'el7' or 'sles12'")
    }
}

tar.doFirst {
    project.packaging.version = project.debVersion
    project.packaging.fpmOpts = project.packaging.fpmOpts.clone()
}

debian.doLast {
    new File("${buildDir}/install/${project.name}").deleteDir()
}

rpm.doLast {
    new File("${buildDir}/install/${project.name}").deleteDir()
}

tar.doLast {
    new File("{buildDir}/install/${project.name}").deleteDir()
}

mainClassName = "org.midonet.midolman.Midolman"

task runWithSudo(type:Exec, dependsOn: installApp) {
    commandLine 'sudo', '../misc/run-java-with-env.sh'
    commandLine += "${project.projectDir}/conf/midolman-env.sh.small"
    commandLine += '-Djava.library.path=/lib:/usr/lib'
    commandLine += '-cp'
    commandLine += sourceSets.main.runtimeClasspath.collect{ it.toString() }.join(':')
    commandLine += mainClassName
}

task testShell(type: Exec) {
    commandLine 'src/test/shell/service_containers/vpn/vpn_basic_test'
}

integration.dependsOn testShell

preparePkg.dependsOn manpages
preparePkg.dependsOn jar

#!/bin/bash -x

# Copyright 2015 Midokura SARL
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

bgpd_start() {
    router_id=$1
    bgpd=/usr/sbin/bgpd
    pidfile="/var/run/quagga/bgpd.${vtyport}.pid"
    if [ ! -x $bgpd ] ; then
        bgpd=/usr/lib/quagga/bgpd
        if [ ! -x $bgpd ] ; then
            echo "Could not find bgpd, looked in /usr/lib/quagga and /usr/sbin"
            exit 3
        fi
    fi

    quagga_log="$log_dir/quagga.$vtyport"
    if [ -n "$router_id" ]; then
        quagga_log=$quagga_log.$router_id
    fi
    mkdir -p $quagga_log
    chown quagga.quagga $quagga_log
    pushd $quagga_log

    # Q: bgpd has an option to run as a daemon, so why are we running as a
    # background process?
    # A: Because we want to control multiple processes (zebra, bgpd) and exit
    # the script only when all processes have exited.
    exec ip netns exec $namespace $bgpd --vty_port $vtyport \
                                        --config_file $bgp_config_file \
                                        --pid_file $pidfile \
                                        --socket $api_socket &
}

zebra_start() {
    zebra=/usr/sbin/zebra
    pidfile="/var/run/quagga/zebra.${vtyport}.pid"
    if [ ! -x $zebra ] ; then
        zebra=/usr/lib/quagga/zebra
        if [ ! -x $zebra ] ; then
            echo "Could not find zebra, looked in /usr/lib/quagga and /usr/sbin"
            exit 3
        fi
    fi

    exec ip netns exec $namespace $zebra --fpm-port $fpm_port \
                                         --fpm-address $fpm_address\
                                         --config_file $zebra_config_file \
                                         --pid_file $pidfile \
                                         --socket $api_socket &
}

wait_for_all() {
    for job in `jobs -p`
    do
        wait $job
    done
}

assign_addr() {
    IFACE=n$iface
    SUBIFACE=`echo $router_ip | cut -d'/' -f1`
    ip netns exec $namespace ip link add link $IFACE dev $SUBIFACE type macvlan
    ip netns exec $namespace ip address add $router_ip dev $SUBIFACE
    ip netns exec $namespace ip link set dev $SUBIFACE address $mac
    ip netns exec $namespace ip link set dev $SUBIFACE up
    ip netns exec $namespace ip link set $IFACE promisc on
}

remove_addr() {
    SUBIFACE=`echo $router_ip | cut -d'/' -f1`
    ip netns exec $namespace ip link del $SUBIFACE
}

add_arp_entry() {
    SUBIFACE=`echo $peer_ip | cut -d'/' -f1`
    ip netns exec $namespace ip n a $router_ip l $mac_addr dev $SUBIFACE
}

rem_arp_entry() {
    SUBIFACE=`echo $peer_ip | cut -d'/' -f1`
    ip netns exec $namespace ip n del $router_ip dev $SUBIFACE
}

reset_namespace_name() {
    local router_id=$1
    if [ -n "$router_id" ]; then
        namespace=bgp-$router_id
    fi
}

bgpd_prepare() {
    mkdir -p $socketdir

    set -e

    echo "Creating namespace: $namespace"
    ip netns add $namespace

    echo "Preparing bgpd veth pair"
    if [ -n "$iface_name" ]; then
        # If the interface name has been specified in the arguments, use that
        netdev_port_name=$iface_name
        netdev_port_mirror_name=n$iface_name
    fi
    ip link add name $netdev_port_name type veth peer name $netdev_port_mirror_name
    ip link set $netdev_port_mirror_name netns $namespace
    ip netns exec $namespace ip link set dev $netdev_port_mirror_name up address $router_mac
    ip netns exec $namespace ip address add $router_ip dev $netdev_port_mirror_name
    ip netns exec $namespace ip link set dev lo up
    ip link set dev $netdev_port_name up

    echo "Preparing vty veth pair"
    ip link add name $vty_port_name type veth peer name $vty_port_mirror_name
    ip link set $vty_port_mirror_name netns $namespace
    ip netns exec $namespace ip link set dev $vty_port_mirror_name up
    ip netns exec $namespace ip address add $remote_vty_ip dev $vty_port_mirror_name
    ip link set dev $vty_port_name up

    echo "Preparing vty bridge"
    ip link add "$vty_bridge_name" type bridge
    ip link set "$vty_port_name" master "$vty_bridge_name"
    ip address add $local_vty_ip dev $vty_bridge_name
    ip link set dev $vty_bridge_name up

    echo "Adding default route"
    ip netns exec $namespace ip route add default via `echo $local_vty_ip | cut -d'/' -f 1`
}

kill_namespace_pids() {
    ip netns pids $namespace | while read pid ; do
        echo "Killing process in namespace, with pid $pid and command line \"`ps -o cmd= $pid`\""
        kill -9 $pid
    done
}

bgpd_down() {
    if [ -e "/var/run/netns/$namespace" ] ; then
        echo "Found namespace, cleaning up: $namespace"
        kill_namespace_pids
        # Deleting the namespace will also delete all interfaces in the
        # namespace
        ip netns delete $namespace
    fi

    ip link show $vty_bridge_name >/dev/null 2>&1
    if [ $? -eq 0 ] ; then
        echo "Found bridge, cleaning up: $vty_bridge_name"
        ip link show $vty_port_name >/dev/null 2>&1 && \
            ip link set "$vty_port_name" nomaster
        ip link set $vty_bridge_name down
        ip link del "$vty_bridge_name"
    fi
    ip link show $vty_port_name >/dev/null 2>&1 && \
        ip link delete $vty_port_name
    true
}

usage() {
    echo "Usage: $0 prepare INDEX LOCAL_VTY_IP REMOTE_VTY_IP ROUTER_IP ROUTER_MAC [ROUTER_ID]"
    echo "       $0 up INDEX VTY_PORT_NUMBER BGPD_CONFIG_FILE LOG_DIR [ROUTER_ID]"
    echo "       $0 down INDEX [ROUTER_ID]"
    echo "       $0 add_addr INDEX INTERFACE_NAME ROUTER_IP MAC [ROUTER_ID]"
    echo "       $0 rem_addr INDEX INTERFACE_NAME ROUTER_IP [ROUTER_ID]"
    echo "       $0 add_arp INDEX INTERFACE_NAME ROUTER_IP MAC [ROUTER_ID] PEER_IP"
    echo "       $0 rem_arp INDEX INTERFACE_NAME ROUTER_IP [ROUTER_ID] PEER_IP"
    echo "experimental:"
    echo "       $0 quagga_up INDEX LOCAL_VTY_IP VTY_PORT_NUMBER BGPD_CONFIG_FILE ZEBRA_CONFIG_FILE LOG_DIR"
    exit 1
}

bgpd_up() {
    kill_namespace_pids
    bgpd_start $1
    wait_for_all
}

quagga_up() {
    kill_namespace_pids
    bgpd_start
    zebra_start
    wait_for_all
}

########### script body ###########

exec 2>&1

index=$2

if [ -z "$index" ] ; then
    usage
fi

netdev_port_name="mbgp$index"
netdev_port_mirror_name="mbgp${index}_m"
vty_port_name="mbgp${index}_vty"
vty_port_mirror_name="mbgp${index}_vtym"
vty_bridge_name="mbgp${index}_br"
namespace="mbgp${index}_ns"
socketdir="/var/run/quagga"
api_socket="$socketdir/zserv${index}.api"

case "$1" in
    add_arp)
        iface=$3
        router_ip=$4
        mac_addr=$5
        reset_namespace_name $6
        peer_ip=$7
        add_arp_entry
        ;;

    rem_arp)
        iface=$3
        router_ip=$4
        reset_namespace_name $5
        peer_ip=$6
        rem_arp_entry
        ;;

    rem_addr)
        iface=$3
        router_ip=$4
        reset_namespace_name $5
        if [ -z "$iface" ] || [ -z "$router_ip" ] ; then
            usage
        fi
        remove_addr
        ;;

    add_addr)
        iface=$3
        router_ip=$4
        mac=$5
        reset_namespace_name $6
        if [ -z "$iface" ] || [ -z "$router_ip" ] ; then
            usage
        fi
        assign_addr
        ;;

    prepare)
        local_vty_ip=$3
        remote_vty_ip=$4
        router_ip=$5
        router_mac=$6
        iface_name=$7
        reset_namespace_name $8

        if [ -z "$remote_vty_ip" ] || [ -z "$local_vty_ip" ] ; then
            usage
        fi
        if [ -z "$router_ip" ] || [ -z "$router_mac" ] ; then
            usage
        fi

        bgpd_down
        bgpd_prepare
        ;;

    up)
        vtyport=$3
        bgp_config_file=$4
        log_dir=$5
        router_uuid=$6
        reset_namespace_name $router_uuid
        if [ -z "$bgp_config_file" ] || [ -z "$vtyport" ] || [ -z "$log_dir" ] ; then
            usage
        fi
        bgpd_up $router_uuid
        ;;

    quagga_up)
        vtyport=$3
        local_vty_ip=$4
        bgp_config_file=$5
        zebra_config_file=$6
        log_dir=$7
        reset_namespace_name $8
        let fpm_port="index+2620"
        fpm_address=`echo $local_vty_ip | cut -d'/' -f 1`
        if [ -z "$bgp_config_file" ] || [ -z "$zebra_config_file" ] || [ -z "$vtyport" ] || [ -z "$log_dir" ] ; then
            usage
        fi
        quagga_up
        ;;

    down)
        reset_namespace_name $3
        bgpd_down
        exit 0
        ;;

    *)
        usage
        ;;
esac

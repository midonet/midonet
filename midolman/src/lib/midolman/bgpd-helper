#!/bin/bash -x

# Copyright 2015 Midokura SARL
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

bgpd_start() {
    ROUTER_ID=$1
    BGPD=/usr/sbin/bgpd
    PID_FILE="/var/run/quagga/bgpd.$VTY_PORT.pid"
    if [ ! -x $BGPD ] ; then
        BGPD=/usr/lib/quagga/bgpd
        if [ ! -x $BGPD ] ; then
            echo "Could not find bgpd, looked in /usr/lib/quagga and /usr/sbin"
            exit 3
        fi
    fi

    QUAGGA_LOG="$LOG_DIR/quagga.$VTY_PORT"
    if [ -n "$ROUTER_ID" ]; then
        QUAGGA_LOG=$QUAGGA_LOG.$ROUTER_ID
    fi
    mkdir -p $QUAGGA_LOG
    chown quagga.quagga $QUAGGA_LOG
    pushd $QUAGGA_LOG

    # Q: bgpd has an option to run as a daemon, so why are we running as a
    # background process?
    # A: Because we want to control multiple processes (zebra, bgpd) and exit
    # the script only when all processes have exited.
    exec ip netns exec $NAMESPACE $BGPD --vty_port $VTY_PORT \
                                        --config_file $BGP_CONFIG_FILE \
                                        --pid_file $PID_FILE \
                                        --socket $API_SOCKET &
}

zebra_start() {
    ZEBRA=/usr/sbin/zebra
    PID_FILE="/var/run/quagga/zebra.$VTY_PORT.pid"
    if [ ! -x $ZEBRA ] ; then
        ZEBRA=/usr/lib/quagga/zebra
        if [ ! -x $ZEBRA ] ; then
            echo "Could not find zebra, looked in /usr/lib/quagga and /usr/sbin"
            exit 3
        fi
    fi

    exec ip netns exec $NAMESPACE $ZEBRA --fpm-port $FPM_PORT \
                                         --fpm-address $FPM_ADDRESS \
                                         --config_file $ZEBRA_CONFIG_FILE \
                                         --pid_file $PID_FILE \
                                         --socket $API_SOCKET &
}

wait_for_all() {
    for JOB in `jobs -p`
    do
        wait $JOB
    done
}

reset_namespace_name() {
    local ROUTER_ID=$1
    if [ -n "$ROUTER_ID" ]; then
        NAMESPACE=bgp-$ROUTER_ID
    fi
}

bgpd_prepare() {
    mkdir -p $SOCKET_DIR

    set -e

    echo "Creating namespace: $NAMESPACE"
    ip netns add $NAMESPACE

    echo "Preparing BGP container interfaces"
    if [ -n "$IFACE_NAME" ]; then
        # If the interface name has been specified in the arguments, use that
        NETDEV_PORT_NAME=$IFACE_NAME
        NETDEV_PORT_MIRROR_NAME=n$IFACE_NAME
    fi
    ip link add name $NETDEV_PORT_NAME type veth peer name $NETDEV_PORT_MIRROR_NAME
    ip link set $NETDEV_PORT_MIRROR_NAME netns $NAMESPACE
    ip netns exec $NAMESPACE ip link set dev $NETDEV_PORT_MIRROR_NAME up address $ROUTER_MAC
    ip netns exec $NAMESPACE ip address add $ROUTER_IP dev $NETDEV_PORT_MIRROR_NAME
    ip netns exec $NAMESPACE ip link set dev lo up
    ip link set dev $NETDEV_PORT_NAME up

    echo "Preparing VTY interfaces"
    ip link add name $VTY_PORT_NAME type veth peer name $VTY_PORT_MIRROR_NAME
    ip link set $VTY_PORT_MIRROR_NAME netns $NAMESPACE
    ip netns exec $NAMESPACE ip link set dev $VTY_PORT_MIRROR_NAME up
    ip netns exec $NAMESPACE ip address add $REMOTE_VTY_IP dev $VTY_PORT_MIRROR_NAME
    ip link set dev $VTY_PORT_NAME up

    echo "Preparing VTY bridge"
    ip link add $VTY_BRIDGE_NAME type bridge
    ip link set $VTY_PORT_NAME master $VTY_BRIDGE_NAME
    ip address add $LOCAL_VTY_IP dev $VTY_BRIDGE_NAME
    ip link set dev $VTY_BRIDGE_NAME up

    echo "Adding default route"
    ip netns exec $NAMESPACE ip route add default via `echo $LOCAL_VTY_IP | cut -d'/' -f 1`
}

kill_namespace_pids() {
    ip netns pids $NAMESPACE | while read PID ; do
        echo "Killing process in namespace, with pid $PID and command line \"`ps -o cmd= $PID`\""
        kill -9 $PID
    done
}

bgpd_down() {
    if [ -e "/var/run/netns/$NAMESPACE" ] ; then
        echo "Found namespace, cleaning up: $NAMESPACE"
        kill_namespace_pids
        # Deleting the namespace will also delete all interfaces in the
        # namespace
        ip netns delete $NAMESPACE
    fi

    ip link show $VTY_BRIDGE_NAME >/dev/null 2>&1
    if [ $? -eq 0 ] ; then
        echo "Found bridge, cleaning up: $VTY_BRIDGE_NAME"
        ip link show $VTY_PORT_NAME >/dev/null 2>&1 && \
            ip link set VTY_PORT_NAME nomaster
        ip link set $VTY_BRIDGE_NAME down
        ip link del $VTY_BRIDGE_NAME
    fi
    ip link show $VTY_PORT_NAME >/dev/null 2>&1 && \
        ip link delete $VTY_PORT_NAME
    true
}

add_address() {
    IFACE=n$IFACE
    SUBIFACE=`echo $ROUTER_IP | cut -d'/' -f1`
    ip netns exec $NAMESPACE ip link add link $IFACE dev $SUBIFACE type macvlan
    ip netns exec $NAMESPACE ip address add $ROUTER_IP dev $SUBIFACE
    ip netns exec $NAMESPACE ip link set dev $SUBIFACE address $MAC_ADDR
    ip netns exec $NAMESPACE ip link set dev $SUBIFACE up
    ip netns exec $NAMESPACE ip link set $IFACE promisc on
}

remove_address() {
    SUBIFACE=`echo $ROUTER_IP | cut -d'/' -f1`
    ip netns exec $NAMESPACE ip link del $SUBIFACE
}

add_arp_entry() {
    SUBIFACE=`echo $PEER_IP | cut -d'/' -f1`
    ip netns exec $NAMESPACE ip n a $ROUTER_IP l $MAC_ADDR dev $SUBIFACE
}

rem_arp_entry() {
    SUBIFACE=`echo $PEER_IP | cut -d'/' -f1`
    ip netns exec $NAMESPACE ip n del $ROUTER_IP dev $SUBIFACE
}

usage() {
    echo "Usage: $0 prepare INDEX LOCAL_VTY_IP REMOTE_VTY_IP ROUTER_IP ROUTER_MAC [ROUTER_ID]"
    echo "       $0 up INDEX VTY_PORT_NUMBER BGPD_CONFIG_FILE LOG_DIR [ROUTER_ID]"
    echo "       $0 down INDEX [ROUTER_ID]"
    echo "       $0 add_addr INDEX INTERFACE_NAME ROUTER_IP MAC [ROUTER_ID]"
    echo "       $0 rem_addr INDEX INTERFACE_NAME ROUTER_IP [ROUTER_ID]"
    echo "       $0 add_arp INDEX INTERFACE_NAME ROUTER_IP MAC [ROUTER_ID] PEER_IP"
    echo "       $0 rem_arp INDEX INTERFACE_NAME ROUTER_IP [ROUTER_ID] PEER_IP"
    echo "experimental:"
    echo "       $0 quagga_up INDEX LOCAL_VTY_IP VTY_PORT_NUMBER BGPD_CONFIG_FILE ZEBRA_CONFIG_FILE LOG_DIR"
    exit 1
}

bgpd_up() {
    kill_namespace_pids
    bgpd_start $1
    wait_for_all
}

quagga_up() {
    kill_namespace_pids
    bgpd_start
    zebra_start
    wait_for_all
}

########### script body ###########

exec 2>&1

INDEX=$2

if [ -z "$INDEX" ] ; then
    usage
fi

NETDEV_PORT_NAME="mbgp$INDEX"
NETDEV_PORT_MIRROR_NAME="mbgp${INDEX}_m"
VTY_PORT_NAME="mbgp${INDEX}_vty"
VTY_PORT_MIRROR_NAME="mbgp${INDEX}_vtym"
VTY_BRIDGE_NAME="mbgp${INDEX}_br"
NAMESPACE="mbgp${INDEX}_ns"
SOCKET_DIR="/var/run/quagga"
API_SOCKET="$SOCKET_DIR/zserv${INDEX}.api"

case "$1" in
    prepare)
        LOCAL_VTY_IP=$3
        REMOTE_VTY_IP=$4
        ROUTER_IP=$5
        ROUTER_MAC=$6
        IFACE_NAME=$7
        reset_namespace_name $8

        if [ -z "$REMOTE_VTY_IP" ] || [ -z "$LOCAL_VTY_IP" ] ; then
            usage
        fi
        if [ -z "$ROUTER_IP" ] || [ -z "$ROUTER_MAC" ] ; then
            usage
        fi

        bgpd_down
        bgpd_prepare
        ;;

    up)
        VTY_PORT=$3
        BGP_CONFIG_FILE=$4
        LOG_DIR=$5
        ROUTER_ID=$6
        reset_namespace_name $ROUTER_ID
        if [ -z "$BGP_CONFIG_FILE" ] || [ -z "$VTY_PORT" ] || [ -z "$LOG_DIR" ] ; then
            usage
        fi
        bgpd_up $ROUTER_ID
        ;;

    quagga_up)
        VTY_PORT=$3
        LOCAL_VTY_IP=$4
        BGP_CONFIG_FILE=$5
        ZEBRA_CONFIG_FILE=$6
        LOG_DIR=$7
        reset_namespace_name $8
        let FPM_PORT="INDEX+2620"
        FPM_ADDRESS=`echo $LOCAL_VTY_IP | cut -d'/' -f 1`
        if [ -z "$BGP_CONFIG_FILE" ] || [ -z "$ZEBRA_CONFIG_FILE" ] || [ -z "$VTY_PORT" ] || [ -z "$LOG_DIR" ] ; then
            usage
        fi
        quagga_up
        ;;

    down)
        reset_namespace_name $3
        bgpd_down
        exit 0
        ;;

    add_arp)
        IFACE=$3
        ROUTER_IP=$4
        MAC_ADDR=$5
        reset_namespace_name $6
        PEER_IP=$7
        add_arp_entry
        ;;

    rem_arp)
        IFACE=$3
        ROUTER_IP=$4
        reset_namespace_name $5
        PEER_IP=$6
        rem_arp_entry
        ;;

    add_addr)
        IFACE=$3
        ROUTER_IP=$4
        MAC_ADDR=$5
        reset_namespace_name $6
        if [ -z "$IFACE" ] || [ -z "$ROUTER_IP" ] ; then
            usage
        fi
        add_address
        ;;

    rem_addr)
        IFACE=$3
        ROUTER_IP=$4
        reset_namespace_name $5
        if [ -z "$IFACE" ] || [ -z "$ROUTER_IP" ] ; then
            usage
        fi
        remove_address
        ;;

    *)
        usage
        ;;
esac

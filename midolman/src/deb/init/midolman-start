#!/bin/bash

# Copyright 2014 Midokura SARL
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

set -e

exec >> /var/log/midolman/upstart-stderr.log
exec 2>&1

if [ -f /etc/midolman/midolman-env.sh ]; then
    . /etc/midolman/midolman-env.sh
else
    echo "/etc/midolman/midolman-env.sh: file not found"
    exit 1
fi

check_for_java7() {
    [ "x" = "x$1" ] && return 1
    [ -x "$1" ] || return 1
    $1 -version 2>&1 | grep '^java version' | sed -e 's/^[^"]*"\(.*\)"$/\1/' \
        | grep '^1.7.' >/dev/null 2>&1
}

if [ -n "`which java`" ]; then
        java=`which java`
        # Dereference symlink(s)
        while true; do
            if [ -h "$java" ]; then
                java=`readlink "$java"`
                continue
            fi
            break
        done
        JVM_SEARCH_DIRS="`dirname $java`/../ $JVM_SEARCH_DIRS"
fi
if [ ! -z "$JAVA_HOME" ]; then
    JVM_SEARCH_DIRS="$JAVA_HOME $JVM_SEARCH_DIRS"
fi

oldopts=$-
set +e
JAVA_HOME=
for jdir in $JVM_SEARCH_DIRS; do
    check_for_java7 "$jdir/bin/java"
    if [ $? -eq 0 ]; then
        JAVA_HOME="$jdir"
        break
    fi
done
echo $oldopts | grep 'e' 2>&1 >/dev/null && set -e

if [ -z "$JAVA_HOME" ] ; then
    echo "No suitable JVM found (at least v1.7 required)"
    exit 1
fi

JAVA="$JAVA_HOME/bin/java"

MIDO_JAR=`ls $MIDO_HOME/midolman-*.jar`
MIDO_DEP_CLASS_PATH=$MIDO_HOME/dep/*
MIDO_BOOTSTRAP_JAR=`ls $MIDO_HOME/dep/midonet-jdk-bootstrap-*.jar`
MIDO_MAIN=org.midonet.midolman.Midolman

test -r $MIDO_JAR || exit 1
test -r $MIDO_BOOTSTRAP_JAR || exit 1

# OpenJDK uses the system jnidispatcher as default, since /usr/lib/jni is in
# the java library path. We specify our jna.jar in the classpath, this leads
# to incompatibility.  We should use either (1) the system jnidispatcher and
# the system jna.jar or (2) the packaged jnidispatcher and the packaged
# jna.jar.  Here we remove the /usr/lib/jni from the library path to use the
# package jnidispatcher
JAVA_LIBRARY_PATH=-Djava.library.path=/lib:/usr/lib


set -x

JAVA_OPTS="$JVM_OPTS -Dmidolman.log.dir=$MIDO_LOG_DIR -Dlogback.configurationFile=$MIDO_CFG/logback.xml"
if [ "xyes" = "x$DEBUG" ] ; then
    JAVA_OPTS="$JAVA_OPTS -Xdebug -Xrunjdwp:transport=dt_socket,address=$MIDO_DEBUG_PORT,server=y,suspend=y"
fi

MIDO_WATCHDOG_TIMEOUT="${WATCHDOG_TIMEOUT:-10}"

if [ -x /usr/bin/wdog ] && [ -z "$WATCHDOG_DISABLE" ] ; then
    exec /usr/bin/wdog -d /var/log/midolman $WATCHDOG_TIMEOUT -- \
                $JAVA $JAVA_LIBRARY_PATH \
                -Xbootclasspath/p:$MIDO_BOOTSTRAP_JAR \
                -cp $MIDO_JAR:$MIDO_DEP_CLASS_PATH \
                $JAVA_OPTS $MIDO_MAIN -c $MIDO_CFG/$MIDO_CFG_FILE
else
    exec $JAVA $JAVA_LIBRARY_PATH -Xbootclasspath/p:$MIDO_BOOTSTRAP_JAR \
                -cp $MIDO_JAR:$MIDO_DEP_CLASS_PATH \
                $JAVA_OPTS $MIDO_MAIN -c $MIDO_CFG/$MIDO_CFG_FILE
fi

#!/usr/bin/env python
#
# Copyright 2015 Midokura SARL
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

from __future__ import print_function
from sys import argv
import subprocess
import datetime
import errno
import fcntl
import os
import resource
import select
import signal
import struct
import sys
import tempfile
import time


def corefile_timestamp():
    return datetime.datetime.now().strftime("%Y%m%d_%H%M%S")


def timestamp():
    return datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S")


def err(s):
    print('[wdog] ' + timestamp() + ' ' + s, file=sys.stderr)
    sys.stderr.flush()


def msg(s):
    print('[wdog] ' + timestamp() + ' ' + s, file=sys.stdout)
    sys.stdout.flush()


class ISelectLoopObserver:
    def __init__(self):
        pass

    def on_signal(self, signum):
        pass

    def on_ready(self, fd):
        pass


class SignalsPipe:
    def __init__(self, observer):
        self.observer = observer
        r, w = os.pipe()
        self.rd = r
        self.wd = w

        self.handlers = {}

        flags = fcntl.fcntl(self.rd, fcntl.F_GETFL)
        fcntl.fcntl(self.rd, fcntl.F_SETFL, flags | os.O_NONBLOCK)
        flags = fcntl.fcntl(self.wd, fcntl.F_GETFL)
        fcntl.fcntl(self.wd, fcntl.F_SETFL, flags | os.O_NONBLOCK)

        signal.signal(signal.SIGINT, self._handler)
        signal.signal(signal.SIGTERM, self._handler)
        signal.signal(signal.SIGQUIT, self._handler)
        signal.signal(signal.SIGCHLD, self._handler)
        signal.signal(signal.SIGUSR1, self._handler)

    def _handler(self, signum, frame):
        os.write(self.wd, struct.pack('1B', signum))

    def read(self):
        try:
            while True:
                data = os.read(self.rd, 1)
                if len(data) > 0:
                    signum, = struct.unpack('1B', data)
                    self.observer.on_signal(signum)
        except OSError as e:
            if e.errno != errno.EINTR and e.errno != errno.EAGAIN:
                raise e


class SelectLoop:
    def __init__(self, observer):
        self.selfpipe = SignalsPipe(observer)
        self.fds = []
        self.fds.append(self.selfpipe.rd)
        self.observer = observer

    def add_fd(self, fd):
        self.fds.append(fd)

    def loop(self, timeout):
        try:
            rr, wr, er = select.select(self.fds, [], [], timeout)
            for fd in rr:
                if fd == self.selfpipe.rd:
                    self.selfpipe.read()
                else:
                    self.observer.on_ready(fd)
        except select.error as e:
            err, message = e.args
            if err != errno.EAGAIN and err != errno.EINTR:
                raise e


class ProcMon(ISelectLoopObserver):
    def __init__(self, grace, dump_path, args):
        self.ticks_left = grace
        self.grace = grace
        self.pipe_dir = tempfile.mkdtemp(prefix='wdog.')
        self.pipe_path = self.pipe_dir + '/wdog.fifo'
        self.args = args
        self.child_pid = 0
        self.pipe = 0
        self.running = True
        self.dump_path = dump_path

    def run(self):
        self.select_loop = SelectLoop(self)
        try:
            self.select_loop.add_fd(self.open_pipe())
            self.spawn()
            killed = False
            while self.running and self.child_pid > 0:
                self.select_loop.loop(1.0)
                self.ticks_left -= 1
                if self.ticks_left < 0 and not killed:
                    pid = self.child_pid
                    pgid = os.getpgid(pid)
                    err('Child is unresponsive, killing child processes (pid:%d pgid:%d)' % (
                        self.child_pid, pgid))
                    os.killpg(pgid, signal.SIGQUIT)
                    os.killpg(pgid, signal.SIGKILL)
                    killed = True
        finally:
            try:
                if self.pipe > 0:
                    os.close(self.pipe)
                    os.unlink(self.pipe_path)
                os.rmdir(self.pipe_dir)
                if self.running and self.child_pid > 0:
                    pgid = os.getpgid(self.child_pid)
                    err('Unexpected error: killing child processes (pid:%d pgid:%d)' % (
                        self.child_pid, pgid))
                    os.killpg(pgid, signal.SIGKILL)
                    pid, status = os.waitpid(self.child_pid, 0)
            except OSError:
                pass

    def on_sigchld(self):
        pid, status = os.waitpid(self.child_pid, os.WNOHANG)
        if (pid == self.child_pid):
            self.running = False
            if os.WIFEXITED(status):
                code = os.WEXITSTATUS(status)
                if code != 0:
                    err('Child died with status %d' % code)
                else:
                    msg('Child exited')
                sys.exit(code)
            elif os.WIFSIGNALED(status):
                if os.WTERMSIG(status) == signal.SIGTERM:
                    msg('Child received SIGTERM and exited gracefully')
                    sys.exit(0)
                else:
                    err('Child received signal: %d' % os.WTERMSIG(status))
                    sys.exit(254)
            else:
                msg('Child crashed')
                sys.exit(253)

    def on_sigquit(self):
        if self.child_pid > 0:
            pid = self.child_pid
            pgid = os.getpgid(pid)
            msg('Received SIGQUIT, dumping core and delivering signal (pid:%d pgid:%d)' % (
                pid, pgid))
            os.killpg(pgid, signal.SIGQUIT)

    def on_sigterm(self):
        msg('Signal received, exiting')
        self.terminate(10)

    def on_sigusr1(self):
        msg('User signal received, starting fast reboot mechanism.')

        try:
            # 1. mark a fast reboot lock file while rebooting
            #    will be removed by the newly created process
            fd = os.open('/var/run/midolman/fast_reboot.file',
                         os.O_CREAT | os.O_EXCL)
            os.close(fd)

            # 2. Signal current process
            os.kill(self.child_pid, signal.SIGTERM)

            # 3. Remove pipe
            if self.pipe > 0:
                os.close(self.pipe)
                os.unlink(self.pipe_path)
            os.rmdir(self.pipe_dir)

            # 4. Spawn new process and start monitoring it
            ProcMon(self.grace, self.dump_path, self.args).run()
        except:
            msg('Failed to execute the fast reboot sequence. Check that the '
                '/var/run/midolman/fast_reboot.file does not exist and try '
                'again.')


    def wait_on_child(self, pid, timeout):
        for i in range(timeout):
            try:
                time.sleep(1)
                os.kill(pid, 0)
            except OSError:
                return True
        return False

    def terminate(self, timeout):
        pid = self.child_pid
        if pid > 0:
            pgid = os.getpgid(pid)
            msg('Terminating child process with timeout %d seconds (pid:%d pgid:%d)' % (
                timeout, pid, pgid))
            os.kill(pid, signal.SIGTERM)
            if self.wait_on_child(pid, timeout):
                os.killpg(pgid, signal.SIGKILL)
                return
            err('Child did not stop gracefully in %d seconds, killing (pid:%d pgid:%d)' % (
                timeout, pid, pgid))
            os.killpg(pgid, signal.SIGKILL)

    def on_signal(self, signum):
        if signum == signal.SIGQUIT:
            self.on_sigquit()
        elif signum == signal.SIGINT or signum == signal.SIGTERM:
            self.on_sigterm()
        elif signum == signal.SIGCHLD:
            self.on_sigchld()
        elif signum == signal.SIGUSR1:
            self.on_sigusr1()

    def on_ready(self, fd):
        nbytes = 0

        while True:
            try:
                buf = os.read(fd, 1)
                if len(buf) == 0:
                    break
                nbytes += len(buf)
            except OSError as e:
                if e.errno == errno.EINTR:
                    pass
                elif e.errno == errno.EAGAIN:
                    break
                else:
                    raise e

        if nbytes > 0:
            self.ticks_left = self.grace

    def open_pipe(self):
        msg('Opening pipe at ' + self.pipe_path)
        try:
            os.stat(self.pipe_path)
        except OSError as e:
            if e.errno != errno.ENOENT:
                raise e
            else:
                os.mkfifo(self.pipe_path, 0o600)

        self.pipe = os.open(self.pipe_path, os.O_RDONLY | os.O_NONBLOCK)
        return self.pipe

    def spawn(self):
        self.child_pid = os.fork()
        if self.child_pid > 0:
            msg('Spawned child process with pid:%d' % self.child_pid)
            return self.child_pid
        elif self.child_pid == 0:
            resource.setrlimit(resource.RLIMIT_CORE,
                               (resource.RLIM_INFINITY, resource.RLIM_INFINITY))
            os.setsid()
            msg("Started child process pid:%d pgid:%d" % (os.getpid(), os.getpgrp()))
            os.putenv('WDOG_PIPE', self.pipe_path)
            os.putenv('WDOG_TIMEOUT', str(self.grace))
            os.execvp(self.args[0], self.args)

        return -1  # not reached

usage_string = """wdog: Runs and monitors a java process

Usage: wdog [-d <PATH>] <TIMEOUT> -- <CMD> <CMD_ARGS>

wdog will run CMD with CMD_ARGS as a child process. And it will expect it
to periodically write to a named pipe whose path it will put in the WDOG_PIPE
environment variable of the child process. If the child goes TIMEOUT seconds
without writing to the pipe, wdog will deliver a KILL signal to it. The
monitored process can read the timeout interval value from the WDOG_TIMEOUT
environment variable.

If the child exits on its own, wdog will immediately exit with the same exit
status as the child.

Giving the -d option will create a core dump in the given path in the case where
the child is killed due to being unresponsive.
"""


def usage():
    err(usage_string)
    sys.exit(1)


def main():
    program_name = argv.pop(0)

    if len(argv) < 3:
        usage()

    dump_path = None
    if argv[0] == "-d":
        argv.pop(0)
        dump_path = argv[0]
        argv.pop(0)

    if (len(argv) < 3 or argv[1] != "--"):
        usage()

    timeout = 10
    try:
        timeout = int(argv.pop(0))
        argv.pop(0)
    except ValueError:
        usage()

    try:
        import setproctitle
        setproctitle.setproctitle(program_name)
    except ImportError:
        pass

    try:
        os.remove('/var/run/midolman/fast_reboot.file')
    except:
        # Ignore if the file does not exist
        pass

    ProcMon(timeout, dump_path, argv).run()

if __name__ == '__main__':
    main()

#!/bin/bash

# Copyright 2014 Midokura SARL
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# some modules required in the kernel
REQUIRED_MODS="openvswitch gre"

# The first existing directory is used for JAVA_HOME if needed.
JVM_SEARCH_DIRS="/usr/lib/jvm/java-7-openjdk-amd64 \
                 /usr/lib/jvm/java-7-openjdk \
                 /usr/lib/jvm/java-7-sun"


##############################################################

SKIP_THROUGHPUT=0
SKIP_IO=0
MIDO_EXTRA_JARS=

usage() {
    cat <<EOF

mm-tests

Basic:
  --skip-throughput  do not run throughput tests
  --skip-io          do not run IO tests
  --cp               additional jars to prepend to CLASSPATH

Troubleshooting:
  --verbose | -v             run in verbose mode
EOF
}

while [ $# -gt 0 ] ; do
    case "$1" in
        --cp)
          MIDO_EXTRA_JARS=$2
          shift
          ;;
        --skip-throughput)
          SKIP_THROUGHPUT=1
          ;;
        --skip-io)
          SKIP_IO=1
          ;;
        --verbose|-v)
          VERBOSE=1
          ;;
        --help|-h)
          usage
          exit 0
          ;;
        *)
          echo "Unknown argument $1"
          usage
          exit 1
          ;;
    esac
    shift
done

#####################################################################

abort() { echo "ABORTING... $1" 1>&2 ; exit 1 ; }

# check this script has enough privileges
[ $EUID -eq 0 ] || abort "this script must be run as root"

# check the openvswitch module is loaded in kernel
for MOD in $REQUIRED_MODS ; do
    lsmod | grep -q $MOD
    if [ $? -ne 0 ] ; then
        echo "INFO: no $MOD module loaded... trying to load"
        modprobe -q $MOD 2>/dev/null
    fi
done

# If JAVA_HOME has not been set, try to determine it.
if [ -z "$JAVA_HOME" ]; then
    # If java is in PATH, use a JAVA_HOME that corresponds to that. This is
    # both consistent with how the upstream startup script works, and how
    # Debian works (read: the use of alternatives to set a system JVM).
    if [ -n "`which java`" ]; then
        java=`which java`
        # Dereference symlink(s)
        while true; do
            if [ -h "$java" ]; then
                java=`readlink "$java"`
                continue
            fi
            break
        done
        JAVA_HOME="`dirname $java`/../"
    # No JAVA_HOME set and no java found in PATH, search for a JVM.
    else
        for jdir in $JVM_SEARCH_DIRS; do
            if [ -x "$jdir/bin/java" ]; then
                JAVA_HOME="$jdir"
                break
            fi
        done
    fi
fi
JAVA="$JAVA_HOME/bin/java"

# If MIDO_HOME has not been set, set it.
if [ -z "$MIDO_HOME" ]; then
   MIDO_HOME=/usr/share/midolman
fi

if [ ! -d "$MIDO_HOME" ]; then
   echo "ERROR: $MIDO_HOME does not exist"
   exit 1
fi

JAVA_LIBRARY_PATH=-Djava.library.path=/lib:/usr/lib
MIDO_BOOTSTRAP_JAR=`ls $MIDO_HOME/dep/midonet-jdk-bootstrap-*.jar`
MIDO_DEP_CLASS_PATH=`echo $MIDO_HOME/dep/* | sed 's/ /:/g'`
MIDO_JAR=`ls $MIDO_HOME/midolman-*.jar 2>/dev/null`
if [ ! -e "$MIDO_JAR" -a -z "$MIDO_EXTRA_JARS" ] ; then
   echo "ERROR: midolman jar does not exist [$MIDO_HOME/midolman-*.jar]"
   exit 1
fi
if [ -n "$MIDO_EXTRA_JARS" ] ; then
	CLASSPATH=$MIDO_EXTRA_JARS:$MIDO_JAR:$MIDO_DEP_CLASS_PATH
else
	CLASSPATH=$MIDO_JAR:$MIDO_DEP_CLASS_PATH
fi

run_test() {
    MAIN=$1
    shift
    echo "Running $MAIN"
    $JAVA -Dlogback.configurationFile=file:/etc/midolman/logback-dpctl.xml\
        $JAVA_LIBRARY_PATH -Xbootclasspath/p:$MIDO_BOOTSTRAP_JAR\
        -cp $CLASSPATH $MAIN $*
    [ $? -eq 0 ] || abort "error when running $MAIN"
}

ns_clean() {
    ip netns list | grep -q "$1" 2>/dev/null
    if [ $? -eq 0 ] ; then
        echo "cleaning namespace $1"
        ip netns exec $1 ip link set lo down
        ip netns delete $1
    fi
}

ns_prepare() {
    ns_clean $@

    echo "preparing namespace $1"
    ip netns add $1 || abort "Could not add namespace $1"
    ip netns exec $1 ip link set dev lo up || abort "Could not bring up $1"
}

if_clean() {
    ns=$1
    dpif=$2
    nsif=$3

    ip link list | grep -q "$dpif" 2>/dev/null
    if [ $? -eq 0 ] ; then
        echo "cleaning interface $2"
        ip netns exec $ns ip link set $nsif
        ip link delete $dpif
    fi
}

if_prepare() {
    if_clean $@

    echo "preparing interface $2"
    ns=$1
    dpif=$2
    nsif=$3
    ipaddr=$4

    ip link add name $dpif type veth peer name $nsif || abort "Could not add interface $dpif"
    ip link set $dpif up
    ip link set $nsif netns $ns
    ip netns exec $ns ip link set $nsif up || abort
    ip netns exec $ns ip address add $ipaddr dev $nsif || abort
}

ovs_integration() {
    class=$1
    echo -e "\nOpenVSwitch integration test with main from $1"

    ns=ovstest-ns
    dpifa=ovstest-foo
    dpifb=ovstest-bar
    dpifc=ovstest-baz

    ns_prepare $ns
    if_prepare $ns $dpifa $dpifa-e 100.0.10.2/24
    if_prepare $ns $dpifb $dpifb-e 100.0.10.3/24
    if_prepare $ns $dpifc $dpifc-e 100.0.10.4/24

    run_test $1

    if_clean $ns $dpifa $dpifa-e
    if_clean $ns $dpifb $dpifb-e
    if_clean $ns $dpifc $dpifc-e
    ns_clean $ns
}

mm_io_upcall_manager_test() {
    echo -e "\nMidolman upcall channel manager test"

    ns=ovstest-ns
    dpifa=ovstest-foo
    dpifb=ovstest-bar
    dpifc=ovstest-baz

    ns_prepare $ns
    if_prepare $ns $dpifa $dpifa-e 100.0.10.2/24
    if_prepare $ns $dpifb $dpifb-e 100.0.10.3/24
    if_prepare $ns $dpifc $dpifc-e 100.0.10.4/24

    run_test "org.midonet.midolman.io.UpcallChannelsTest" /etc/midolman/midolman.conf

    if_clean $ns $dpifa $dpifa-e
    if_clean $ns $dpifb $dpifb-e
    if_clean $ns $dpifc $dpifc-e
    ns_clean $ns

}

run_throughput_test() {
    main=$1
    ns=$2
    nsif=$3
    run_test "org.midonet.odp.test."$1 $2 $3
    mm-dpctl --show-dp perftest
    mm-dpctl --delete-dp perftest
}

ovs_throughput() {
    echo -e "\nOpenVSwitch throughput test"

    ns=perft-ns
    dpif=perft-if
    nsif=perft-eth

    ns_prepare $ns
    if_prepare $ns $dpif $nsif 100.0.10.2/24

    echo -e "\nPacket read throughput."
    run_throughput_test OvsPacketReadTest $ns $nsif

    echo -e "\nPacket read & exec throughput test without exec acks."
    run_throughput_test OvsPacketReadExecTest $ns $nsif

    echo -e "\nPacket read & exec throughput test with packet exec acks."
    run_throughput_test OvsPacketReadExecAckTest $ns $nsif

    if_clean $ns $dpif $nsif
    ns_clean $ns
}

ovs_integration "org.midonet.odp.test.OvsIntegrationTest"

if [ $SKIP_IO -eq 0 ] ; then
    ovs_integration "org.midonet.midolman.io.OneSelectorConnectionTest"
    ovs_integration "org.midonet.midolman.io.TwoSelectorsConnectionTest"
    ovs_integration "org.midonet.midolman.io.PoolOfOneConnectionTest"
    ovs_integration "org.midonet.midolman.io.PoolOfTenConnectionTest"
    #ovs_integration "org.midonet.midolman.io.BlockingTransactorTest"
    mm_io_upcall_manager_test
fi

[ $SKIP_THROUGHPUT -eq 0 ] && ovs_throughput


/*
 * Copyright 2015 Midokura SARL
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

apply plugin: 'scala'
apply plugin: 'application'
apply from: "${rootProject.projectDir}/fpm.gradle"
apply from: "${rootProject.projectDir}/git.gradle"

jar {
    manifest {
        attributes 'Implementation-Title': 'MidoNet Cluster',
        'Implementation-Version': version
    }
}

repositories {
    maven { url "http://nexus.opendaylight.org/content/repositories/opendaylight.release/" }
    maven { url "http://nexus.opendaylight.org/content/repositories/public/"  }
}

sourceSets {
    main {
        scala { srcDirs = ['src/main/scala', 'src/main/java'] }
        java { srcDirs = [] }
    }
    test {
        scala { srcDirs = ['src/test/scala', 'src/test/java'] }
        java { srcDirs = [] }
    }
}

dependencies {
    compile project(':cluster:odl-ovsdb:ovsdb'),
            project(':nsdb'),
            project(':midolman'),
            project(':midonet-util'),
            "com.fasterxml.jackson.core:jackson-annotations:2.3.0",
            "com.fasterxml.jackson.core:jackson-core:2.3.0",
            "com.fasterxml.jackson.core:jackson-databind:2.3.0",
            "org.opendaylight.controller:sal.connection:0.1.1",
            "org.opendaylight.controller:sal:0.7.0",
            "org.opendaylight.controller:sal.networkconfiguration:0.0.2",
            "org.opendaylight.controller:clustering.services:0.5.0",
            "equinoxSDK381:org.eclipse.osgi:3.8.1.v20120830-144521",
            "org.opendaylight.ovsdb:ovsdb:0.5.0",
            libraries.metrics,
            libraries.validation,
            libraries.jersey_client,
            libraries.jersey_core,
            libraries.jersey_json,
            libraries.jersey_guice,
            libraries.jersey_server,
            libraries.jackson_jaxrs,
            libraries.jackson_xc,
            libraries.commons_dbcp2,
            libraries.curator_recipes,
            libraries.curator_framework,
            libraries.guava,
            libraries.guice,
            libraries.jetty_server,
            libraries.jetty_servlet,
            libraries.mockit,
            libraries.netty,
            libraries.mysql_jdbc,
            libraries.protobuf,
            libraries.rx,
            libraries.scala,
            libraries.typesafeconf,
            libraries.zookeeper

    testCompile libraries.curator_test,
                libraries.hamcrest_lib,
                libraries.httpclient,
                libraries.mockit,
                libraries.scalatest,
                libraries.sqlite
}

/////////////////////
// PACKAGING TASKS //
/////////////////////

task preparePkg(type: Copy, dependsOn: installApp) {
    from("${buildDir}/install/${project.name}") {
        include "**/*"
        exclude "bin"
        into "/usr/share/midonet-cluster"
    }
    from("conf") {
        into "etc/midonet-cluster"
    }
    from("src/deb/init/midonet-cluster.conf") {
        into "etc/init"
    }
    from("src/deb/init/midonet-cluster-start") {
        into "usr/share/midonet-cluster"
    }
    from("src/deb/init/midonet-cluster-env.sh") {
        into "usr/share/midonet-cluster"
    }
    into "${pkgDestDir}"
    doLast {
        new File("${pkgDestDir}/usr/share/midonet-cluster/lib/${project.name}-${midonetVersion}.jar")
            .renameTo("${pkgDestDir}/usr/share/midonet-cluster/${project.name}-${midonetVersion}.jar")
        new File("${pkgDestDir}/usr/share/midonet-cluster/lib")
            .renameTo("${pkgDestDir}/usr/share/midonet-cluster/dep")
    }
}

task rhel7Prepare(type: Copy, dependsOn: installApp) {
    from("src/rhel7/systemd/midonet-cluster.service") {
        into "usr/lib/systemd/system"
    }
    into "${pkgDestDir}"
}

packaging {
    version = project.debVersion
    maintainer = project.maintainer
    vendor = project.vendor
    url = project.url
    description = "MidoNet's control cluster"
    dependencies = []
    confFiles = ['/etc/midonet-cluster/logback.xml',
                 '/etc/midonet-cluster/midonet-cluster.conf',
                 '/etc/midonet-cluster/midonet-cluster-env.sh']
    fpmOpts = ['-a', 'all',
               '--category', 'network',
               '--url', 'http://www.midonet.org',
               '--epoch', '0']
}

rpm.dependsOn rhel7Prepare
rhel7Prepare.dependsOn preparePkg

debian.dependsOn preparePkg
preparePkg.dependsOn cleanPkg

debian.doFirst {
    project.packaging.version = project.debVersion
    project.packaging.fpmOpts = project.packaging.fpmOpts.clone()
    project.packaging.fpmOpts.addAll([
            '-d', 'java7-runtime-headless',
            '--deb-recommends', 'java7-runtime-headless | java7-runtime',
            '--after-install', "${project.projectDir}/src/deb/control/postinst",
            '--before-install', "${project.projectDir}/src/deb/control/preinst",
            '--after-remove', "${project.projectDir}/src/deb/control/postrm",
            '--before-remove', "${project.projectDir}/src/deb/control/prerm" ])
}

rpm.doFirst {
    project.packaging.version = project.rpmVersion
    project.packaging.iteration = project.rpmRelease
    project.packaging.fpmOpts = project.packaging.fpmOpts.clone()
    project.packaging.fpmOpts.addAll([
            '--after-install', "${project.projectDir}/src/rhel7/control/postinst",
            '--before-install', "${project.projectDir}/src/rhel7/control/preinst",
            '--after-remove', "${project.projectDir}/src/rhel7/control/postrm",
            '--before-remove', "${project.projectDir}/src/rhel7/control/prerm",
            '--depends', 'java'])
}

debian.doLast {
    new File("${buildDir}/install/${project.name}").deleteDir()
}
rpm.doLast {
    new File("${buildDir}/install/${project.name}").deleteDir()
}

mainClassName = "org.midonet.cluster.ClusterNode"

/////////////////////
// EXECUTION TASKS //
/////////////////////

// Runs the cluster daemon, locally. use -Pconf=conf/midonet-cluster.conf to
// start it up pointing at the sample config file in cluster/midonet-cluster/conf -
// Note that the path is relative to the midonet-cluster submodule.
run {
    mainClassName = "org.midonet.cluster.ClusterNode"
    systemProperties System.getProperties()
    if (project.hasProperty("conf")) {
        args = [conf]
    } else {
        args = ["conf/midonet-cluster.conf"]
    }
}

// Runs the Topology API service in stand-alone mode.
// Use -Pconf=conf/midonet-cluster.conf to start it pointing at the sample config file
// in cluster/midonet-cluster/conf
// Note that the path is relative to the midonet-cluster submodule.
task runTopologyApi(type: JavaExec) {
    description = 'Run the Topology API Service - standalone'
    classpath sourceSets.main.runtimeClasspath
    main = "org.midonet.cluster.services.topology.TopologyApiServiceApp"
    if (project.hasProperty("conf")) {
        args = [conf]
    } else {
        args = ["conf/midonet-cluster.conf"]
    }
}

// Runs a topology text-based client that dumps updates made to the topology
// Use -Pconf=conf/topology-client.conf to start it up pointing at the sample
// config file in cluster/midonet-cluster/conf (note that the path is relative to
// the midonet-cluster submodule
task runTopologySnoopy(type: JavaExec) {
    description = 'Run the Topology Snoopy client'
    classpath sourceSets.main.runtimeClasspath
    main = "org.midonet.cluster.tools.TopologySnoopyApp"
    if (project.hasProperty("conf")) {
        args = [conf]
    } else {
        args = ["conf/topology-client.conf"]
    }
}

cobertura {
    coverageSourceDirs << sourceSets.main.java.srcDirs
    coverageSourceDirs << sourceSets.main.scala.srcDirs
}

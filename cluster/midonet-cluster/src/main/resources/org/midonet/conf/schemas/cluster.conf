// Copyright 2015 Midokura SARL
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// MidoNet Cluster configuration schema

cluster {
    schemaVersion : 3

    zookeeper {
        use_new_stack : true
    }

    // The Neutron Importer is the MidoNet cluster service in charge of
    // importing the virtual network configuration from Neutron DB into the
    // MidoNet NSDB.  You can start as many instances of the Neutron Importer
    // as you wish.  The instances will elect a leader that will perform all
    // import tasks.  If the leader dies, any of the passive instances will take
    // over and continue processing the Task queue.
    neutron_importer {
        enabled : false
        enabled_description : """ This property defines whether the Neutron
        Importer is active in this Cluster node. """

        with : "org.midonet.cluster.services.c3po.C3POMinion"
        with_description : """ The implementation of this service.  You
        should not update this value. """

        threads : 1
        threads_description : """ DO NOT CHANGE. """

        delay : 0ms
        delay_description : """ The time that the Importer will wait after
        startup before processing the next task in the Neutron DB. """
        delay_type : "duration"

        period : 1000ms
        period_description : """ The poll interval to query the Neutron DB
        for new import tasks. """
        period_type : "duration"

        connection_string : " "
        connection_string_description : """
        The JDBC connection string to connect to the Neutron DB.  For example:
        jdbc:mysql://192.168.0.1:3306/taskdb
        """

        jdbc_driver_class : "com.mysql.jdbc.Driver"
        jdbc_driver_class_description : """ DO NOT CHANGE. """

        user : " "
        user_description : """ Used in the SQL connection to the Neutron DB."""

        password : " "
        password_description : """
        Used in the SQL connection to the Neutron DB"""
    }

    // DEPRECATED
    //
    // The mido cluster is a legacy service that enables running cluster
    // services embedded in the MidoNet REST API.  You should not need to touch
    // any values here.
    midocluster {
        vxgw_enabled : false
        vxgw_enabled_description : """ """
    }

    // The Heartbeat service is a simple sanity check that will just log a beat
    // in the log files.
    heartbeat {
        enabled : false
        enabled_description : """ Whether the service is enabled. """

        with : "org.midonet.cluster.services.heartbeat.Heartbeat"
        with_description : """ The implementation of this service.  You
        should not update this value. """

        threads : 1
        threads_description : """ DO NOT CHANGE. """

        delay : 0ms
        delay_description : """ The initial delay until the service
        starts beating. """
        delay_type : "duration"

        period : 1000ms
        period_description : """ The interval between beats. """
        period_type : "duration"
    }

    // The VxLAN Gateway Service performs management functions implementing
    // L2 Gateways over VxLAN among MidoNet and physical VTEPs.  This
    // service takes care of managing the physical VTEPs synchronising state
    // among virtual Networks and the VTEP's OVSDB tables.
    //
    // Enable this service if you want this cluster node to participate in
    // VTEP management functions.  You may enable as many cluster nodes to run
    // the VxGW service.  The instances will self-coordinate electing a leader
    // that will manage all VTEPs added to MidoNet.  The rest of instances will
    // remain passive, and elect a new leader should the first one fail.
    vxgw {
        enabled : false
        enabled_description : """ Whether the VxLAN Gateway Service runs
        within this Cluster node. """

        with : "org.midonet.cluster.services.vxgw.VxlanGatewayService"
        with_description : """ The implementation of this service.  You
        should not update this value. """
    }

    // The Topology API is a service that exposes the MidoNet topology via
    // RPC, using raw TCP or WebSockets (or both).  The API allows
    // retrieving, as well as subscribing to changes in the model subscription
    // to changes.  You can run as many instances of the Topology API service
    // as you want accross your deployment.
    topology_api {
        enabled : false
        enabled_description : """ Whether this Cluster node runs an instance
        of the Topology API service. """

        with : "org.midonet.cluster.services.topology.TopologyApiService"
        with_description : """ The implementation of this service.  You
        should not update this value. """

        socket_enabled : false
        socket_enabled_description : """ Whether the plain TCP socket
        interface is enabled on this instance. """

        port : 8088
        port_description : """ Port to use for the TCP socket. """

        ws_enabled : false
        ws_enabled_description : """ Whether the WebSockets interface is
        enabled in this instance. """

        ws_port : 8080
        ws_port_description : """ Port to use for the WebSockets instance """

        ws_path : "/websocket"
        ws_path_description : """ Segment of the URI at which the interface
        is available (e.g., localhost:8080/websocket """

        session_grace_period : 180s
        session_grace_period_description : """ This is the time that a
        session will survive after an unexpected disconnection from the client.
        """
        session_grace_period_type : "duration"

        session_buffer_size : 4096
        session_buffer_size_description : """ During a transient
        disconnection of a session, the Topology API will cache as many messages
        to the client as determined in this buffer size.  When the client
        reconnects, all of them will be sent. """
    }

    // Snoopy is a client for the topology API that monitors and logs all
    // changes in the topology. It may connect using plain sockets or a
    // websocket protocol. Snoopy is intended to be used as a troubleshooting
    // tool.
    snoopy {
        host : "localhost"
        host_description : """ The IP/host at which the Topology API is
        running (if it's running within the same cluster node, use localhost)
        """

        port : 8088
        port_description : """ The port at which the API is available """

        ws_path : " "
        ws_path_description : """ The segment of the WebSockets endpoint.  If
        not set it will assume that the API is at a TCP socket endpoint. """
    }

    // The Configuration API allows manipulating the centralized
    // configuration of MidoNet using HTTP verbs.
    conf_api {
        enabled : true
        enabled_description : """ Whether the API runs within this Cluster
        node """

        with : "org.midonet.cluster.services.conf.ConfMinion"
        with_description : """ The implementation of this service.  You
        should not update this value. """

        http_port: 8459
        http_port_description : """ Port at which the API will be exposed """
    }

    // This service offers a MidoNet REST API.
    rest_api {
        enabled : true
        enabled_description : """ Whether the API runs in this cluster node."""

        with : "org.midonet.cluster.services.rest_api.Vladimir"
        with_description : """ The implementation of this service.  You
        should not update this value. """

        http_port: 8181
        http_port_description : """ The port at which the API will be
        exposed."""
    }

}

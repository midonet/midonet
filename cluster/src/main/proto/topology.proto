//
// Copyright 2014 Midokura SARL
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

import "commons.proto";

package org.midonet.cluster.models;
option java_package = "org.midonet.cluster.models";
option java_outer_classname = "Topology";

// One per type
enum Type {
    NETWORK = 1;
    ROUTER = 2;
    PORT = 3;
    PORT_GROUP = 4;
    PORT_SET = 5;
    IP_ADDR_GROUP = 6;
    CHAIN = 7;
    ROUTE = 8;
    TUNNEL_ZONE = 9;
    VTEP = 10;
    VTEP_BINDING = 11;
    HOST = 12;
    HOST_INTERFACE_PORT = 13;
}

message Network {
    // Neutron / MidoNet common attributes
    optional UUID id = 1;
    optional string tenant_id = 2;
    optional string name = 3;
    optional bool admin_state_up = 4;

    // MidoNet-specific fields
    optional uint32 tunnel_key = 5;
    optional UUID inbound_filter_id = 6;
    optional UUID outbound_filter_id = 7;
    optional UUID vxlan_port_id = 8;

    // Back references
    repeated UUID port_ids = 101;
}

message Router {
    optional UUID id = 1;
    optional string tenant_id = 2;
    optional string name = 3;
    optional bool admin_state_up = 4;
    optional UUID inbound_filter_id = 5;
    optional UUID outbound_filter_id = 6;
    optional UUID load_balancer_id = 7;

    // Back references
    repeated UUID port_ids = 101;
}

message Port {
    optional UUID id = 1;
    optional UUID network_id = 2;  // Separate device id fields for ORM.
    optional UUID router_id = 3;
    optional UUID inbound_filter_id = 4;
    optional UUID outbound_filter_id = 5;
    optional int32 tunnel_key = 6;
    optional UUID peer_id = 7;
    optional UUID vif_id = 8;
    optional UUID host_id = 9;
    optional string interface_name = 10;
    optional bool admin_state_up = 11 [default = true];

    repeated UUID port_group_id = 12;

    // interior bridge port specific
    optional uint32 vlan_id = 13;

    // router port specific
    optional string network_address = 14;
    optional uint32 network_length = 15;
    optional string port_address = 16;
    optional string port_mac = 17;

    // vxlan port specific - TODO: should we nest instead?
    optional string vxlan_mgmt_ip = 18;
    optional uint32 vxlan_mgmt_port = 19;
    optional uint32 vxlan_vni = 20;
    optional UUID vxlan_tunnel_zone_id = 21;

    // Back references
    repeated UUID rule_ids = 101;
    repeated UUID port_ids = 102;
}

message PortGroup {
    optional UUID id = 1;
    optional string name = 2;
    optional string tenant_id = 3;

    // Back references
    repeated UUID port_ids = 101;
}

message PortSet {
    optional UUID id = 1;
}

message IpAddrGroup {
    optional UUID id = 1;
    optional string name = 2;
}

message Chain {
    optional UUID id = 1;
    optional string name = 2;

    // Back references
    repeated UUID rule_ids = 101;
    repeated UUID network_ids = 102;
    repeated UUID router_ids = 103;
    repeated UUID port_ids = 104;
}

message Route {
    optional UUID id = 1;
    optional string src_network_addr = 2;
    optional int32 src_network_length = 3;
    optional string dst_network_addr = 4;
    optional int32 dst_network_length = 5;
    enum NextHop {
        BLACKHOLE = 0;
        REJECT = 1;
        PORT = 2;
        LOCAL = 3;
    }
    optional NextHop next_hop = 6;
    optional UUID next_hop_port_id = 7;
    optional string next_hop_gateway = 8;
    optional int32 weight = 9;
    optional string attributes = 10;
    optional UUID router_id = 11;
}

message Rule {
    optional UUID id = 1;
    enum Action {
        ACCEPT = 1;
        CONTINUE = 2;
        DROP = 3;
        JUMP = 4;
        REJECT = 5;
        RETURN = 6;
    }
    optional Action action = 2;
    optional UUID chain_id = 3;

    // Rule conditions.
    optional bool conjunction_inv = 4;
    optional bool match_forward_flow = 5;
    optional bool match_return_flow = 6;
    repeated UUID in_port_ids = 7;
    optional bool in_port_inv = 8;
    repeated UUID out_port_ids = 9;
    optional bool out_port_inv = 10;
    optional UUID port_group_id = 11;
    optional bool inv_port_group = 12;
    optional UUID ip_addr_group_id_src = 13;
    optional bool inv_ip_addr_group_id_src = 14;
    optional UUID ip_addr_group_id_dst = 15;
    optional bool inv_ip_addr_group_id_dst = 16;
    optional int32 dl_type = 17;
    optional bool inv_dl_type = 18;
    optional string dl_src = 19;
    optional int64 dl_src_mask = 20 [default = -1];  // Top 16 bits ignored.
    optional bool inv_dl_src = 21;
    optional string dl_dst = 22;
    optional int64 dl_dst_mask =  23 [default = -1];  // Top 16 bits ignored.
    optional bool inv_dl_dst = 24;
    optional int32 nw_tos = 25;
    optional bool nw_tos_inv = 26;
    optional int32 nw_proto = 27;
    optional bool nw_proto_inv = 28;
    optional IPSubnet nw_src_ip = 29;
    optional IPSubnet nw_dst_ip = 30;
    optional Int32Range tp_src = 31;
    optional Int32Range tp_dst = 32;
    optional bool nw_src_inv = 33;
    optional bool nw_dst_inv = 34;
    optional bool tp_src_inv = 35;
    optional bool tp_dst_inv = 36;
}

message TunnelZone {
    optional UUID id = 1;
    optional string name = 2;
    enum Type {
        GRE = 1;
        VXLAN = 2;
    }
    optional Type type = 3;
}

message Vtep {
    optional string id = 1;  // This is actually an IP address.
    optional uint32 management_port = 2;
    optional UUID tunnel_zone_id = 3;
}

message VtepBinding {
    optional string port_name = 1;
    optional uint32 vlan_id = 2;    // A VLAN ID is a short int.
    optional string network_id = 3;
}

message Host {
    optional UUID id = 1;
    optional string name = 2;
    optional bool alive = 3;
    repeated string addresses = 4; // IP addrs
    optional int32 flooding_proxy_weight = 5;
}

message HostInterfacePort {
    optional string id = 1;
    optional UUID host_id = 2;
    optional UUID port_id = 3;
    optional string interface_name = 4;
}

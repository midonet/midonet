//
// Copyright 2015 Midokura SARL
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

import "commons.proto";

package org.midonet.cluster.models;
option java_package = "org.midonet.cluster.models";
option java_outer_classname = "Topology";

// One per type
enum Type {
    CHAIN = 1;
    HOST = 2;
    IP_ADDR_GROUP = 3;
    NETWORK = 4;
    PORT = 5;
    PORT_GROUP = 6;
    ROUTE = 7;
    ROUTER = 8;
    RULE = 9;
    TUNNEL_ZONE = 10;
    VTEP = 11;
    VTEP_BINDING = 12;
    DHCP=13;
}

message Network {
    // Neutron / MidoNet common attributes
    optional UUID id = 1;
    optional string tenant_id = 2;
    optional string name = 3;
    optional bool admin_state_up = 4;

    // MidoNet-specific fields
    optional uint64 tunnel_key = 5;
    optional UUID inbound_filter_id = 6;
    optional UUID outbound_filter_id = 7;

    // Backreferences
    repeated UUID port_ids = 101;
    repeated UUID vxlan_port_ids = 102;
    repeated UUID dhcp_ids = 103;
}

message Dhcp {
    optional UUID id = 1;
    optional UUID network_id = 2;
    optional IPSubnet subnet_address = 3;
    optional IPAddress server_address = 4;
    repeated IPAddress dns_server_address = 5;
    optional IPAddress default_gateway = 6;
    optional int32 interface_mtu = 7;

    message Opt121Route {
        optional IPSubnet dst_subnet = 1;
        optional IPAddress gateway = 2;
    }
    repeated Opt121Route opt121_routes = 8;

    message Host {
        optional string mac = 1;
        optional IPAddress ip_address = 2;
        optional string name = 3;
    }
    repeated Host hosts = 9;

    optional bool enabled = 10;
}

message Router {
    optional UUID id = 1;
    optional string tenant_id = 2;
    optional string name = 3;
    optional bool admin_state_up = 4;
    optional UUID inbound_filter_id = 5;
    optional UUID outbound_filter_id = 6;
    optional UUID load_balancer_id = 7;
    optional UUID gw_port_id = 8;
    repeated Route routes = 9;

    // Backreferences
    repeated UUID port_ids = 101;
}

message Port {
    optional UUID id = 1;
    optional UUID network_id = 2;  // Separate device id fields for ORM.
    optional UUID router_id = 3;
    optional UUID inbound_filter_id = 4;
    optional UUID outbound_filter_id = 5;
    optional uint64 tunnel_key = 6;
    optional UUID peer_id = 7;
    optional UUID vif_id = 8;
    optional UUID host_id = 9;
    optional string interface_name = 10;
    optional bool admin_state_up = 11 [default = true];

    repeated UUID port_group_ids = 12;

    // Interior bridge port specific
    optional uint32 vlan_id = 13;

    // Router port specific
    optional IPSubnet port_subnet = 14;
    optional IPAddress port_address = 15;
    optional string port_mac = 16;

    // VXLAN port specific
    optional UUID vtep_id = 17;
    // TODO: This should be replaced by vtep_id, and the vni moved to Network
    optional IPAddress vtep_mgmt_ip = 18;
    optional uint32 vtep_mgmt_port = 19;
    optional uint32 vtep_vni = 20;
    optional IPAddress vtep_tunnel_ip = 21;
    optional UUID vtep_tunnel_zone_id = 22;

    // Backreferences
    repeated UUID rule_ids = 101;
    repeated UUID port_ids = 102;
}

message PortGroup {
    optional UUID id = 1;
    optional string name = 2;
    optional string tenant_id = 3;

    // Backreferences
    repeated UUID port_ids = 101;
}

message IpAddrGroup {
    optional UUID id = 1;
    optional string name = 2;

    message IpAddrPorts {
        optional IPAddress ip_address = 1;
        repeated UUID port_id = 2;
    }
    repeated IpAddrPorts ip_addr_ports = 3;

    optional UUID inbound_chain_id = 4;
    optional UUID outbound_chain_id = 5;

    // Backreferences
    repeated UUID rule_ids = 6;
}

message Chain {
    optional UUID id = 1;
    optional string name = 2;

    // Backreferences
    repeated UUID rule_ids = 101;
    repeated UUID network_ids = 102;
    repeated UUID router_ids = 103;
    repeated UUID port_ids = 104;
}

message Route {
    optional UUID id = 1;
    optional IPSubnet src_subnet = 2;
    optional IPSubnet dst_subnet = 3;
    enum NextHop {
        BLACKHOLE = 0;
        REJECT = 1;
        PORT = 2;
        LOCAL = 3;
    }
    optional NextHop next_hop = 4;
    optional UUID next_hop_port_id = 5;
    optional IPAddress next_hop_gateway = 6;
    optional int32 weight = 7;
    optional string attributes = 8;
    optional UUID router_id = 9;
}

message Rule {
    optional UUID id = 1;

    enum Type {
        LITERAL_RULE = 1;
        NAT_RULE = 2;
        JUMP_RULE = 3;
        TRACE_RULE = 4;
    }
    optional Type type = 2;
    optional UUID chain_id = 3;

    enum Action {
        ACCEPT = 1;
        CONTINUE = 2;
        DROP = 3;
        JUMP = 4;
        REJECT = 5;
        RETURN = 6;
    }
    optional Action action = 4;

    // Condition fields
    optional bool conjunction_inv = 5;
    optional bool match_forward_flow = 6;
    optional bool match_return_flow = 7;
    repeated UUID in_port_ids = 8;
    optional bool in_port_inv = 9;
    repeated UUID out_port_ids = 10;
    optional bool out_port_inv = 11;
    optional UUID port_group_id = 12;
    optional bool inv_port_group = 13;
    optional UUID ip_addr_group_id_src = 14;
    optional bool inv_ip_addr_group_id_src = 15;
    optional UUID ip_addr_group_id_dst = 16;
    optional bool inv_ip_addr_group_id_dst = 17;
    optional int32 dl_type = 18;
    optional bool inv_dl_type = 19;
    optional string dl_src = 20;
    optional int64 dl_src_mask = 21 [default = -1];  // Top 16 bits ignored.
    optional bool inv_dl_src = 22;
    optional string dl_dst = 23;
    optional int64 dl_dst_mask =  24 [default = -1];  // Top 16 bits ignored.
    optional bool inv_dl_dst = 25;
    optional int32 nw_tos = 26;
    optional bool nw_tos_inv = 27;
    optional int32 nw_proto = 28;
    optional bool nw_proto_inv = 29;
    optional IPSubnet nw_src_ip = 30;
    optional IPSubnet nw_dst_ip = 31;
    optional Int32Range tp_src = 32;
    optional Int32Range tp_dst = 33;
    optional bool nw_src_inv = 34;
    optional bool nw_dst_inv = 35;
    optional bool tp_src_inv = 36;
    optional bool tp_dst_inv = 37;
    optional UUID traversed_device = 38;
    optional bool traversed_device_inv = 39;

    enum FragmentPolicy {
        ANY = 1;
        NONHEADER = 2;
        HEADER = 3;
        UNFRAGMENTED = 4;
    }
    optional FragmentPolicy fragment_policy = 40;
    // end of condition fields

    message JumpRuleData {
        optional UUID jump_to = 1;
        optional string jump_chain_name = 2;
    }
    message NatTarget {
        optional IPAddress nw_start = 1;
        optional IPAddress nw_end = 2;
        optional int32 tp_start = 3;
        optional int32 tp_end = 4;
    }
    message NatRuleData {
        repeated NatTarget nat_targets = 1;
        // True if it's a destination NAT rule, otherwise it's a source NAT rule.
        optional bool dnat = 2;
    }
    oneof rule_data {
        JumpRuleData jump_rule_data = 100;
        NatRuleData nat_rule_data = 101;
    }
}

// Next available ID is: 6
message TunnelZone {
    optional UUID id = 1;
    optional string name = 2;
    enum Type {
        GRE = 1;
        VXLAN = 2;
        VTEP = 3;
    }
    optional Type type = 3;

    message HostToIp {
        optional UUID host_id = 1;
        optional IPAddress ip = 2;
    }
    repeated HostToIp hosts = 4; // Hosts in this zone

    // Tunnel zone member host IDs.
    // Note: ZOOM cannot yet handle referential integrity from / to a nested
    // message field, therefore the information is duplicated here and in the
    // "hosts" field above.
    repeated UUID host_ids = 5;
}

message Vtep {
    optional UUID id = 1;
    optional IPAddress management_ip = 2;
    optional uint32 management_port = 3;
    optional UUID tunnel_zone_id = 4;
    repeated string tunnel_ips = 5;

    repeated UUID bindings = 101;   // A back-ref to VTEP bindings.
}

message VtepBinding {
    optional UUID id = 1;
    optional string port_name = 2;
    optional uint32 vlan_id = 3;    // A VLAN ID is a short int.
    optional UUID network_id = 4;
    optional UUID vtep_id = 5;      // A forward ref to VtEP.
}

// Next available ID: 6
message Host {
    optional UUID id = 1;
    optional string name = 2;
    repeated IPAddress addresses = 3;

    message PortBinding {
        optional UUID port_id = 1;
        optional string interface_name = 2;
    }
    repeated PortBinding port_bindings = 4;
    optional int32 flooding_proxy_weight = 5;

    // Backreference. Expected to be set from the Tunnel Zone side.
    repeated UUID tunnel_zone_ids = 101;
}

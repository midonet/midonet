{
  "comments": [
    {
      "key": {
        "uuid": "fa81d914_f1cce537",
        "filename": "docs/nat-leasing.md",
        "patchSetId": 1
      },
      "lineNbr": 46,
      "author": {
        "id": 1002820
      },
      "writtenOn": "2016-01-18T09:55:07Z",
      "side": 1,
      "message": "Meaning specifying the range? If so, it\u0027s clearer to specify it here.",
      "range": {
        "startLine": 46,
        "startChar": 68,
        "endLine": 46,
        "endChar": 80
      },
      "revId": "19189e4e72e3aaee9fd570fc92beaa519469ff45",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "fa81d914_f49a1313",
        "filename": "docs/nat-leasing.md",
        "patchSetId": 1
      },
      "lineNbr": 46,
      "author": {
        "id": 1002754
      },
      "writtenOn": "2016-01-18T13:35:29Z",
      "side": 1,
      "message": "here we\u0027re interested in the children of the ip directory.",
      "parentUuid": "fa81d914_f1cce537",
      "range": {
        "startLine": 46,
        "startChar": 68,
        "endLine": 46,
        "endChar": 80
      },
      "revId": "19189e4e72e3aaee9fd570fc92beaa519469ff45",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "fa81d914_d1ee018b",
        "filename": "docs/nat-leasing.md",
        "patchSetId": 1
      },
      "lineNbr": 54,
      "author": {
        "id": 1002820
      },
      "writtenOn": "2016-01-18T09:55:07Z",
      "side": 1,
      "message": "..., namely the one with the lowest \u0027Pzxid\u0027.",
      "range": {
        "startLine": 54,
        "startChar": 9,
        "endLine": 54,
        "endChar": 10
      },
      "revId": "19189e4e72e3aaee9fd570fc92beaa519469ff45",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "fa81d914_748623bb",
        "filename": "docs/nat-leasing.md",
        "patchSetId": 1
      },
      "lineNbr": 54,
      "author": {
        "id": 1002754
      },
      "writtenOn": "2016-01-18T13:35:29Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "fa81d914_d1ee018b",
      "range": {
        "startLine": 54,
        "startChar": 9,
        "endLine": 54,
        "endChar": 10
      },
      "revId": "19189e4e72e3aaee9fd570fc92beaa519469ff45",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "fa81d914_3412ebb1",
        "filename": "midolman/src/main/scala/org/midonet/midolman/state/ZkNatBlockAllocator.scala",
        "patchSetId": 1
      },
      "lineNbr": 112,
      "author": {
        "id": 1003555
      },
      "writtenOn": "2016-01-18T12:38:19Z",
      "side": 1,
      "message": "This is strange. It seems to say that if you can\u0027t find a free block, it\u0027ll go a free a block that has been allocated a long time ago, even though this block my still be used.",
      "revId": "19189e4e72e3aaee9fd570fc92beaa519469ff45",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "fa81d914_14e96780",
        "filename": "midolman/src/main/scala/org/midonet/midolman/state/ZkNatBlockAllocator.scala",
        "patchSetId": 1
      },
      "lineNbr": 112,
      "author": {
        "id": 1002754
      },
      "writtenOn": "2016-01-18T13:35:29Z",
      "side": 1,
      "message": "hum.. \"taken\" is a poorly chosen name. it should have been \"created\". in chooseLruBlock we filter out used blocks.",
      "parentUuid": "fa81d914_3412ebb1",
      "revId": "19189e4e72e3aaee9fd570fc92beaa519469ff45",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "fa81d914_2ad0c24f",
        "filename": "midolman/src/main/scala/org/midonet/midolman/state/ZkNatBlockAllocator.scala",
        "patchSetId": 1
      },
      "lineNbr": 112,
      "author": {
        "id": 1003555
      },
      "writtenOn": "2016-01-18T15:23:15Z",
      "side": 1,
      "message": "Hmm, ok. There\u0027s seems to be an easy optimization here then. Instead of /device/ip/block/ownership_node, denote ownership with /device/ip/block. If /device/ip/block exists, the block is in use, if it doesn\u0027t, it is not.\n\nIn fact, /device/ip/block doesn\u0027t even need to be ephemeral. An agent could acquire a block with a multi.\ncreate(/nat/device/ip/block)\nupdate(/nat/owned_blocked/agent_id/device-ip)\n\nThis way, a rebooting agent could reacquire it\u0027s blocks, and recycling could clean up block allocations for agents which have permanently gone away. This isn\u0027t a change for now though.",
      "parentUuid": "fa81d914_14e96780",
      "revId": "19189e4e72e3aaee9fd570fc92beaa519469ff45",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "fa81d914_4a7c1621",
        "filename": "midolman/src/main/scala/org/midonet/midolman/state/ZkNatBlockAllocator.scala",
        "patchSetId": 1
      },
      "lineNbr": 112,
      "author": {
        "id": 1002754
      },
      "writtenOn": "2016-01-18T16:15:11Z",
      "side": 1,
      "message": "I don\u0027t follow. where does /nat/owned_blocked/agent_id/device-ip come from? how would create an ordered list of blocks to pick the least recently used one?",
      "parentUuid": "fa81d914_2ad0c24f",
      "revId": "19189e4e72e3aaee9fd570fc92beaa519469ff45",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "fa81d914_2aed22c4",
        "filename": "midolman/src/main/scala/org/midonet/midolman/state/ZkNatBlockAllocator.scala",
        "patchSetId": 1
      },
      "lineNbr": 112,
      "author": {
        "id": 1003555
      },
      "writtenOn": "2016-01-18T16:38:59Z",
      "side": 1,
      "message": "The idea is that you write 2 znodes. \n\nZnode 1 is /nat/owned_blocked/agent_id/device-ip exists so that gc can see which agents own which blocks without having to do a full scan. It can then clean up for agents which have been down for more than an hour. It also allows a agent to reclaim blocks on reboot. It also removes the need for ephemerals.\n\nZnode 2 is /nat/device_id/ip/block, which claims the block for the agent.\n\nThinking about this more, /nat/device_id/ip/block should be /nat/device_id/ip/block/ownership_node so that backward compatibility is maintained. Which actually removes the optimisation in terms of node count. So actually, it\u0027s not something to be done in this patch.",
      "parentUuid": "fa81d914_4a7c1621",
      "revId": "19189e4e72e3aaee9fd570fc92beaa519469ff45",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "fa81d914_ca048680",
        "filename": "midolman/src/main/scala/org/midonet/midolman/state/ZkNatBlockAllocator.scala",
        "patchSetId": 1
      },
      "lineNbr": 136,
      "author": {
        "id": 1003555
      },
      "writtenOn": "2016-01-18T16:38:59Z",
      "side": 1,
      "message": "If you delete the ownershipPath and the block path in a multi, it means you will only go into chooseLruBlock() when mixing with older agents. Would mean less nodes hanging around if nat sees bursty traffic.\n\nMakes sense especially since there\u0027s only ever one node \nunder block path.",
      "revId": "19189e4e72e3aaee9fd570fc92beaa519469ff45",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "fa81d914_b190aded",
        "filename": "midolman/src/test/scala/org/midonet/midolman/state/ZkNatBlockAllocatorTest.scala",
        "patchSetId": 1
      },
      "lineNbr": 67,
      "author": {
        "id": 1002820
      },
      "writtenOn": "2016-01-18T09:55:07Z",
      "side": 1,
      "message": "shouldBe 1 (and same comment for the should be below.",
      "range": {
        "startLine": 67,
        "startChar": 25,
        "endLine": 67,
        "endChar": 38
      },
      "revId": "19189e4e72e3aaee9fd570fc92beaa519469ff45",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "fa81d914_94fc7740",
        "filename": "midolman/src/test/scala/org/midonet/midolman/state/ZkNatBlockAllocatorTest.scala",
        "patchSetId": 1
      },
      "lineNbr": 67,
      "author": {
        "id": 1002754
      },
      "writtenOn": "2016-01-18T13:35:29Z",
      "side": 1,
      "message": "why??",
      "parentUuid": "fa81d914_b190aded",
      "range": {
        "startLine": 67,
        "startChar": 25,
        "endLine": 67,
        "endChar": 38
      },
      "revId": "19189e4e72e3aaee9fd570fc92beaa519469ff45",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    }
  ]
}
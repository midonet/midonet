#!/bin/bash -x
# Copyright 2015 Midokura SARL
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# This script performs Configure, Build, and Test (CBT) utilities
# on the MDTS subsystem.  It's intended use is on a user's command
# line, where it can manually set up a fully test-able system
# or though a test server (i.e. jenkins) which can call this script
# as part of the automated process

# Set up a var that points to this script's directory
MDTS_ROOT=$( cd `dirname ${BASH_SOURCE[0]}` ; pwd)

# Set up a var that points to the base dir where we will run tests
TEST_ROOT=$MDTS_ROOT/mdts/tests/functional_tests

# Defaults which can be modified via command line args
# Source repository to use if we use git
SOURCE_REPO="midonet/midonet"

# Source branch to use if we use git
SOURCE_BRANCH="master"

# Source directory to use if we use git and/or build from source
SOURCE_DIR="$MDTS_ROOT/../midonet_source"

# Git server to use (default is github.com)
GIT_SERVER="github.com"

# Log into git with SSH?
GIT_SSH=false

# If ssh is on, what user should we log in as?
GIT_SSH_USER=

# Use this for any credentials we need to pass into Git
GIT_CREDENTIALS=

# APT-GET repository if we use the standard package server
REPO_SERVER="repo.midonet.org/midonet/current"

# CURL URI to use to fetch the GPG key for standard repo
REPO_CURL_URI="http://repo.midonet.org/packages.midokura.key"

# Distribution to use for standard package
REPO_DIST="unstable"

# APT-GET repository if we use the artifactory server
ART_SERVER="artifactory-dev.bcn.midokura.com/artifactory/midonet"

# CURL URI to use to fetch the GPG key for artifactory
ART_CURL_URI="http://artifactory-dev.bcn.midokura.com/artifactory/api/gpg/key/public"

# Distribution to use for artifactory package
ART_DIST="nightly"

# Component to use (almost always "main")
PKG_COMP="main"

# Authentication method to package repository
PKG_AUTH_METHOD="http"

# Authentication user to use
PKG_AUTH_USER=

# Authentication password (if needed in plaintext)
PKG_AUTH_PASS=

# Use authentication to  package repository?
PKG_USE_AUTH=false

# Set to 'false" to enable some tweaks which might damage a user's local machine
LOCAL_TEST="true"

# Tests to run exclusively (if set, ONLY run those tests)
TESTS_TO_RUN=

# Tests to exclude (if set run all tests BUT these)
TESTS_TO_EXCLUDE=

# Defaults for internal vars
# Install 3rdparty environment?
INSTALL_ENV=true

# Install MN packages?
INSTALL_PKG=true

# Pull MN from source?
FETCH_SOURCE=true

# Build the MN source?
BUILD_SOURCE=true

# Run the tests?
RUN_TESTS=true

# Start MDTS?
RUN_MDTS=true

# Just print out the commands and don't actually run?
NO_RUN=false

# Default MDTS targets will start MDTS, test, and stop MDTS
MDTS_CMD="start test stop"

# Default location and name of test categories file
TEST_CATEGORY_FILE="$MDTS_ROOT/test_categories"

# Internal vars
PKG_SERVER=
PKG_DIST=
TARGET=
ECHO=

# Helper Functions
function usage() {
    set +x
    if [ ".$1" != "." ]; then
        echo "Error: $1"
    fi
    echo "Usage: mdts_cbt [opts] git <repo> <branch> [-gs <server>] [-ssh]              "
    echo "       mdts_cbt [opts] (source|file) <source_dir>                             "
    echo "       mdts_cbt [opts] (package|artifactory) <uri> <component>                "
    echo "       mdts_cbt [opts] mdts (start|stop|test|clean)                           "
    echo "                                                                              "
    echo " General Options (opts):                                                      "
    echo "       -tr <dir>               Sets the test root to <dir> (defaults to       "
    echo "                               WS/mdts/tests)                                 "
    echo "       -t <tests>              Tests to run against the specified target in   "
    echo "                               quotes (defaults to 'test_bridge' only)        "
    echo "       -tc <test_category>     The category of tests to run, based on the     "
    echo "                               pre-set categories listed in the               "
    echo "                               <test_root>/test_categories file               "
    echo "       -x <tests>              Tests to exclude in run against the specified  "
    echo "                               target in quotes                               "
    echo "       -r                      Test from remote test server (like jenkins) on "
    echo "                               a fresh VM host (versus local machine)         "
    echo "       -ne                     Do not install base system environment         "
    echo "       -nt                     Do not run tests, only fetch/build/install MN  "
    echo "       -n                      Dry run: print commands that would be run but  "
    echo "                               don't proceed                                  "
    echo " Targets: (must specify one and only one):                                    "
    echo "    Target MN in a git repository:                                            "
    echo "       git <repo> <branch>     Use MidoNet found in git repo <repo> on        "
    echo "                               <branch>.                                      "
    echo "       Options:                                                               "
    echo "          -git-server <srv>    Set the GIT hub server to use for source       "
    echo "                               (default is github.com)                        "
    echo "          -git-ssh <user>      Use SSH to connect to GIT server as <user>     "
    echo "          -ni                  Do not install MN packages after building      "
    echo "                               source                                         "
    echo "    Target MN in source code on disk:                                         "
    echo "       source <dir>            Use packages waiting on disk in <dir>          "
    echo "       Options:                                                               "
    echo "          -ni                  Do not install MN packages after building      "
    echo "                               source                                         "
    echo "    Target MN in pre-built packages on disk:                                  "
    echo "       file <dir>              Use packages waiting on disk in <dir>          "
    echo "    Target MN in an apt-get repository:                                       "
    echo "       package <srv> <dst>     Use MidoNet <dst> repository located at <srv>  "
    echo "       artifactory <srv> <dst> Use MidoNet <dst> artifactory product located  "
    echo "                               at <srv>                                       "
    echo "       Options:                                                               "
    echo "          -auth-user <user>    Use authentication to server with user name    "
    echo "                               <user>                                         "
    echo "          -auth-pass <pw>      Use <pw> as password for authentication        "
    echo "          -auth-method <mthd>  Use <mthd> as the authentication method        "
    echo "                               (default is http)                              "
    echo "    Direct control of MDTS subsystem (no other interaction will occur):       "
    echo "       mdts                    Send a command to the MDTS subsytem            "
    echo "       Options:                                                               "
    echo "         start                 Init, boot, and start the MDTS subsystem       "
    echo "         stop                  Shutdown the MDTS subsystem                    "
    echo "         test                  Start the MDTS sybsystem, run tests, then shut "
    echo "                               it down                                        "
    echo "         testd                 Directly run the MDTS tests on the subsystem   "
    echo "         clean                 Stops MDTS and uninstalls MidoNet packages     "
    echo "    Direct control of environment install (no other interaction will occur):  "
    echo "       env                     Setup test environment only                    "
}

function check_and_set() {
    # param1 = var to set
    # param2 = argument line
    #
    # Check that the next argument line string doesn't indicate a new argument (starts
    # with '-') and is present.  If both are true, set the var indicated in param1 to
    # the value and return 0, otherwise don't set and return 1
    VAR=$1
    shift
    if [ $# -eq 0 ]; then
        return 1
    fi

    if printf '%s' $1 | grep -q "^-"; then
        return 1
    fi

    eval $VAR=$1
    return 0
}

function setup_environment() {
    $ECHO cd $MDTS_ROOT

    #Set up the test server with all the tools we'll need to test MidoNet
    if [ ".$INSTALL_ENV" == ".true" ]; then
        $ECHO ./setup_test_server $MDTS_ROOT
    fi
}

function fetch_source_from_git() {
    # Fetch source from a git repository set up beforehand
    $ECHO rm -rf $SOURCE_DIR
    if [ ".$GIT_SSH" == ".true" ]; then
        GIT_CX=$GIT_SSH_USER@$GIT_SERVER:$SOURCE_REPO
    else
        GIT_CX=http://$GIT_SERVER/$SOURCE_REPO
    fi
    echo "Fetching source code from $GIT_CX -b $BRANCH into dir: $DIR"
    $ECHO git clone $GIT_CX -b $SOURCE_BRANCH $SOURCE_DIR
}


function build_source_from_dir {
    # Build the source from a source directory which has been fetched/dl'd
    echo "Will build source from $SOURCE_DIR"
    $ECHO cd $SOURCE_DIR

    $ECHO export LD_LIBRARY_PATH=".:/lib:/usr/lib:/usr/local/lib:./lib"

    $ECHO git submodule update --init --recursive

    # Make sure we are using internal servers for gradle downloads
    if [ -f $MDTS_ROOT/ci-tools/scripts/gradle-use-internal-art ]; then
        $MDTS_ROOT/ci-tools/scripts/gradle-use-internal-art $SOURCE_DIR/build.gradle $SOURCE_DIR/gradle/wrapper/gradle-wrapper.properties
    fi

    # Build midonet source
    $ECHO ./gradlew -x test debian
}

function install_package_from_dir() {
    # Install MN as a package from built or dl'd package files
    echo "Installing midonet packages from all *.deb files in $SOURCE_DIR"
    $ECHO cd $SOURCE_DIR

    for package in `find . -name *.deb`
    do
        $ECHO sudo dpkg --force-confnew -i $package
    done
}

function remove_mn_packages() {
    # CLean pre-installed midolman if present
    if [[ `dpkg -l | grep -q midolman` -eq 0 ]]; then
        mdts_clean mn && true
    fi
}

function install_package_from_repo() {
    # Pull down MN from a repository (standard apt-get repo or artifactory apt-get repo)
    SERVER_LINE="$PKG_AUTH_METHOD://"
    if [ ".$PKG_USE_AUTH" == ".true" ]; then
        SERVER_LINE=$SERVER_LINE"$PKG_AUTH_USER:$PKG_AUTH_PASS@"
    fi
    SERVER_LINE="$SERVER_LINE$PKG_SERVER"

    echo "Installing midonet from pre-built packages at $SERVER_LINE $PKG_DIST $PKG_COMP"

    set -e
    # add midokura apt to sources list
    $ECHO sudo bash -c "echo deb [arch=all] $SERVER_LINE $PKG_DIST $PKG_COMP > /etc/apt/sources.list.d/midokura-midonet.list"
    $ECHO curl -k $CURL_URI | sudo apt-key add - && true


    $ECHO sudo apt-get update

    # Install midolman
    $ECHO sudo apt-get install -y midolman
    $ECHO sudo update-rc.d midolman enable

    $ECHO sudo apt-get install -y python-midonetclient
    $ECHO sudo apt-get -o Dpkg::Options::="--force-confnew" install -y midonet-api
    set +e
}

function mdts_start() {
    # Start the MDTS subsystem via its internal scripts
    if [ ".$RUN_MDTS" == ".true" ]; then
        echo "MDTS is in $MDTS_ROOT (will create if needed)"
        echo "Tests are in $MDTS_ROOT"
        $ECHO cd $MDTS_ROOT/mmm
        # init mmm (sets up files)
        $ECHO sudo ./init

        # 'Boot' MMM namespaces and start the services
        $ECHO cd scripts
        $ECHO sudo ./boot
        $ECHO sudo ./start

        # Wait for all midolman hosts
        if [ ".$NO_RUN" == ".false" ]; then
            RETRIES=30
            CONNECTED=false
            while [ $CONNECTED == "false" ]; do
                if [ `midonet-cli --midonet-url http://localhost:8080/midonet-api -A -e "host list" | wc -l` -eq 3 ]; then
                    CONNECTED=true
                elif [ $RETRIES -eq 0 ]; then
                    echo "Midolman hosts failed to start.  Midonet-API host list:"
                    midonet-cli --midonet-url http://localhost:8080/midonet-api -A -e "host list"
                    sudo $MDTS_ROOT/tools/logs/dump_per_suite_logs.sh
                    exit 1
                else
                    (( RETRIES-- ))
                    sleep 5
                fi
            done
        fi
    fi
}

function mdts_clean_target() {
    # Stop MDTS and/or clean the install
    case $1 in
        "process") # Stop the process
            $ECHO cd $MDTS_ROOT/mmm/scripts
            $ECHO sudo ./stop && true
            $ECHO sudo ./shutdown && true
            $ECHO sudo update-rc.d midolman disable && true
            ;;
        "mn") # Remove MN packages
            $ECHO sudo dpkg -P midolman midonet-api python-midonetclient && true
            ;;
        "conf") # Remove conf files copied by the 'init' step
            $ECHO sudo rm -rf /etc/zookeeper.*
            $ECHO sudo rm -rf /etc/quagga.*
            $ECHO sudo rm -rf /etc/cassandra.*
            $ECHO sudo rm -rf /etc/midolman.*
            $ECHO sudo rm -rf /etc/quagga.*
            ;;
        "logs") # Remove logs in individual log dirs
            $ECHO sudo rm -rf /var/log/zookeeper.*
            $ECHO sudo rm -rf /var/log/quagga.*
            $ECHO sudo rm -rf /var/log/cassandra.*
            $ECHO sudo rm -rf /var/log/midolman.*
            $ECHO sudo rm -rf /var/log/quagga.*
            $ECHO sudo rm -rf /var/log/tomcat7/*
            ;;
        "libs") # Remove the copied libs (keeps the originals)
            $ECHO sudo rm -rf /var/lib/zookeeper.*
            $ECHO sudo rm -rf /var/lib/quagga.*
            $ECHO sudo rm -rf /var/lib/cassandra.*
            $ECHO sudo rm -rf /var/lib/midolman.*
            $ECHO sudo rm -rf /var/lib/quagga.*
            ;;
        *)
            ;;
    esac
}

function mdts_clean() {
    # Clean MDTS based on targets (expand 'all' and 'files' targets)
    if [ ".$1" == "." ]; then
        mdts_clean_target process
    else
        while [ ".$1" != "." ]; do
            if [ ".$1" == ".all" ]; then
                for i in process mn conf logs libs; do
                    mdts_clean_target $i
                done
            elif [ ".$1" == ".files" ]; then
                for i in conf logs libs; do
                    mdts_clean_target $i
                done
            else
                mdts_clean_target $1
            fi
            shift
        done
    fi

}

function mdts_stop() {
    # Stop MDTS subsystem
    if [ ".$RUN_MDTS" == ".true" ]; then
        mdts_clean_target process
    fi
}

function mdts_test() {
    # Run the configured tests using MDTS
    if [ ".$RUN_TESTS" == ".true" ]; then
        $ECHO cd $TEST_ROOT

        # exclude bgp and l2gw tests (bgp and l2gw tests are executed in separate jobs)
        # make sure to tell run_tests to use this MDTS library!
        $ECHO ./run_tests.sh -r $MDTS_ROOT $TESTS_LINE $EXCLUDE_LINE
    fi
}

function print_config_check() {
    # Cute function to print out "We WILL X" or "We will NOT X" depending
    # on whether or not param1 is the string 'true' (X is param2)
    NEG="will NOT"
    if [ "$1" == ".true" ]; then
        NEG="WILL"
    fi
    echo "We $NEG $2"
}

function print-grep() {
    # This helper utility will check if param2 is in param1 and print
    # out 'true' to stdout if it is, 'false' if it is not
    if echo "$1" | grep -q "$2"; then
        echo "true"
        return 0
    fi
    echo "false"
    return 1
}

function print_config() {
    # Print out the configuration and the configured actions
    set +x

    # Print out some useful system config data
    echo "IP interfaces -----"
    ifconfig | grep -A1 'encap:Ethernet' | grep -v "\-\-" | awk '/Ethernet / { printf "%s: ", $1 } /inet / { print $2 }' | sed 's/addr://g'
    echo "-------------------"

    echo "Executing the script as: [`whoami`]"

    echo "Executing at time: [`date`]"

    # Print out set variables
    echo target=$TARGET
    echo install_env=$INSTALL_ENV
    echo git_server=$GIT_SERVER
    echo git_use_ssh=$GIT_SSH
    echo git_ssh_user=$GIT_SSH_USER
    echo git_credentials=$GIT_CREDENTIALS
    echo file_location=$FILE_LOCATION
    echo source_branch=$SOURCE_BRANCH
    echo source_repo=$SOURCE_REPO
    echo install_package=$INSTALL_PKG
    echo pkg_server=$PKG_SERVER
    echo curl_uri=$CURL_URI
    echo pkg_distribution=$PKG_DIST
    echo pkg_component=$PKG_COMP
    echo mdts_root=$MDTS_ROOT
    echo test_root=$TEST_ROOT
    echo test_line=$TESTS_LINE
    echo mdts_target=$MDTS_CMD

    print_config_check .`print-grep "$TARGET" "env" | grep "$INSTALL_ENV"` "install and setup base environment"
    print_config_check .`print-grep "$TARGET" "git"` "fetch MN source from git"
    print_config_check .`print-grep "$TARGET" "source"` "build MN source"
    print_config_check .`print-grep "$TARGET" "file" | grep "$INSTALL_PKG"` "install MN packages"
    print_config_check .`print-grep "$TARGET" "artifactory"` "fetch MN packages from Artifactory"
    print_config_check .`print-grep "$TARGET" "package"` "fetch MN packages from APT-GET repository"
    if [ .`print-grep "$TARGET" "mdts"` == ".true" ]; then
        print_config_check .`print-grep "$MDTS_CMD" "start" | grep "$RUN_MDTS"` "start the MDTS subsystem"
        print_config_check .`print-grep "$MDTS_CMD" "test" | grep "$RUN_TESTS"` "run MDTS functional tests"
        print_config_check .`print-grep "$MDTS_CMD" "stop" | grep "$RUN_MDTS"` "stop the MDTS subsystem"
        print_config_check .`print-grep "$MDTS_CMD" "clean"` "clean the MDTS subsystem"
    fi

    set -x
}


#MAIN

# Pull in variables from test category file
. $TEST_CATEGORY_FILE

# Check all script arguments
while [ ".$1" != "." ]; do
    case $1 in
        # Behavior flags
        -n | --no-run ) # Don't actually run, just print out commands
            NO_RUN="true"
            shift
            ;;

        -r | --remote ) # Turn on certain tweaks which could damage a local machine
            LOCAL_TEST="false"
            shift
            ;;

        -ne | --no-env-install ) # Do not install environment
            INSTALL_ENV="false"
            shift
            ;;

        -ni | --no-install ) # Do not install MN packages
            INSTALL_PKG="false"
            shift
            ;;

        -nt | --no-tests ) # Do not execute the tests
            RUN_TESTS="false"
            shift
            ;;

        -nm | --no-mdts ) # Do not start MDTS
            RUN_MDTS="false"
            shift
            ;;

        -mr | --mdts-root ) # The directory where the MDTS sytem lives
            shift
            if ! check_and_set MDTS_ROOT $*; then
                usage "Invalid directory for mdts_root: $1"
                exit 1
            fi
            shift
            ;;

        # Test setup
        -tr | --test-root ) # The directory where the tests will be run
            shift
            if ! check_and_set TEST_ROOT $*; then
                usage "Invalid directory for test_root: $1"
                exit 1
            fi
            shift
            ;;

        -tc | --test-category ) # Test category to run
            shift
            if ! check_and_set TESTCATEGORY $*; then
                usage "Invalid category for test: $1"
                exit 1
            fi
            echo GATE=$test_category_gate
            NEW_TESTS=$(eval echo \${test_category_$TESTCATEGORY})
            if [ ".$NEW_TESTS" == "." ]; then
                usage "Non-existent test category: $TESTCATEGORY"
                exit 1
            fi

            for test in $NEW_TESTS; do
                TESTS_LINE="$TESTS_LINE -t $test"
            done
            shift
            ;;

        -t | --test ) # Configure which tests to run
            shift
            while check_and_set TESTS_TO_RUN $*; do
                TESTS_LINE="$TESTS_LINE -t $TESTS_TO_RUN"
                shift
            done
            ;;

        -x | --exclude ) # Configure which tests NOT to run
            shift
            while check_and_set TESTS_TO_EXCLUDE $*; do
                EXCLUDE_LINE="$EXCLUDE_LINE -e $TESTS_TO_EXCLUDE"
                shift
            done
            ;;

        # Build and Test target (file, packages, source, etc.)
        "git" | --git ) # Pull MN from git, build, install, run tests
            if [ ".$TARGET" != "." ]; then
                usage "Specified more than one MN target"
                exit 1
            fi
            TARGET="env git source file mdts"
            shift
            check_and_set SOURCE_REPO $* && shift
            check_and_set SOURCE_BRANCH $* && shift
            ;;

        "source" | --source ) # Build source in local dir, install, run tests
            if [ ".$TARGET" != "." ]; then
                usage "Specified more than one MN target"
                exit 1
            fi
            TARGET="env source file mdts"
            shift
            check_and_set SOURCE_DIR $* && shift
            ;;

        "file" | --file ) # Install packages in local dir, run tests
            if [ ".$TARGET" != "." ]; then
                usage "Specified more than one MN target"
                exit 1
            fi
            TARGET="env file mdts"
            shift
            check_and_set SOURCE_DIR $* && shift
            ;;

        "package" | --package ) # Install packages in repo, run tests
            if [ ".$TARGET" != "." ]; then
                usage "Specified more than one MN target"
                exit 1
            fi
            TARGET="env package mdts"
            CURL_URI=$REPO_CURL_URI
            PKG_SERVER=$REPO_SERVER
            PKG_DIST=$REPO_DIST
            shift
            check_and_set PKG_SERVER $* && shift
            check_and_set PKG_DIST $* && shift
            ;;

        "artifactory" | --artifactory ) # Install packages in artifactory, run tests
            if [ ".$TARGET" != "." ]; then
                usage "Specified more than one MN target"
                exit 1
            fi
            TARGET="env artifactory mdts"
            CURL_URI=$ART_CURL_URI
            PKG_SERVER=$ART_SERVER
            PKG_DIST=$ART_DIST
            shift
            check_and_set PKG_SERVER $* && shift
            check_and_set PKG_DIST $* && shift
            ;;

        # Extra flags to tweak GIT bheavior
        -git-server | --git-server ) # Change Git server
            shift
            if ! check_and_set GIT_SERVER $*; then
                usage "Invalid GIT server: $1"
                exit 1
            fi
            shift
            ;;

        -git-cred | --git-credentials ) # Add Git credentials
            shift
            if ! check_and_set GIT_CREDENTIALS $*; then
                usage "Invalid GIT credentials: $1"
                exit 1
            fi
            shift
            ;;

        -git-ssh | --git-ssh ) # Use SSH to connect to Git
            shift
            if ! check_and_set GIT_SSH_USER $*; then
                usage "Invalid GIT ssh user: $1"
                exit 1
            fi
            GIT_SSH=true
            shift
            ;;

        # Authentication for repo access
        -auth-user | --auth-user ) # Set up authentication to repo as user
            shift
            if ! check_and_set PKG_AUTH_USER $*; then
                usage "Invalid user name: $1"
                exit 1
            fi
            PKG_USE_AUTH=true
            shift
            ;;

        -auth-pass | --auth-pass ) # Set passwrod for authentication
            shift
            if ! check_and_set PKG_AUTH_PASS $*; then
                usage "Invalid password: $1"
                exit 1
            fi
            shift
            ;;

        -auth-meth | --auth-meth ) # Set authentication method
            shift
            if ! check_and_set PKG_AUTH_METHOD $*; then
                usage "Invalid authentication method: $1"
                exit 1
            fi
            shift
            ;;

        # Controlling the MDTS subsystem directly
        "mdts" )
            shift
            TARGET="mdts"
            case $1 in
                "start" )
                    MDTS_CMD="start"
                    shift
                    ;;

                "test" )
                    MDTS_CMD="start test stop"
                    shift
                    ;;

                "testd" )
                    MDTS_CMD="test"
                    shift
                    ;;

                "stop" )
                    MDTS_CMD="stop"
                    shift
                    ;;

                "clean" )
                    MDTS_CMD="clean"
                    MDTS_CLEAN_OPTS="process mn"
                    shift
                    ;;

                "cleanall" )
                    MDTS_CMD="clean"
                    MDTS_CLEAN_OPTS="all"
                    shift
                    ;;

                "cleanconfig" )
                    MDTS_CMD="clean"
                    MDTS_CLEAN_OPTS="process files"
                    shift
                    ;;

                *)
                    usage "Must specify a comand to MDTS: start, stop, clean, cleanall, cleanconfig, test, testd"
                    exit 1
                    ;;

            esac
            ;;

        # Controlling the test environment directly
        "env" )
            shift
            TARGET="env"
            ;;

        # Help
        -h | --help )
            usage
            exit
            ;;

        # Catch-all
        * )
            usage "'$1' is not a valid option or parameter"
            exit 1
            ;;
    esac
done

if [ ".$TARGET" == "." ]; then
    usage "Must specify CBT target: git, source, file, package, artifactory; or mdts"
    exit 1
fi

if [ ".$PKG_AUTH_PASS" != "." ]; then
    if [ ".$PKG_AUTH_USER" == "." ]; then
        usage "Must specify user name if password given"
        exit
    fi
fi

# Set up echo to spit out commands instead of running them if dry-run is set
if [ ".$NO_RUN" == ".true" ]; then
    ECHO="echo"
    set +x
fi

print_config

# Remote (i.e. jenkins) test tweaks for speed
if [ ".$LOCAL_TEST" == ".false" ]; then
    # Mounting ramdisks
    sudo cp -RL --preserve=all /var/lib /tmp/
    sudo mkdir -p /var/lib
    sudo mount -t tmpfs -o size=1024m tmpfs /var/lib
    sudo cp -RL --preserve=all /tmp/lib/* /var/lib/
    sudo cp -RL --preserve=all /var/log /tmp/
    sudo mkdir -p /var/log
    sudo mount -t tmpfs -o size=256m tmpfs /var/log
    sudo cp -RL --preserve=all /tmp/log/* /var/log
fi

# git = Source from GIT, fetch, build and install
# source = Source on disk, build and install
# file = Package on disk, install
# package = Package on standard apt-get repo, fetch and install
# artifactory = Package on artifactory apt-get repo, fetch and install

for i in $TARGET; do
    case $i in
        "env")
            setup_environment
            ;;
        "git")
            fetch_source_from_git
            ;;
        "source")
            build_source_from_dir
            ;;
        "file")
            remove_mn_packages
            install_package_from_dir
            ;;
        "package"|"artifactory")
            remove_mn_packages
            install_package_from_repo
            ;;
        "mdts")
            for i in $MDTS_CMD; do
                case $i in
                    "start" )
                        mdts_start
                        ;;
                    "test" )
                        mdts_test
                        ;;
                    "stop" )
                        mdts_stop
                        ;;
                    "clean" )
                        mdts_clean $MDTS_CLEAN_OPTS
                        ;;
                esac
            done
            ;;
    esac
done

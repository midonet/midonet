{
  "comments": [
    {
      "key": {
        "uuid": "baa041b7_db3efd28",
        "filename": "nsdb/src/main/scala/org/midonet/cluster/services/state/client/PersistentConnection.scala",
        "patchSetId": 7
      },
      "lineNbr": 66,
      "author": {
        "id": 1003555
      },
      "writtenOn": "2016-06-14T09:46:14Z",
      "side": 1,
      "message": "Be less specific, all you need is a ScheduledExecutor.",
      "range": {
        "startLine": 66,
        "startChar": 46,
        "endLine": 66,
        "endChar": 73
      },
      "revId": "6385c00cc9dc077aff9fb313d0758722eee4a1f5",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "baa041b7_3b35e9f6",
        "filename": "nsdb/src/main/scala/org/midonet/cluster/services/state/client/PersistentConnection.scala",
        "patchSetId": 7
      },
      "lineNbr": 71,
      "author": {
        "id": 1003555
      },
      "writtenOn": "2016-06-14T09:46:14Z",
      "side": 1,
      "message": "Make this a generic parameter.",
      "range": {
        "startLine": 71,
        "startChar": 21,
        "endLine": 71,
        "endChar": 28
      },
      "revId": "6385c00cc9dc077aff9fb313d0758722eee4a1f5",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "baa041b7_9b575526",
        "filename": "nsdb/src/main/scala/org/midonet/cluster/services/state/client/PersistentConnection.scala",
        "patchSetId": 7
      },
      "lineNbr": 80,
      "author": {
        "id": 1003555
      },
      "writtenOn": "2016-06-14T09:46:14Z",
      "side": 1,
      "message": "add space.",
      "revId": "6385c00cc9dc077aff9fb313d0758722eee4a1f5",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "baa041b7_1b3a25e8",
        "filename": "nsdb/src/main/scala/org/midonet/cluster/services/state/client/PersistentConnection.scala",
        "patchSetId": 7
      },
      "lineNbr": 86,
      "author": {
        "id": 1003555
      },
      "writtenOn": "2016-06-14T09:46:14Z",
      "side": 1,
      "message": "abstract",
      "revId": "6385c00cc9dc077aff9fb313d0758722eee4a1f5",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "baa041b7_fb3e61d9",
        "filename": "nsdb/src/main/scala/org/midonet/cluster/services/state/client/PersistentConnection.scala",
        "patchSetId": 7
      },
      "lineNbr": 92,
      "author": {
        "id": 1003555
      },
      "writtenOn": "2016-06-14T09:46:14Z",
      "side": 1,
      "message": "abstract",
      "revId": "6385c00cc9dc077aff9fb313d0758722eee4a1f5",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "baa041b7_db5ddd49",
        "filename": "nsdb/src/main/scala/org/midonet/cluster/services/state/client/PersistentConnection.scala",
        "patchSetId": 7
      },
      "lineNbr": 107,
      "author": {
        "id": 1003555
      },
      "writtenOn": "2016-06-14T09:46:14Z",
      "side": 1,
      "message": "space between arguments",
      "revId": "6385c00cc9dc077aff9fb313d0758722eee4a1f5",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "baa041b7_db24bdc7",
        "filename": "nsdb/src/main/scala/org/midonet/cluster/services/state/client/PersistentConnection.scala",
        "patchSetId": 7
      },
      "lineNbr": 110,
      "author": {
        "id": 1003555
      },
      "writtenOn": "2016-06-14T09:46:14Z",
      "side": 1,
      "message": "else on same line as }",
      "range": {
        "startLine": 109,
        "startChar": 17,
        "endLine": 110,
        "endChar": 16
      },
      "revId": "6385c00cc9dc077aff9fb313d0758722eee4a1f5",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "baa041b7_1b0b457f",
        "filename": "nsdb/src/main/scala/org/midonet/cluster/services/state/client/PersistentConnection.scala",
        "patchSetId": 7
      },
      "lineNbr": 123,
      "author": {
        "id": 1003555
      },
      "writtenOn": "2016-06-14T09:46:14Z",
      "side": 1,
      "message": "add more info about where it\u0027s connected to, and attemptId, etc",
      "revId": "6385c00cc9dc077aff9fb313d0758722eee4a1f5",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "baa041b7_7b45b1b1",
        "filename": "nsdb/src/main/scala/org/midonet/cluster/services/state/client/PersistentConnection.scala",
        "patchSetId": 7
      },
      "lineNbr": 154,
      "author": {
        "id": 1003555
      },
      "writtenOn": "2016-06-14T09:46:14Z",
      "side": 1,
      "message": "this is specific to the proxy protocol, while the rest of the class isn\u0027t. I would suggest adding another abstract method, getMessagePrototype() or similar.",
      "range": {
        "startLine": 154,
        "startChar": 44,
        "endLine": 154,
        "endChar": 57
      },
      "revId": "6385c00cc9dc077aff9fb313d0758722eee4a1f5",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "baa041b7_9b2e35a4",
        "filename": "nsdb/src/main/scala/org/midonet/cluster/services/state/client/PersistentConnection.scala",
        "patchSetId": 7
      },
      "lineNbr": 157,
      "author": {
        "id": 1003555
      },
      "writtenOn": "2016-06-14T09:46:14Z",
      "side": 1,
      "message": "In the case that the endpoint is unavailable, this will keep adding futures, and recoverWith and future and recoverWith forever. Does anyone actually care about the future returned from connect?",
      "range": {
        "startLine": 157,
        "startChar": 0,
        "endLine": 157,
        "endChar": 63
      },
      "revId": "6385c00cc9dc077aff9fb313d0758722eee4a1f5",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "baa041b7_1b346548",
        "filename": "nsdb/src/main/scala/org/midonet/cluster/services/state/client/PersistentConnection.scala",
        "patchSetId": 7
      },
      "lineNbr": 181,
      "author": {
        "id": 1003555
      },
      "writtenOn": "2016-06-14T09:46:14Z",
      "side": 1,
      "message": "unused",
      "range": {
        "startLine": 181,
        "startChar": 0,
        "endLine": 181,
        "endChar": 70
      },
      "revId": "6385c00cc9dc077aff9fb313d0758722eee4a1f5",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "baa041b7_fb38a13f",
        "filename": "nsdb/src/main/scala/org/midonet/cluster/services/state/client/PersistentConnection.scala",
        "patchSetId": 7
      },
      "lineNbr": 183,
      "author": {
        "id": 1003555
      },
      "writtenOn": "2016-06-14T09:46:14Z",
      "side": 1,
      "message": "you have a race here. state could change from connecting to connected between state.get and state.set. You need to do something like\n\nvar current \u003d state.get\nwhile (!state.set(current, Disconnected)) {\n    current \u003d state.get\n}\n// cleanup of current.",
      "revId": "6385c00cc9dc077aff9fb313d0758722eee4a1f5",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "baa041b7_5b49cd8d",
        "filename": "nsdb/src/main/scala/org/midonet/cluster/services/state/client/PersistentConnection.scala",
        "patchSetId": 7
      },
      "lineNbr": 200,
      "author": {
        "id": 1003555
      },
      "writtenOn": "2016-06-14T09:46:14Z",
      "side": 1,
      "message": "\"ctx\" should be \"connection\". ctx is context.",
      "range": {
        "startLine": 200,
        "startChar": 27,
        "endLine": 200,
        "endChar": 30
      },
      "revId": "6385c00cc9dc077aff9fb313d0758722eee4a1f5",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "baa041b7_1b43456e",
        "filename": "nsdb/src/main/scala/org/midonet/cluster/services/state/client/PersistentConnection.scala",
        "patchSetId": 7
      },
      "lineNbr": 222,
      "author": {
        "id": 1003555
      },
      "writtenOn": "2016-06-14T09:46:14Z",
      "side": 1,
      "message": "I would suggest adding two more states, Init and Dead. Users can only call start() from Init, and when the user stops the persistentConnection, it should go to Dead.\n\nI\u0027d also add a state for AwaitingReconnect.",
      "revId": "6385c00cc9dc077aff9fb313d0758722eee4a1f5",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    }
  ]
}
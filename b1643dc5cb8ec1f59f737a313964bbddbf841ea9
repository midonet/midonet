{
  "comments": [
    {
      "key": {
        "uuid": "7a1969be_8feed6b2",
        "filename": "brain/midonet-brain/src/main/scala/org/midonet/brain/services/c3po/translators/AgentMembershipTranslator.scala",
        "patchSetId": 2
      },
      "lineNbr": 82,
      "author": {
        "id": 1002731
      },
      "writtenOn": "2015-03-02T13:28:11Z",
      "side": 1,
      "message": "Wouldn\u0027t this be done by zoom referential integrity code by itself?",
      "range": {
        "startLine": 74,
        "startChar": 1,
        "endLine": 82,
        "endChar": 76
      },
      "revId": "b1643dc5cb8ec1f59f737a313964bbddbf841ea9",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "7a1969be_08077ccb",
        "filename": "brain/midonet-brain/src/main/scala/org/midonet/brain/services/c3po/translators/AgentMembershipTranslator.scala",
        "patchSetId": 2
      },
      "lineNbr": 82,
      "author": {
        "id": 1002760
      },
      "writtenOn": "2015-03-03T02:14:19Z",
      "side": 1,
      "message": "Two points:\n\n1) ZOOM cannot yet handle referential integrity from/to a nested message field, thus we need to manually delete HostToIp mappings.\n\n2) Which is forward reference and which is backward reference is just a matter of semantics. The references of mutually referencing objects are essentially both forward / backward references. In this example, TunnelZone.host_ids are more of forward reference. We set the reference here, and ZOOM will take care of setting a back reference from Host to TZ. I updated the topology.proto to reflect this.",
      "parentUuid": "7a1969be_8feed6b2",
      "range": {
        "startLine": 74,
        "startChar": 1,
        "endLine": 82,
        "endChar": 76
      },
      "revId": "b1643dc5cb8ec1f59f737a313964bbddbf841ea9",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "7a1969be_ef2caa04",
        "filename": "brain/midonet-brain/src/main/scala/org/midonet/brain/services/c3po/translators/TunnelZoneManager.scala",
        "patchSetId": 2
      },
      "lineNbr": 45,
      "author": {
        "id": 1002731
      },
      "writtenOn": "2015-03-02T13:28:11Z",
      "side": 1,
      "message": "This way of finding the default tz seems quite brittle, why not impose some explicit value that allows us to spot it more reliably? For example, a flag, or even the DEFAULT name used by convention?",
      "range": {
        "startLine": 45,
        "startChar": 8,
        "endLine": 45,
        "endChar": 35
      },
      "revId": "b1643dc5cb8ec1f59f737a313964bbddbf841ea9",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "7a1969be_88736c7f",
        "filename": "brain/midonet-brain/src/main/scala/org/midonet/brain/services/c3po/translators/TunnelZoneManager.scala",
        "patchSetId": 2
      },
      "lineNbr": 45,
      "author": {
        "id": 1002760
      },
      "writtenOn": "2015-03-03T02:14:19Z",
      "side": 1,
      "message": "That\u0027s a good idea, Galo. I added a new field to TunnelZone as neutron_default, and only the TZ created by ConfigTranslator will have the field set to true. I can see the argument that the MidoNet model should be ignorant of Neutron, but such a field appears harmless. Do you want the field to be just \"default\", which, however, I don\u0027t think makes much sense in MidoNet world because MidoNet doesn\u0027t have the notion of \"default\". Other alternatives may be to use the specific name or to assign a fixed UUID.",
      "parentUuid": "7a1969be_ef2caa04",
      "range": {
        "startLine": 45,
        "startChar": 8,
        "endLine": 45,
        "endChar": 35
      },
      "revId": "b1643dc5cb8ec1f59f737a313964bbddbf841ea9",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "7a1969be_a872a846",
        "filename": "brain/midonet-brain/src/main/scala/org/midonet/brain/services/c3po/translators/TunnelZoneManager.scala",
        "patchSetId": 2
      },
      "lineNbr": 45,
      "author": {
        "id": 1002760
      },
      "writtenOn": "2015-03-03T06:35:09Z",
      "side": 1,
      "message": "Discussed with Ryu, and we realized that we could look up the singleton Neutron Config instead to know the default Tunnel Zone ID. It is guaranteed that there exists at most 1 NeutronConfig in ZooKeeper.",
      "parentUuid": "7a1969be_88736c7f",
      "range": {
        "startLine": 45,
        "startChar": 8,
        "endLine": 45,
        "endChar": 35
      },
      "revId": "b1643dc5cb8ec1f59f737a313964bbddbf841ea9",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    }
  ]
}
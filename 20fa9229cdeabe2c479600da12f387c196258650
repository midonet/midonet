{
  "comments": [
    {
      "key": {
        "uuid": "9ad9bd40_756279ae",
        "filename": "cluster/midonet-cluster/src/test/scala/org/midonet/cluster/services/c3po/translators/PortTranslatorTest.scala",
        "patchSetId": 2
      },
      "lineNbr": 1235,
      "author": {
        "id": 1002821
      },
      "writtenOn": "2015-07-14T09:28:16Z",
      "side": 1,
      "message": "midoOps.head.asInstanceOf[Topology.Port].getTunnelKey shouldBe currTunnelKey",
      "range": {
        "startLine": 1231,
        "startChar": 0,
        "endLine": 1235,
        "endChar": 9
      },
      "revId": "20fa9229cdeabe2c479600da12f387c196258650",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9ad9bd40_d54b4529",
        "filename": "nsdb/src/main/scala/org/midonet/cluster/util/SequenceDispenser.scala",
        "patchSetId": 2
      },
      "lineNbr": 74,
      "author": {
        "id": 1002821
      },
      "writtenOn": "2015-07-14T09:28:16Z",
      "side": 1,
      "message": "This seems overengineered. Instead of using a map of SequenceType to string, why not just make the relative counter path (\"agent_tunnel_keys\" or \"vxgw_vni\") an additional property of SequenceType and use that? Then you will provably never get a SequenceType you don\u0027t know what to do with.\n\nYou could even just use the values (\"OVERLAY_TUNNEL_KEY\" and \"VXGW_TUNNEL_KEY\") for the counter names, although that\u0027s not really consistent with the style we\u0027ve been using for ZK paths, so maybe that\u0027s a bad idea.",
      "range": {
        "startLine": 72,
        "startChar": 0,
        "endLine": 74,
        "endChar": 9
      },
      "revId": "20fa9229cdeabe2c479600da12f387c196258650",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9ad9bd40_b513210c",
        "filename": "nsdb/src/main/scala/org/midonet/cluster/util/SequenceDispenser.scala",
        "patchSetId": 2
      },
      "lineNbr": 74,
      "author": {
        "id": 1002751
      },
      "writtenOn": "2015-07-14T09:45:06Z",
      "side": 1,
      "message": "Agree, the enumeration values can also contain the zk path.",
      "parentUuid": "9ad9bd40_d54b4529",
      "range": {
        "startLine": 72,
        "startChar": 0,
        "endLine": 74,
        "endChar": 9
      },
      "revId": "20fa9229cdeabe2c479600da12f387c196258650",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9ad9bd40_b545e118",
        "filename": "nsdb/src/main/scala/org/midonet/cluster/util/SequenceDispenser.scala",
        "patchSetId": 2
      },
      "lineNbr": 84,
      "author": {
        "id": 1002821
      },
      "writtenOn": "2015-07-14T09:28:16Z",
      "side": 1,
      "message": "Do we really want to fail the request because of contention? Why not retry? TrySetCount() will only return false for a BadVersionException due to contention. If there\u0027s some kind of connection error it will throw that exception.\n\nSomething like:\n  var cur \u003d counter.getVersionedValue\n  while (!counter.trySetCount(cur, cur.getValue + 1)) {\n      cur \u003d counter.getVersionedValue\n  }\n  counter.close()\n  Some(cur.getValue + 1)\n\nAlthough the Some isn\u0027t really needed, since now you can take the Option out altogether. Maybe you could put a limit on the number of retries just in case, although I can\u0027t see how this could get stuck in an infinite loop.\n\nI really don\u0027t like having the function return an Option when there\u0027s a possibility of throwing an exception anyway, and no clear justification for treating the Option and Exception cases differently. This complicates things for the caller, as you probably noticed when you had to call it. Maybe just throw an exception if it reaches the retry limit.",
      "range": {
        "startLine": 82,
        "startChar": 0,
        "endLine": 84,
        "endChar": 80
      },
      "revId": "20fa9229cdeabe2c479600da12f387c196258650",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    }
  ]
}
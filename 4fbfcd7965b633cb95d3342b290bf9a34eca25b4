{
  "comments": [
    {
      "key": {
        "uuid": "fa2559ec_4460a235",
        "filename": "cluster/src/main/scala/org/midonet/cluster/data/storage/ZookeeperObjectMapper.scala",
        "patchSetId": 15
      },
      "lineNbr": 172,
      "author": {
        "id": 1002821
      },
      "writtenOn": "2015-01-14T10:48:56Z",
      "side": 1,
      "message": "Why Option? Is there a need for a distinction between a key not being defined in the map vs. being defined as None?",
      "range": {
        "startLine": 172,
        "startChar": 56,
        "endLine": 172,
        "endChar": 62
      },
      "revId": "4fbfcd7965b633cb95d3342b290bf9a34eca25b4",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "fa2559ec_449b82c9",
        "filename": "cluster/src/main/scala/org/midonet/cluster/data/storage/ZookeeperObjectMapper.scala",
        "patchSetId": 15
      },
      "lineNbr": 255,
      "author": {
        "id": 1002821
      },
      "writtenOn": "2015-01-14T06:42:02Z",
      "side": 1,
      "message": "Eh...I don\u0027t know about that. I\u0027m not 100% sure, but I think that the mzxid in second request will always be \u003e\u003d the first one, since you\u0027re querying the same node.\n\nIt may also be worth doing both queries asynchronously and then waiting for them, to reduce the amount of time spent waiting on network latency.\n\nI\u0027m also not terribly keen on doing an extra query for every retrieval. Is having owners something that, in practice, will be restricted to certain classes? Can we indicate that during class registration and skip it for classes that don\u0027t need it?",
      "range": {
        "startLine": 255,
        "startChar": 12,
        "endLine": 255,
        "endChar": 56
      },
      "revId": "4fbfcd7965b633cb95d3342b290bf9a34eca25b4",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "fa2559ec_a4ab5ed5",
        "filename": "cluster/src/main/scala/org/midonet/cluster/data/storage/ZookeeperObjectMapper.scala",
        "patchSetId": 15
      },
      "lineNbr": 269,
      "author": {
        "id": 1002821
      },
      "writtenOn": "2015-01-14T06:42:02Z",
      "side": 1,
      "message": "There are two reasons you can use \u003d\u003d instead of equals() here:\n\n1. In Scala, \u003d\u003d is an alias for equals(), and I think generally preferred.\n2. Pretty sure identity comparisons are fine for class objects anyway.",
      "range": {
        "startLine": 269,
        "startChar": 45,
        "endLine": 269,
        "endChar": 51
      },
      "revId": "4fbfcd7965b633cb95d3342b290bf9a34eca25b4",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "fa2559ec_04b98a2e",
        "filename": "cluster/src/main/scala/org/midonet/cluster/data/storage/ZookeeperObjectMapper.scala",
        "patchSetId": 15
      },
      "lineNbr": 323,
      "author": {
        "id": 1002821
      },
      "writtenOn": "2015-01-14T06:42:02Z",
      "side": 1,
      "message": "You could inline this and save a line of code.",
      "range": {
        "startLine": 323,
        "startChar": 12,
        "endLine": 323,
        "endChar": 39
      },
      "revId": "4fbfcd7965b633cb95d3342b290bf9a34eca25b4",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "fa2559ec_64f846e6",
        "filename": "cluster/src/main/scala/org/midonet/cluster/data/storage/ZookeeperObjectMapper.scala",
        "patchSetId": 15
      },
      "lineNbr": 358,
      "author": {
        "id": 1002821
      },
      "writtenOn": "2015-01-14T06:42:02Z",
      "side": 1,
      "message": "This code is duplicated unnecessarily. There are three different places where you get the class, id, and snapshot, and that could be done just once. You could define this method as update(obj, None, validator) and the other overload as update(obj, Some(owner), validator), and then do the validation inside the private update method.\n\nOr not. No big deal either way.",
      "range": {
        "startLine": 353,
        "startChar": 0,
        "endLine": 358,
        "endChar": 59
      },
      "revId": "4fbfcd7965b633cb95d3342b290bf9a34eca25b4",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "fa2559ec_24ee4e23",
        "filename": "cluster/src/main/scala/org/midonet/cluster/data/storage/ZookeeperObjectMapper.scala",
        "patchSetId": 15
      },
      "lineNbr": 368,
      "author": {
        "id": 1002821
      },
      "writtenOn": "2015-01-14T06:42:02Z",
      "side": 1,
      "message": "What exactly does this mean? The JavaDoc makes it sound like overwrite \u003d true allows you to specify a new owner. But in the actual implementation, the only effect of overwrite seems to be that it allows you to specify owner \u003d x when x is already one of the owners.",
      "range": {
        "startLine": 368,
        "startChar": 44,
        "endLine": 368,
        "endChar": 53
      },
      "revId": "4fbfcd7965b633cb95d3342b290bf9a34eca25b4",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "fa2559ec_c4dc9277",
        "filename": "cluster/src/main/scala/org/midonet/cluster/data/storage/ZookeeperObjectMapper.scala",
        "patchSetId": 15
      },
      "lineNbr": 437,
      "author": {
        "id": 1002821
      },
      "writtenOn": "2015-01-14T06:42:02Z",
      "side": 1,
      "message": "Would it make sense to integrate objCache and ops by giving ObjSnapshot an Op property?",
      "range": {
        "startLine": 437,
        "startChar": 12,
        "endLine": 437,
        "endChar": 40
      },
      "revId": "4fbfcd7965b633cb95d3342b290bf9a34eca25b4",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "fa2559ec_a4d99e85",
        "filename": "cluster/src/main/scala/org/midonet/cluster/data/storage/ZookeeperObjectMapper.scala",
        "patchSetId": 15
      },
      "lineNbr": 443,
      "author": {
        "id": 1002821
      },
      "writtenOn": "2015-01-14T06:42:02Z",
      "side": 1,
      "message": "I\u0027m confused about what\u0027s going on here. If the object already has an owner \"x\", you\u0027re deleting the child named \"x\" and then recreating another child named \"x\"?",
      "range": {
        "startLine": 441,
        "startChar": 0,
        "endLine": 443,
        "endChar": 48
      },
      "revId": "4fbfcd7965b633cb95d3342b290bf9a34eca25b4",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "fa2559ec_04e7ca41",
        "filename": "cluster/src/main/scala/org/midonet/cluster/data/storage/ZookeeperObjectMapper.scala",
        "patchSetId": 15
      },
      "lineNbr": 452,
      "author": {
        "id": 1002821
      },
      "writtenOn": "2015-01-14T06:42:02Z",
      "side": 1,
      "message": "Same question as above, but also, if we\u0027re creating the object, then won\u0027t o contain the create owner op for this owner already? Now we\u0027re creating, deleting, and recreating it in a single transaction, right?",
      "range": {
        "startLine": 450,
        "startChar": 0,
        "endLine": 452,
        "endChar": 48
      },
      "revId": "4fbfcd7965b633cb95d3342b290bf9a34eca25b4",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "fa2559ec_84d1facf",
        "filename": "cluster/src/main/scala/org/midonet/cluster/data/storage/ZookeeperObjectMapper.scala",
        "patchSetId": 15
      },
      "lineNbr": 454,
      "author": {
        "id": 1002821
      },
      "writtenOn": "2015-01-14T10:48:56Z",
      "side": 1,
      "message": "This is the same across all three non-exception cases, so it can be moved out of the match. The only difference is that you\u0027re using NEW_OBJ_VERSION instead of os.version, but since the object is being created this transaction, os.version should be NEW_OBJ_VERSION anyway, right?",
      "range": {
        "startLine": 454,
        "startChar": 20,
        "endLine": 454,
        "endChar": 79
      },
      "revId": "4fbfcd7965b633cb95d3342b290bf9a34eca25b4",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "fa2559ec_e4e39631",
        "filename": "cluster/src/main/scala/org/midonet/cluster/data/storage/ZookeeperObjectMapper.scala",
        "patchSetId": 15
      },
      "lineNbr": 461,
      "author": {
        "id": 1002821
      },
      "writtenOn": "2015-01-14T06:42:02Z",
      "side": 1,
      "message": "Maybe this could be broken out into a helper function explaining what\u0027s going on.",
      "range": {
        "startLine": 460,
        "startChar": 0,
        "endLine": 461,
        "endChar": 48
      },
      "revId": "4fbfcd7965b633cb95d3342b290bf9a34eca25b4",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "fa2559ec_64cfa6b1",
        "filename": "cluster/src/main/scala/org/midonet/cluster/data/storage/ZookeeperObjectMapper.scala",
        "patchSetId": 15
      },
      "lineNbr": 486,
      "author": {
        "id": 1002821
      },
      "writtenOn": "2015-01-14T06:42:02Z",
      "side": 1,
      "message": "This looks copy-pasted from above, except the first clause doesn\u0027t allow this if owners.nonEmpty is true. Is that difference intended? If so, why?",
      "range": {
        "startLine": 476,
        "startChar": 0,
        "endLine": 486,
        "endChar": 13
      },
      "revId": "4fbfcd7965b633cb95d3342b290bf9a34eca25b4",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "fa2559ec_c4c3f288",
        "filename": "cluster/src/main/scala/org/midonet/cluster/data/storage/ZookeeperObjectMapper.scala",
        "patchSetId": 15
      },
      "lineNbr": 520,
      "author": {
        "id": 1002821
      },
      "writtenOn": "2015-01-14T06:42:02Z",
      "side": 1,
      "message": "Is it possible to combine this with the nearly identical code in updateCacheAndOp()? I get that this takes a String and the other takes an Option[String], but you could wrap this string in Some(). I see a couple of other minor differences, but I\u0027m not sure whether they\u0027re reconcilable.",
      "range": {
        "startLine": 488,
        "startChar": 0,
        "endLine": 520,
        "endChar": 13
      },
      "revId": "4fbfcd7965b633cb95d3342b290bf9a34eca25b4",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "fa2559ec_44ba62e2",
        "filename": "cluster/src/main/scala/org/midonet/cluster/data/storage/ZookeeperObjectMapper.scala",
        "patchSetId": 15
      },
      "lineNbr": 546,
      "author": {
        "id": 1002821
      },
      "writtenOn": "2015-01-14T09:50:53Z",
      "side": 1,
      "message": "This comment actually applies to the None case above. We get here when the object doesn\u0027t exist in Zookeeper at all.",
      "range": {
        "startLine": 539,
        "startChar": 0,
        "endLine": 546,
        "endChar": 28
      },
      "revId": "4fbfcd7965b633cb95d3342b290bf9a34eca25b4",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "fa2559ec_24bf6ed2",
        "filename": "cluster/src/main/scala/org/midonet/cluster/data/storage/ZookeeperObjectMapper.scala",
        "patchSetId": 15
      },
      "lineNbr": 551,
      "author": {
        "id": 1002821
      },
      "writtenOn": "2015-01-14T09:50:53Z",
      "side": 1,
      "message": "I believe owner.isEmpty is preferred.",
      "range": {
        "startLine": 551,
        "startChar": 44,
        "endLine": 551,
        "endChar": 57
      },
      "revId": "4fbfcd7965b633cb95d3342b290bf9a34eca25b4",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "fa2559ec_c4949246",
        "filename": "cluster/src/main/scala/org/midonet/cluster/data/storage/ZookeeperObjectMapper.scala",
        "patchSetId": 15
      },
      "lineNbr": 556,
      "author": {
        "id": 1002821
      },
      "writtenOn": "2015-01-14T09:50:53Z",
      "side": 1,
      "message": "ownersToDel would be a bit clearer.",
      "range": {
        "startLine": 556,
        "startChar": 16,
        "endLine": 556,
        "endChar": 22
      },
      "revId": "4fbfcd7965b633cb95d3342b290bf9a34eca25b4",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "fa2559ec_64b046f5",
        "filename": "cluster/src/main/scala/org/midonet/cluster/data/storage/ZookeeperObjectMapper.scala",
        "patchSetId": 15
      },
      "lineNbr": 562,
      "author": {
        "id": 1002821
      },
      "writtenOn": "2015-01-14T09:50:53Z",
      "side": 1,
      "message": "Why do we allow deleting all owners and the object by specifying None in the shared case but not in the exclusive case?",
      "range": {
        "startLine": 561,
        "startChar": 0,
        "endLine": 562,
        "endChar": 30
      },
      "revId": "4fbfcd7965b633cb95d3342b290bf9a34eca25b4",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "fa2559ec_84abba88",
        "filename": "cluster/src/main/scala/org/midonet/cluster/data/storage/ZookeeperObjectMapper.scala",
        "patchSetId": 15
      },
      "lineNbr": 563,
      "author": {
        "id": 1002821
      },
      "writtenOn": "2015-01-14T09:50:53Z",
      "side": 1,
      "message": "For clarity, I think Some(_) would be better. Actually, the Some(o) if ... / None / _ order is a bit counterintuitive. How about Some(o) if ... / Some(_) / _ or None?",
      "range": {
        "startLine": 563,
        "startChar": 21,
        "endLine": 563,
        "endChar": 22
      },
      "revId": "4fbfcd7965b633cb95d3342b290bf9a34eca25b4",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "fa2559ec_6487a610",
        "filename": "cluster/src/main/scala/org/midonet/cluster/data/storage/ZookeeperObjectMapper.scala",
        "patchSetId": 15
      },
      "lineNbr": 576,
      "author": {
        "id": 1002821
      },
      "writtenOn": "2015-01-14T09:50:53Z",
      "side": 1,
      "message": "If you don\u0027t know, partition() does the same as filter + filterNot.\n\nThat aside, the first filter doesn\u0027t look necessary. Owners can be either owner.toSet, whose single member was verified above as being in thisOwners, or owner can be a reference to thisOwners. Either way, thisOwners.filter(owners.contains) is equal to owners.\n\nI think thisOwners.filterNot(owners.contains) can be expressed more clearly as thisOwners - owners, which, again, would be clearer as thisOwners - ownersToDel.",
      "range": {
        "startLine": 573,
        "startChar": 0,
        "endLine": 576,
        "endChar": 61
      },
      "revId": "4fbfcd7965b633cb95d3342b290bf9a34eca25b4",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "fa2559ec_a4787e2c",
        "filename": "cluster/src/main/scala/org/midonet/cluster/data/storage/ZookeeperObjectMapper.scala",
        "patchSetId": 15
      },
      "lineNbr": 581,
      "author": {
        "id": 1002821
      },
      "writtenOn": "2015-01-14T09:50:53Z",
      "side": 1,
      "message": "Unnecessary line break.",
      "range": {
        "startLine": 580,
        "startChar": 20,
        "endLine": 581,
        "endChar": 26
      },
      "revId": "4fbfcd7965b633cb95d3342b290bf9a34eca25b4",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "fa2559ec_441262b5",
        "filename": "cluster/src/main/scala/org/midonet/cluster/data/storage/ZookeeperObjectMapper.scala",
        "patchSetId": 15
      },
      "lineNbr": 593,
      "author": {
        "id": 1002821
      },
      "writtenOn": "2015-01-14T09:50:53Z",
      "side": 1,
      "message": "val ownerOps \u003d o ++ owners.map(TxDeleteOwner)\nval newOwners \u003d thisOwners - owners\n\nActually, since this gets done in three out of four cases, and is cheap enough that it doesn\u0027t matter if you waste the cycles in the fourth case, maybe you could do it up above the match.\n\nAlso, I\u0027m not sure the fourth case should be there anyway (see below).",
      "range": {
        "startLine": 590,
        "startChar": 0,
        "endLine": 593,
        "endChar": 73
      },
      "revId": "4fbfcd7965b633cb95d3342b290bf9a34eca25b4",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "fa2559ec_a43b5e37",
        "filename": "cluster/src/main/scala/org/midonet/cluster/data/storage/ZookeeperObjectMapper.scala",
        "patchSetId": 15
      },
      "lineNbr": 599,
      "author": {
        "id": 1002821
      },
      "writtenOn": "2015-01-14T09:50:53Z",
      "side": 1,
      "message": "newOwners?",
      "range": {
        "startLine": 599,
        "startChar": 63,
        "endLine": 599,
        "endChar": 73
      },
      "revId": "4fbfcd7965b633cb95d3342b290bf9a34eca25b4",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "fa2559ec_04498ad0",
        "filename": "cluster/src/main/scala/org/midonet/cluster/data/storage/ZookeeperObjectMapper.scala",
        "patchSetId": 15
      },
      "lineNbr": 620,
      "author": {
        "id": 1002821
      },
      "writtenOn": "2015-01-14T09:50:53Z",
      "side": 1,
      "message": "Can this happen? In the cases above where we delete all the owners, we put a TxDelete operation in ops and None in objCache. So if ops(key) is a TxDelete, then objCache(key) should be None, as far as I can tell. But if objCache(key) is None, this function should either return early (if ignoreNeo is true) or throw an exception, so we don\u0027t get here.",
      "range": {
        "startLine": 619,
        "startChar": 0,
        "endLine": 620,
        "endChar": 71
      },
      "revId": "4fbfcd7965b633cb95d3342b290bf9a34eca25b4",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "fa2559ec_e41c36c4",
        "filename": "cluster/src/main/scala/org/midonet/cluster/data/storage/ZookeeperObjectMapper.scala",
        "patchSetId": 15
      },
      "lineNbr": 668,
      "author": {
        "id": 1002821
      },
      "writtenOn": "2015-01-14T10:48:56Z",
      "side": 1,
      "message": "thisOwners - owner doesn\u0027t work?",
      "range": {
        "startLine": 668,
        "startChar": 25,
        "endLine": 668,
        "endChar": 49
      },
      "revId": "4fbfcd7965b633cb95d3342b290bf9a34eca25b4",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "fa2559ec_e4739613",
        "filename": "cluster/src/main/scala/org/midonet/cluster/data/storage/ZookeeperObjectMapper.scala",
        "patchSetId": 15
      },
      "lineNbr": 675,
      "author": {
        "id": 1002821
      },
      "writtenOn": "2015-01-14T10:48:56Z",
      "side": 1,
      "message": "Every case either returns this or throws an exception, so you can take this out of each case and move it to the end as:\n\n    objCache(key) \u003d Some(ObjSnapshot(thisObj, thisversion, owners))",
      "range": {
        "startLine": 675,
        "startChar": 20,
        "endLine": 675,
        "endChar": 67
      },
      "revId": "4fbfcd7965b633cb95d3342b290bf9a34eca25b4",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "fa2559ec_64d686c7",
        "filename": "cluster/src/main/scala/org/midonet/cluster/data/storage/ZookeeperObjectMapper.scala",
        "patchSetId": 15
      },
      "lineNbr": 679,
      "author": {
        "id": 1002821
      },
      "writtenOn": "2015-01-14T10:48:56Z",
      "side": 1,
      "message": "o + TxDeleteOwner(owner) should work, I think.",
      "range": {
        "startLine": 679,
        "startChar": 45,
        "endLine": 679,
        "endChar": 75
      },
      "revId": "4fbfcd7965b633cb95d3342b290bf9a34eca25b4",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "fa2559ec_c4dad2e8",
        "filename": "cluster/src/main/scala/org/midonet/cluster/data/storage/ZookeeperObjectMapper.scala",
        "patchSetId": 15
      },
      "lineNbr": 684,
      "author": {
        "id": 1002821
      },
      "writtenOn": "2015-01-14T10:48:56Z",
      "side": 1,
      "message": "Ditto.",
      "range": {
        "startLine": 684,
        "startChar": 50,
        "endLine": 684,
        "endChar": 80
      },
      "revId": "4fbfcd7965b633cb95d3342b290bf9a34eca25b4",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    }
  ]
}
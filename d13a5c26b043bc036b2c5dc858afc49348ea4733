{
  "comments": [
    {
      "key": {
        "uuid": "7a1969be_b746991f",
        "filename": "cluster/src/main/scala/org/midonet/cluster/data/ZoomConvert.scala",
        "patchSetId": 10
      },
      "lineNbr": 33,
      "author": {
        "id": 1002821
      },
      "writtenOn": "2015-02-25T07:55:39Z",
      "side": 1,
      "message": "IDEA doesn\u0027t seem to like these. It wants them fully qualified.",
      "range": {
        "startLine": 33,
        "startChar": 50,
        "endLine": 33,
        "endChar": 63
      },
      "revId": "d13a5c26b043bc036b2c5dc858afc49348ea4733",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "7a1969be_68f71ef6",
        "filename": "cluster/src/main/scala/org/midonet/cluster/data/ZoomConvert.scala",
        "patchSetId": 10
      },
      "lineNbr": 33,
      "author": {
        "id": 1002751
      },
      "writtenOn": "2015-03-02T16:03:08Z",
      "side": 1,
      "message": "That\u0027s strange: here it shouldn\u0027t complain because they are in the same package. For me it doesn\u0027t complain here. Make them fully qualified then?",
      "parentUuid": "7a1969be_b746991f",
      "range": {
        "startLine": 33,
        "startChar": 50,
        "endLine": 33,
        "endChar": 63
      },
      "revId": "d13a5c26b043bc036b2c5dc858afc49348ea4733",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "7a1969be_573805a0",
        "filename": "cluster/src/main/scala/org/midonet/cluster/data/ZoomConvert.scala",
        "patchSetId": 10
      },
      "lineNbr": 78,
      "author": {
        "id": 1002821
      },
      "writtenOn": "2015-02-25T07:55:39Z",
      "side": 1,
      "message": "The second argument to to() is of type Class[_], so this cast doesn\u0027t actually do anything useful, does it?",
      "range": {
        "startLine": 78,
        "startChar": 30,
        "endLine": 78,
        "endChar": 52
      },
      "revId": "d13a5c26b043bc036b2c5dc858afc49348ea4733",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "7a1969be_17596d5a",
        "filename": "cluster/src/main/scala/org/midonet/cluster/data/ZoomConvert.scala",
        "patchSetId": 10
      },
      "lineNbr": 78,
      "author": {
        "id": 1002751
      },
      "writtenOn": "2015-03-02T16:03:08Z",
      "side": 1,
      "message": "Yes, previously it was Class[T], but I changed it. Removed.",
      "parentUuid": "7a1969be_573805a0",
      "range": {
        "startLine": 78,
        "startChar": 30,
        "endLine": 78,
        "endChar": 52
      },
      "revId": "d13a5c26b043bc036b2c5dc858afc49348ea4733",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "7a1969be_373bc99d",
        "filename": "cluster/src/main/scala/org/midonet/cluster/data/ZoomConvert.scala",
        "patchSetId": 10
      },
      "lineNbr": 92,
      "author": {
        "id": 1002821
      },
      "writtenOn": "2015-02-25T07:55:39Z",
      "side": 1,
      "message": "This looks fine, but why the change?",
      "range": {
        "startLine": 92,
        "startChar": 12,
        "endLine": 92,
        "endChar": 25
      },
      "revId": "d13a5c26b043bc036b2c5dc858afc49348ea4733",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "7a1969be_eca03ba1",
        "filename": "cluster/src/main/scala/org/midonet/cluster/data/ZoomConvert.scala",
        "patchSetId": 10
      },
      "lineNbr": 92,
      "author": {
        "id": 1002751
      },
      "writtenOn": "2015-03-02T16:03:08Z",
      "side": 1,
      "message": "I guess that only for consistency with other similar checks.",
      "parentUuid": "7a1969be_373bc99d",
      "range": {
        "startLine": 92,
        "startChar": 12,
        "endLine": 92,
        "endChar": 25
      },
      "revId": "d13a5c26b043bc036b2c5dc858afc49348ea4733",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "7a1969be_3762a9ad",
        "filename": "cluster/src/main/scala/org/midonet/cluster/data/ZoomConvert.scala",
        "patchSetId": 10
      },
      "lineNbr": 132,
      "author": {
        "id": 1002821
      },
      "writtenOn": "2015-02-25T07:55:39Z",
      "side": 1,
      "message": "You can do this a bit more cleanly with a for-comprehension.\n\nval fieldsList \u003d for {\n    field \u003c- clazz.getDeclaredFields\n    zoomField \u003d field.getAnnotation(classOf[ZoomField])\n    if zoomField !\u003d null\n} yield FieldInfo(field, zoomField)\n\nMaybe you could replace the whole do loop with something like this?\n\n        def classStream(clazz: Class[_]): Stream[Class[_]] \u003d {\n            if (clazz \u003d\u003d classOf[ZoomObject]) Stream.empty\n            else clazz #:: classStream(clazz.getSuperclass)\n        }\n\n        classStream(pojoClass).map { clazz \u003d\u003e\n            val fieldsList \u003d for {\n                field \u003c- clazz.getDeclaredFields\n                zoomField \u003d field.getAnnotation(classOf[ZoomField])\n                if zoomField !\u003d null\n            } yield FieldInfo(field, zoomField)\n\n            ClassInfo(clazz,\n                      clazz.getAnnotation(classOf[ZoomClass]),\n                      clazz.getAnnotation(classOf[ZoomOneOf]),\n                      fieldsList)\n        }",
      "range": {
        "startLine": 123,
        "startChar": 0,
        "endLine": 132,
        "endChar": 13
      },
      "revId": "d13a5c26b043bc036b2c5dc858afc49348ea4733",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "7a1969be_92e39d32",
        "filename": "cluster/src/main/scala/org/midonet/cluster/data/ZoomConvert.scala",
        "patchSetId": 10
      },
      "lineNbr": 132,
      "author": {
        "id": 1002751
      },
      "writtenOn": "2015-03-02T16:03:08Z",
      "side": 1,
      "message": "Thanks, but no longer needed (see below).",
      "parentUuid": "7a1969be_3762a9ad",
      "range": {
        "startLine": 123,
        "startChar": 0,
        "endLine": 132,
        "endChar": 13
      },
      "revId": "d13a5c26b043bc036b2c5dc858afc49348ea4733",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "7a1969be_d7e7d510",
        "filename": "cluster/src/main/scala/org/midonet/cluster/data/ZoomConvert.scala",
        "patchSetId": 10
      },
      "lineNbr": 146,
      "author": {
        "id": 1002821
      },
      "writtenOn": "2015-02-25T07:55:39Z",
      "side": 1,
      "message": "This seems a bit overcautious. Don\u0027t we know that pojoClass is a subclass of ZoomObject? If so, aren\u0027t we guaranteed to hit it going up the hierarchy?",
      "range": {
        "startLine": 140,
        "startChar": 0,
        "endLine": 146,
        "endChar": 13
      },
      "revId": "d13a5c26b043bc036b2c5dc858afc49348ea4733",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "7a1969be_f753f136",
        "filename": "cluster/src/main/scala/org/midonet/cluster/data/ZoomConvert.scala",
        "patchSetId": 10
      },
      "lineNbr": 146,
      "author": {
        "id": 1002751
      },
      "writtenOn": "2015-03-02T16:03:08Z",
      "side": 1,
      "message": "This is the condition for breaking out of the loop, when reaching the ZoomObject class. I will rewrite it to a simple if.",
      "parentUuid": "7a1969be_d7e7d510",
      "range": {
        "startLine": 140,
        "startChar": 0,
        "endLine": 146,
        "endChar": 13
      },
      "revId": "d13a5c26b043bc036b2c5dc858afc49348ea4733",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "7a1969be_f7edb1b8",
        "filename": "cluster/src/main/scala/org/midonet/cluster/data/ZoomConvert.scala",
        "patchSetId": 10
      },
      "lineNbr": 177,
      "author": {
        "id": 1002821
      },
      "writtenOn": "2015-02-25T07:55:39Z",
      "side": 1,
      "message": "\"base\" would be a bit clearer.",
      "range": {
        "startLine": 177,
        "startChar": 53,
        "endLine": 177,
        "endChar": 56
      },
      "revId": "d13a5c26b043bc036b2c5dc858afc49348ea4733",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "7a1969be_f2d13158",
        "filename": "cluster/src/main/scala/org/midonet/cluster/data/ZoomConvert.scala",
        "patchSetId": 10
      },
      "lineNbr": 177,
      "author": {
        "id": 1002751
      },
      "writtenOn": "2015-03-02T16:03:08Z",
      "side": 1,
      "message": "Rephrased.",
      "parentUuid": "7a1969be_f7edb1b8",
      "range": {
        "startLine": 177,
        "startChar": 53,
        "endLine": 177,
        "endChar": 56
      },
      "revId": "d13a5c26b043bc036b2c5dc858afc49348ea4733",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "7a1969be_77026170",
        "filename": "cluster/src/main/scala/org/midonet/cluster/data/ZoomConvert.scala",
        "patchSetId": 10
      },
      "lineNbr": 181,
      "author": {
        "id": 1002821
      },
      "writtenOn": "2015-02-25T07:55:39Z",
      "side": 1,
      "message": "Why not:\n\n  for (clazz \u003c- classes.reverse) { ... }",
      "range": {
        "startLine": 179,
        "startChar": 0,
        "endLine": 181,
        "endChar": 22
      },
      "revId": "d13a5c26b043bc036b2c5dc858afc49348ea4733",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "7a1969be_d2d4f548",
        "filename": "cluster/src/main/scala/org/midonet/cluster/data/ZoomConvert.scala",
        "patchSetId": 10
      },
      "lineNbr": 181,
      "author": {
        "id": 1002751
      },
      "writtenOn": "2015-03-02T16:03:08Z",
      "side": 1,
      "message": "I replaced this code according to your suggestion below.",
      "parentUuid": "7a1969be_77026170",
      "range": {
        "startLine": 179,
        "startChar": 0,
        "endLine": 181,
        "endChar": 22
      },
      "revId": "d13a5c26b043bc036b2c5dc858afc49348ea4733",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "7a1969be_572c8502",
        "filename": "cluster/src/main/scala/org/midonet/cluster/data/ZoomConvert.scala",
        "patchSetId": 10
      },
      "lineNbr": 182,
      "author": {
        "id": 1002821
      },
      "writtenOn": "2015-02-25T07:55:39Z",
      "side": 1,
      "message": "It would be clearer to declare this just above the while loop that uses it.",
      "range": {
        "startLine": 182,
        "startChar": 12,
        "endLine": 182,
        "endChar": 25
      },
      "revId": "d13a5c26b043bc036b2c5dc858afc49348ea4733",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "7a1969be_12cfadb1",
        "filename": "cluster/src/main/scala/org/midonet/cluster/data/ZoomConvert.scala",
        "patchSetId": 10
      },
      "lineNbr": 182,
      "author": {
        "id": 1002751
      },
      "writtenOn": "2015-03-02T16:03:08Z",
      "side": 1,
      "message": "Not needed anymore.",
      "parentUuid": "7a1969be_572c8502",
      "range": {
        "startLine": 182,
        "startChar": 12,
        "endLine": 182,
        "endChar": 25
      },
      "revId": "d13a5c26b043bc036b2c5dc858afc49348ea4733",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "7a1969be_d7d195fc",
        "filename": "cluster/src/main/scala/org/midonet/cluster/data/ZoomConvert.scala",
        "patchSetId": 10
      },
      "lineNbr": 192,
      "author": {
        "id": 1002821
      },
      "writtenOn": "2015-02-25T07:55:39Z",
      "side": 1,
      "message": "No need for the else here, since the exception prevents execution from falling through.",
      "range": {
        "startLine": 192,
        "startChar": 17,
        "endLine": 192,
        "endChar": 24
      },
      "revId": "d13a5c26b043bc036b2c5dc858afc49348ea4733",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "7a1969be_72c5418d",
        "filename": "cluster/src/main/scala/org/midonet/cluster/data/ZoomConvert.scala",
        "patchSetId": 10
      },
      "lineNbr": 192,
      "author": {
        "id": 1002751
      },
      "writtenOn": "2015-03-02T16:03:08Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "7a1969be_d7d195fc",
      "range": {
        "startLine": 192,
        "startChar": 17,
        "endLine": 192,
        "endChar": 24
      },
      "revId": "d13a5c26b043bc036b2c5dc858afc49348ea4733",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "7a1969be_f74491b8",
        "filename": "cluster/src/main/scala/org/midonet/cluster/data/ZoomConvert.scala",
        "patchSetId": 10
      },
      "lineNbr": 253,
      "author": {
        "id": 1002821
      },
      "writtenOn": "2015-02-25T07:55:39Z",
      "side": 1,
      "message": "This eats the underlying exception. Is that intended? Maybe add it as the cause of the ConvertException?",
      "range": {
        "startLine": 250,
        "startChar": 20,
        "endLine": 253,
        "endChar": 48
      },
      "revId": "d13a5c26b043bc036b2c5dc858afc49348ea4733",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "7a1969be_f23811a2",
        "filename": "cluster/src/main/scala/org/midonet/cluster/data/ZoomConvert.scala",
        "patchSetId": 10
      },
      "lineNbr": 253,
      "author": {
        "id": 1002751
      },
      "writtenOn": "2015-03-02T16:03:08Z",
      "side": 1,
      "message": "Yes, the same as above. This code is no longer needed though.",
      "parentUuid": "7a1969be_f74491b8",
      "range": {
        "startLine": 250,
        "startChar": 20,
        "endLine": 253,
        "endChar": 48
      },
      "revId": "d13a5c26b043bc036b2c5dc858afc49348ea4733",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "7a1969be_975b9d86",
        "filename": "cluster/src/main/scala/org/midonet/cluster/data/ZoomConvert.scala",
        "patchSetId": 10
      },
      "lineNbr": 256,
      "author": {
        "id": 1002821
      },
      "writtenOn": "2015-02-25T07:55:39Z",
      "side": 1,
      "message": "I don\u0027t think any of this is necessary. When you call getFieldBuilder(\"fieldToBuild\"), it doesn\u0027t just give you a builder of the appropriate type; it actually sets the \"fieldToBuild\" property of the top-level builder to a builder for that field. Then when you call build() on the top-level object, it recursively goes through and builds all the field builders.\n\nI commented out this whole block, and all the tests still passed (after I changed builderInfo to builders.top in the last line).\n\nIt looks like a lot of the design choices here were based around the idea that it was necessary to do this, and that the design can be simplified quite a bit if this isn\u0027t needed (e.g., can we get rid of the builders stack? Can we kill getClasses() and just go back to a recursive implementation?), so I\u0027m going to cut the review short and come back after you get that sorted out.",
      "range": {
        "startLine": 237,
        "startChar": 0,
        "endLine": 256,
        "endChar": 9
      },
      "revId": "d13a5c26b043bc036b2c5dc858afc49348ea4733",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "7a1969be_d23b559a",
        "filename": "cluster/src/main/scala/org/midonet/cluster/data/ZoomConvert.scala",
        "patchSetId": 10
      },
      "lineNbr": 256,
      "author": {
        "id": 1002751
      },
      "writtenOn": "2015-03-02T16:03:08Z",
      "side": 1,
      "message": "Thanks for suggestions.\n\nReverted to the recursive approach, and got rid of the classes cache.",
      "parentUuid": "7a1969be_975b9d86",
      "range": {
        "startLine": 237,
        "startChar": 0,
        "endLine": 256,
        "endChar": 9
      },
      "revId": "d13a5c26b043bc036b2c5dc858afc49348ea4733",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "7a1969be_998476d5",
        "filename": "cluster/src/main/scala/org/midonet/cluster/data/ZoomConvert.scala",
        "patchSetId": 10
      },
      "lineNbr": 491,
      "author": {
        "id": 1002820
      },
      "writtenOn": "2015-02-24T14:31:14Z",
      "side": 1,
      "message": "Shouldn\u0027t we check that it\u0027s not the default converter? The map converter must be custom.",
      "range": {
        "startLine": 491,
        "startChar": 35,
        "endLine": 491,
        "endChar": 54
      },
      "revId": "d13a5c26b043bc036b2c5dc858afc49348ea4733",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "7a1969be_99b75686",
        "filename": "cluster/src/main/scala/org/midonet/cluster/data/ZoomConvert.scala",
        "patchSetId": 10
      },
      "lineNbr": 491,
      "author": {
        "id": 1002751
      },
      "writtenOn": "2015-02-24T15:07:06Z",
      "side": 1,
      "message": "I think the check is redundant, because if we fallback to the default converter, the conversion will fail nonetheless. And even if we check that the converter is not the default converter, there is no guarantee it is a good converter.\n\nTherefore, what good does the extra if do?\n\nBy doing these extra checks (which are not really needed - we would expect the converter to be the good one for well written code), we execute extra instructions and there is a higher probability that the compiler cannot inline this method leading to worse performance.",
      "parentUuid": "7a1969be_998476d5",
      "range": {
        "startLine": 491,
        "startChar": 35,
        "endLine": 491,
        "endChar": 54
      },
      "revId": "d13a5c26b043bc036b2c5dc858afc49348ea4733",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    }
  ]
}
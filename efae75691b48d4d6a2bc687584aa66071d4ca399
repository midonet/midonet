{
  "comments": [
    {
      "key": {
        "uuid": "fa81d914_38e2b203",
        "filename": "midonet-cluster/src/main/scala/org/midonet/cluster/services/c3po/translators/GatewayDeviceTranslator.scala",
        "patchSetId": 1
      },
      "lineNbr": 56,
      "author": {
        "id": 1002821
      },
      "writtenOn": "2016-01-29T05:48:46Z",
      "side": 1,
      "message": "Use devs.exists(_.getDeviceId \u003d\u003d gwDev.getId)",
      "range": {
        "startLine": 56,
        "startChar": 12,
        "endLine": 56,
        "endChar": 57
      },
      "revId": "efae75691b48d4d6a2bc687584aa66071d4ca399",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "fa81d914_98c9de7a",
        "filename": "midonet-cluster/src/main/scala/org/midonet/cluster/services/c3po/translators/GatewayDeviceTranslator.scala",
        "patchSetId": 1
      },
      "lineNbr": 75,
      "author": {
        "id": 1002821
      },
      "writtenOn": "2016-01-29T05:48:46Z",
      "side": 1,
      "message": "Another way to do this, which scales better to large numbers of L2GatewayConnections, is to use Zoom field bindings to give GatewayDevice a list of references to its L2GatewayConnections, which will be automatically updated when an L2GatewayConnection is created or deleted.\n\nOne thing to watch out for with this approach is that Neutron won\u0027t know about GatewayDevice\u0027s list of l2GatewayConnections, so it will send you an updated GatewayDevice with that list empty, which Zoom will interpret as a request to disassociate the GW device from all its connections. To avoid this, you\u0027ll have to override retainHighLevelModel in this class, and in the update case you\u0027d need to get the old GatewayDevice and copy over its list of L2GatewayConnections.",
      "range": {
        "startLine": 75,
        "startChar": 12,
        "endLine": 75,
        "endChar": 30
      },
      "revId": "efae75691b48d4d6a2bc687584aa66071d4ca399",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "fa81d914_f8a57ab5",
        "filename": "midonet-cluster/src/test/scala/org/midonet/cluster/services/c3po/translators/RouterPeeringTranslationIT.scala",
        "patchSetId": 1
      },
      "lineNbr": 119,
      "author": {
        "id": 1002821
      },
      "writtenOn": "2016-01-29T05:48:46Z",
      "side": 1,
      "message": "This doesn\u0027t really make sense for an update, does it?",
      "range": {
        "startLine": 119,
        "startChar": 36,
        "endLine": 119,
        "endChar": 65
      },
      "revId": "efae75691b48d4d6a2bc687584aa66071d4ca399",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "fa81d914_b89b0271",
        "filename": "midonet-cluster/src/test/scala/org/midonet/cluster/services/c3po/translators/RouterPeeringTranslationIT.scala",
        "patchSetId": 1
      },
      "lineNbr": 277,
      "author": {
        "id": 1002821
      },
      "writtenOn": "2016-01-29T05:48:46Z",
      "side": 1,
      "message": "This can be val nId \u003d createTenantNetwork(10). createRouter() doesn\u0027t use this pattern yet, but you could modify it so that it does.",
      "range": {
        "startLine": 277,
        "startChar": 8,
        "endLine": 277,
        "endChar": 36
      },
      "revId": "efae75691b48d4d6a2bc687584aa66071d4ca399",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "fa81d914_f88c9a37",
        "filename": "midonet-cluster/src/test/scala/org/midonet/cluster/services/c3po/translators/RouterPeeringTranslationIT.scala",
        "patchSetId": 1
      },
      "lineNbr": 286,
      "author": {
        "id": 1002821
      },
      "writtenOn": "2016-01-29T05:48:46Z",
      "side": 1,
      "message": "You do this four times, so it might be worth making a helper like checkVtepRouterPortTunnelIp(nwId: UUID, ipAddr: String)",
      "range": {
        "startLine": 284,
        "startChar": 0,
        "endLine": 286,
        "endChar": 58
      },
      "revId": "efae75691b48d4d6a2bc687584aa66071d4ca399",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    }
  ]
}
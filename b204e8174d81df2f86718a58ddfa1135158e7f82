{
  "comments": [
    {
      "key": {
        "uuid": "1a106d94_f774fa68",
        "filename": "netlink/src/main/scala/org.midonet.netlink/NetlinkRequestBroker.scala",
        "patchSetId": 2
      },
      "lineNbr": 125,
      "author": {
        "id": 1003555
      },
      "writtenOn": "2015-05-13T08:57:19Z",
      "side": 1,
      "message": "magic number",
      "revId": "b204e8174d81df2f86718a58ddfa1135158e7f82",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "1a106d94_77980a1c",
        "filename": "netlink/src/main/scala/org.midonet.netlink/NetlinkRequestBroker.scala",
        "patchSetId": 2
      },
      "lineNbr": 125,
      "author": {
        "id": 1002754
      },
      "writtenOn": "2015-05-13T10:38:51Z",
      "side": 1,
      "message": "it\u0027s not magic! it\u0027s a consequence of the way the nextSequence code is written, there\u0027s not good way to capture that in a constant name. the same goes for all the values below that are initialized to 0.",
      "parentUuid": "1a106d94_f774fa68",
      "revId": "b204e8174d81df2f86718a58ddfa1135158e7f82",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "1a106d94_d76f3e90",
        "filename": "netlink/src/main/scala/org.midonet.netlink/NetlinkRequestBroker.scala",
        "patchSetId": 2
      },
      "lineNbr": 132,
      "author": {
        "id": 1003555
      },
      "writtenOn": "2015-05-13T08:57:19Z",
      "side": 1,
      "message": "same magic number",
      "range": {
        "startLine": 132,
        "startChar": 39,
        "endLine": 132,
        "endChar": 40
      },
      "revId": "b204e8174d81df2f86718a58ddfa1135158e7f82",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "1a106d94_579b4e17",
        "filename": "netlink/src/main/scala/org.midonet.netlink/NetlinkRequestBroker.scala",
        "patchSetId": 2
      },
      "lineNbr": 132,
      "author": {
        "id": 1002754
      },
      "writtenOn": "2015-05-13T10:38:51Z",
      "side": 1,
      "message": "idem",
      "parentUuid": "1a106d94_d76f3e90",
      "range": {
        "startLine": 132,
        "startChar": 39,
        "endLine": 132,
        "endChar": 40
      },
      "revId": "b204e8174d81df2f86718a58ddfa1135158e7f82",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "1a106d94_975ae6ef",
        "filename": "netlink/src/main/scala/org.midonet.netlink/NetlinkRequestBroker.scala",
        "patchSetId": 2
      },
      "lineNbr": 219,
      "author": {
        "id": 1003555
      },
      "writtenOn": "2015-05-13T08:57:19Z",
      "side": 1,
      "message": "isAvailable is ambiguous. hasWritePending or something would be clearer. (or even use hasRequestsToWrite from above)",
      "revId": "b204e8174d81df2f86718a58ddfa1135158e7f82",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "1a106d94_374df2c4",
        "filename": "netlink/src/main/scala/org.midonet.netlink/NetlinkRequestBroker.scala",
        "patchSetId": 2
      },
      "lineNbr": 219,
      "author": {
        "id": 1002754
      },
      "writtenOn": "2015-05-13T10:38:51Z",
      "side": 1,
      "message": "this is also checked from the handleRead method; \"available\" sounded like something i could use for both. i can rename it to isPublished, but that\u0027s not correct semantics: old requests are published but not available.",
      "parentUuid": "1a106d94_975ae6ef",
      "revId": "b204e8174d81df2f86718a58ddfa1135158e7f82",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "1a106d94_1766f6ba",
        "filename": "netlink/src/main/scala/org.midonet.netlink/NetlinkRequestBroker.scala",
        "patchSetId": 2
      },
      "lineNbr": 262,
      "author": {
        "id": 1003555
      },
      "writtenOn": "2015-05-13T08:57:19Z",
      "side": 1,
      "message": "what happens when the reader.read() call throws something?",
      "revId": "b204e8174d81df2f86718a58ddfa1135158e7f82",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "1a106d94_b7e722ab",
        "filename": "netlink/src/main/scala/org.midonet.netlink/NetlinkRequestBroker.scala",
        "patchSetId": 2
      },
      "lineNbr": 262,
      "author": {
        "id": 1002754
      },
      "writtenOn": "2015-05-13T10:38:51Z",
      "side": 1,
      "message": "an IOException is propagated to the caller, since we can\u0027t do anything with it or propagate it through the correct observer.",
      "parentUuid": "1a106d94_1766f6ba",
      "revId": "b204e8174d81df2f86718a58ddfa1135158e7f82",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "1a106d94_772f6a3f",
        "filename": "netlink/src/main/scala/org.midonet.netlink/NetlinkRequestBroker.scala",
        "patchSetId": 2
      },
      "lineNbr": 334,
      "author": {
        "id": 1003555
      },
      "writtenOn": "2015-05-13T08:57:19Z",
      "side": 1,
      "message": "just for my own understanding. We\u0027re writing in the order of the nextSequence calls? so if a writer calls nextSequence and never publishes, the whole thing will stall?",
      "range": {
        "startLine": 334,
        "startChar": 8,
        "endLine": 334,
        "endChar": 26
      },
      "revId": "b204e8174d81df2f86718a58ddfa1135158e7f82",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "1a106d94_f704fa4a",
        "filename": "netlink/src/main/scala/org.midonet.netlink/NetlinkRequestBroker.scala",
        "patchSetId": 2
      },
      "lineNbr": 334,
      "author": {
        "id": 1002754
      },
      "writtenOn": "2015-05-13T10:38:51Z",
      "side": 1,
      "message": "yep, that\u0027s how the disruptor works too. not much you can do to prevent that and do pre-allocation :/",
      "parentUuid": "1a106d94_772f6a3f",
      "range": {
        "startLine": 334,
        "startChar": 8,
        "endLine": 334,
        "endChar": 26
      },
      "revId": "b204e8174d81df2f86718a58ddfa1135158e7f82",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    }
  ]
}
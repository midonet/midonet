{
  "comments": [
    {
      "key": {
        "uuid": "baa041b7_47856e08",
        "filename": "midolman/src/main/scala/org/midonet/midolman/host/services/QosService.scala",
        "patchSetId": 1
      },
      "lineNbr": 139,
      "author": {
        "id": 1002751
      },
      "writtenOn": "2016-11-02T12:05:42Z",
      "side": 1,
      "message": "then it could be a debug",
      "range": {
        "startLine": 139,
        "startChar": 20,
        "endLine": 139,
        "endChar": 24
      },
      "revId": "a81d6875d5e91f853d4c3ecb006853bb53d8941f",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "baa041b7_fed2c4d0",
        "filename": "midolman/src/main/scala/org/midonet/midolman/host/services/QosService.scala",
        "patchSetId": 1
      },
      "lineNbr": 139,
      "author": {
        "id": 1002821
      },
      "writtenOn": "2016-11-04T08:03:53Z",
      "side": 1,
      "message": "Debug only shows up when you enable debug logging. In the error case (it completes at some time other than shutdown), we\u0027d want this to be logged even if debug logging isn\u0027t enabled. Is there a way to distinguish between these two cases?",
      "parentUuid": "baa041b7_47856e08",
      "range": {
        "startLine": 139,
        "startChar": 20,
        "endLine": 139,
        "endChar": 24
      },
      "revId": "a81d6875d5e91f853d4c3ecb006853bb53d8941f",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "baa041b7_a5c86f57",
        "filename": "midolman/src/main/scala/org/midonet/midolman/host/services/QosService.scala",
        "patchSetId": 1
      },
      "lineNbr": 174,
      "author": {
        "id": 1002897
      },
      "writtenOn": "2016-11-17T08:46:09Z",
      "side": 1,
      "message": "maybe you can use retryWhen?",
      "range": {
        "startLine": 174,
        "startChar": 20,
        "endLine": 174,
        "endChar": 34
      },
      "revId": "a81d6875d5e91f853d4c3ecb006853bb53d8941f",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "baa041b7_67a752a8",
        "filename": "midolman/src/main/scala/org/midonet/midolman/host/services/QosService.scala",
        "patchSetId": 1
      },
      "lineNbr": 195,
      "author": {
        "id": 1002751
      },
      "writtenOn": "2016-11-02T12:05:42Z",
      "side": 1,
      "message": "could you use an onErrorResumeNext here? something like (it\u0027s pseudocode):\n\n  def hostsObservable(sleep: Int \u003d 1000): Observable[Hosts] \u003d {\n    VTPM.hosts(hostId)\n              .delaySubscription(sleep, TimeUnit.MILLISECONDS)\n              .observeOn(scheduler)\n              .onErrorResumeNext(makeFunc1 { _ match {\n                 case _: NotFoundException \u003d\u003e hostsObservable(sleep * 1.25)\n                 case _ \u003d\u003e Observable.error(e)\n              }})\n  }\n\n  subscription \u003d hostsObservable().subscribe(observer)\n\nIf it doesn\u0027t work, especially to reset the sleep, then leave it as is.",
      "range": {
        "startLine": 195,
        "startChar": 47,
        "endLine": 195,
        "endChar": 67
      },
      "revId": "a81d6875d5e91f853d4c3ecb006853bb53d8941f",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "baa041b7_7e7b54bf",
        "filename": "midolman/src/main/scala/org/midonet/midolman/host/services/QosService.scala",
        "patchSetId": 1
      },
      "lineNbr": 195,
      "author": {
        "id": 1002821
      },
      "writtenOn": "2016-11-04T08:03:53Z",
      "side": 1,
      "message": "We also have to handle the onComplete case, too, right? What\u0027s the benefit of doing it this way?",
      "parentUuid": "baa041b7_67a752a8",
      "range": {
        "startLine": 195,
        "startChar": 47,
        "endLine": 195,
        "endChar": 67
      },
      "revId": "a81d6875d5e91f853d4c3ecb006853bb53d8941f",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    }
  ]
}
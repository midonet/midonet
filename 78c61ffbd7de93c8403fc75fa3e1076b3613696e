{
  "comments": [
    {
      "key": {
        "uuid": "9ab29df4_df20d34b",
        "filename": "tests/mdts/tests/functional_tests/test_basic_neutron.py",
        "patchSetId": 5
      },
      "lineNbr": 110,
      "author": {
        "id": 1002763
      },
      "writtenOn": "2015-11-04T02:08:06Z",
      "side": 1,
      "message": "what are your thoughts on making this yaml based?  For consistency with the mido ones and also because it can become a good way to fire up topologies for manual development / testing / demo.",
      "revId": "78c61ffbd7de93c8403fc75fa3e1076b3613696e",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9ab29df4_0264b4e3",
        "filename": "tests/mdts/tests/functional_tests/test_basic_neutron.py",
        "patchSetId": 5
      },
      "lineNbr": 110,
      "author": {
        "id": 1003318
      },
      "writtenOn": "2015-11-04T08:09:10Z",
      "side": 1,
      "message": "We can schedule a discussion about it in slack or mailing list, I\u0027d also like to hear other opinions but imho, yaml just hides whatever is happening under the hood and makes the framework behave like black magic (hard to get involved).\n\nI was thinking just the opposite :D Also after seeing how Duarte had to hack the yaml system for the scalability tests. \n\nInstead of a yaml layer that complicates the mdts framework, remove the yaml files all together and just rely on how the specific api handles calls (Midonet or Neutron). This will simplify the codebase of mdts A LOT (removing almost everything under the lib directory) at the \"cost\" of using the python APIs directly (which is more explicit) instead of yamls.\n\nIn the examples below, the topology is separated from the test (being still python calls to the corresponding api). If we want to do manual testing and create topologies for a test or demo, we could add a utility (e.g. mdts build-topology topology.py) which just takes the python object specifying the topology and build it (we could have an analogous delete). We could even add calls to the CLIs instead of the python APIs.",
      "parentUuid": "9ab29df4_df20d34b",
      "revId": "78c61ffbd7de93c8403fc75fa3e1076b3613696e",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "7ac7a964_b9f53bcd",
        "filename": "tests/mdts/tests/functional_tests/test_basic_neutron.py",
        "patchSetId": 5
      },
      "lineNbr": 110,
      "author": {
        "id": 1002731
      },
      "writtenOn": "2015-11-05T18:00:04Z",
      "side": 1,
      "message": "I\u0027m not a big fan of the yaml either. In practise, it forces us to have a yaml interpreter..\n\nThe json representations are a good idea IMO because they can be fed directly to the API/translators, not only in tests but simply to set up any topology. Which isn\u0027t the case with yaml (you need the interpreter, the interpreter happens to be tied to mdts and call the api..)",
      "parentUuid": "9ab29df4_0264b4e3",
      "revId": "78c61ffbd7de93c8403fc75fa3e1076b3613696e",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    }
  ]
}
/*
 * Copyright 2014 Midokura SARL
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

apply plugin: 'scala'
apply plugin: 'cpp'
apply plugin: 'google-test-test-suite'

import org.gradle.internal.jvm.Jvm

def JNI_INCLUDE_DIR = "${Jvm.current().getJavacExecutable().getParentFile().getParent()}/include"

// native C++ library (must  be at start of file)
model {
    platforms {
        linux_aarch64 {
            operatingSystem "linux"
            architecture "arm64"
        }
    }
    toolChains {
        gcc(Gcc){
            target("linux_aarch64") {
                cppCompiler.executable = "/usr/bin/gcc"
            }
        }
    }
    repositories {
        libs(PrebuiltLibraries) {
            googleTest {
                headers.srcDir "${gtestHeaderDir}"
                binaries.withType(StaticLibraryBinary) {
                    if (targetPlatform.operatingSystem.linux) {
                        staticLibraryFile =
                                file("${gtestDir}/lib/linux-x86_64/libgtest.a")
                    }
                    if (targetPlatform.operatingSystem.macOsX) {
                        staticLibraryFile =
                                file("${gtestDir}/lib/osx-x86_64/libgtest.a")
                    }
                }
            }
            tbb {
               headers.srcDir "${tbbHeaderDir}"
               binaries.withType(SharedLibraryBinary) {
                   sharedLibraryFile = file(tbbSharedLib(targetPlatform))
               }
            }
        }
    }
    components {
        nativeTimedExpirationMap(NativeLibrarySpec) {
            baseName "nativeTimedExpirationMap"
        }
    }
    testSuites {
        nativeTimedExpirationMapTest(GoogleTestTestSuiteSpec) {
            testing $.components.nativeTimedExpirationMap
        }
    }
    tasks.test {
        dependsOn runNativeTimedExpirationMapTestGoogleTestExe
        dependsOn nativeTimedExpirationMapSharedLibrary
        systemProperty "java.library.path", "${nativeLibraryDir}:${tbbLibraryDir}"
    }
    tasks.jar {
        dependsOn nativeTimedExpirationMapSharedLibrary
    }

    binaries {
        all {
            if (toolChain in GccCompatibleToolChain) {
                cppCompiler.args << "--std=c++11" \
                                 << "-I" << "${JNI_INCLUDE_DIR}" \
                                 << "-I" << "$tbbHeaderDir"
                if (targetPlatform.operatingSystem.linux) {
                    cppCompiler.args << "-I" << "${JNI_INCLUDE_DIR}/linux"
                }
                if (targetPlatform.operatingSystem.macOsX) {
                    cppCompiler.args << "-I" << "${JNI_INCLUDE_DIR}/darwin"
                }
            }
        }
        nativeTimedExpirationMapSharedLibrary {
            lib library: "tbb", linkage: "shared"

            ext.tbbLibraryDir = tbbLibDir(targetPlatform)
            if (targetPlatform.operatingSystem.linux) {
                sharedLibraryFile = "${nativeLibraryDir}/libnativeTimedExpirationMap.so"
            }
            if (targetPlatform.operatingSystem.macOsX) {
                sharedLibraryFile = "${nativeLibraryDir}/libnativeTimedExpirationMap.dylib"
            }
        }
        withType(GoogleTestTestSuiteBinarySpec) {
            lib library: "googleTest", linkage: "static"
            lib library: "tbb", linkage: "shared"

            if (targetPlatform.operatingSystem.linux) {
                cppCompiler.args '-pthread'
                linker.args '-pthread'
            }
        }
    }
}

task generateJniHeaders(type:Exec) {
    def classpath = sourceSets.main.output.classesDir
    def nativeIncludes = "src/nativeTimedExpirationMap/headers"
    commandLine "javah", "-d", nativeIncludes, \
                         "-classpath", classpath, \
                         "org.midonet.util.concurrent.NativeTimedExpirationMap"
    dependsOn classes
}

tasks.withType(RunTestExecutable) {
    args "--gtest_output=xml:test_detail.xml"
}

tasks.withType(CppCompile) {
    dependsOn generateJniHeaders
}

dependencies {
    compile libraries.akka, libraries.commons_cli, libraries.commons_conf,
            libraries.commons_io, libraries.commons_lang3, libraries.disruptor,
            libraries.findbugs, libraries.guava,
            libraries.hdrhistogram,
            libraries.infinispan, libraries.jackson_core,
            libraries.jackson_databind, libraries.jackson_annotations,
            libraries.jsch, libraries.logback_logstash, libraries.netty,
            libraries.metrics, libraries.protobuf, libraries.rx, libraries.scala,
            libraries.sun_tools, libraries.scala_logging, libraries.jna,
            libraries.scala_async, libraries.guice

    testCompile libraries.scalatest, libraries.scalacheck,
                libraries.hamcrest_lib, libraries.hamcrest_integration,
                libraries.hamcrest_core, libraries.scalatest
}

jar {
    manifest {
        attributes 'Implementation-Title': 'MidoNet Utilily Library',
                   'Implementation-Version': version
    }
}

sourceSets {
    main {
        scala { srcDirs = ['src/main/scala', 'src/main/java'] }
        java { srcDirs = [] }
    }
    test {
        scala { srcDirs = ['src/test/scala', 'src/test/java'] }
        java { srcDirs = [] }
    }
}

configurations {
    tests.extendsFrom (testCompile)
}

task jarTest (type: Jar, dependsOn: testClasses) {
    from sourceSets.test.output
    classifier = 'test'
}

cobertura {
    coverageExcludes = [
        '.*org.midonet.ErrorCode.*',
        '.*org.midonet.util.http.HttpSupport.*',
    ]
}

artifacts {
    tests jarTest
}


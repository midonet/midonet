{
  "comments": [
    {
      "key": {
        "uuid": "baa041b7_ed978be9",
        "filename": "nsdb/src/main/scala/org/midonet/cluster/services/state/client/InternalState.scala",
        "patchSetId": 10
      },
      "lineNbr": 31,
      "author": {
        "id": 1003555
      },
      "writtenOn": "2016-06-28T17:44:26Z",
      "side": 1,
      "message": "rename to StateProxyClientStates",
      "revId": "c498a275071f1438e162e77641f6d8a9d1925070",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "baa041b7_adad039d",
        "filename": "nsdb/src/main/scala/org/midonet/cluster/services/state/client/InternalState.scala",
        "patchSetId": 10
      },
      "lineNbr": 91,
      "author": {
        "id": 1002751
      },
      "writtenOn": "2016-06-28T16:27:57Z",
      "side": 1,
      "message": "Here and below, your\u0027re making an implicit conversion from the scala map to the maplike trait. Use the scala map methods, e.g. containsKey, put. Or use a Java hashmap and this can be a `putIfAbsent`",
      "range": {
        "startLine": 91,
        "startChar": 49,
        "endLine": 91,
        "endChar": 57
      },
      "revId": "c498a275071f1438e162e77641f6d8a9d1925070",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "baa041b7_6d6dbb98",
        "filename": "nsdb/src/main/scala/org/midonet/cluster/services/state/client/InternalState.scala",
        "patchSetId": 10
      },
      "lineNbr": 130,
      "author": {
        "id": 1002751
      },
      "writtenOn": "2016-06-28T16:27:57Z",
      "side": 1,
      "message": "Is only this final for a reason?",
      "range": {
        "startLine": 130,
        "startChar": 4,
        "endLine": 130,
        "endChar": 9
      },
      "revId": "c498a275071f1438e162e77641f6d8a9d1925070",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "baa041b7_cddcc748",
        "filename": "nsdb/src/main/scala/org/midonet/cluster/services/state/client/StateProxyClient.scala",
        "patchSetId": 10
      },
      "lineNbr": 60,
      "author": {
        "id": 1002751
      },
      "writtenOn": "2016-06-28T16:27:57Z",
      "side": 1,
      "message": "Make most info messages debug. I would leave info/warn only when the client starts/stops/changes the connection state.",
      "range": {
        "startLine": 60,
        "startChar": 6,
        "endLine": 60,
        "endChar": 22
      },
      "revId": "c498a275071f1438e162e77641f6d8a9d1925070",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "baa041b7_cd25e75c",
        "filename": "nsdb/src/main/scala/org/midonet/cluster/services/state/client/StateProxyClient.scala",
        "patchSetId": 10
      },
      "lineNbr": 76,
      "author": {
        "id": 1002751
      },
      "writtenOn": "2016-06-28T16:27:57Z",
      "side": 1,
      "message": "Note (maybe for a future patch): This class can mixin the Logging trait, in which case you can add a prefix marker, that would be prepended to all messages. The marker will also ensure that the class doesn\u0027t generate the same prefix string multiple times, as if when you call toString().",
      "range": {
        "startLine": 76,
        "startChar": 16,
        "endLine": 76,
        "endChar": 19
      },
      "revId": "c498a275071f1438e162e77641f6d8a9d1925070",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "baa041b7_8db0ff8c",
        "filename": "nsdb/src/main/scala/org/midonet/cluster/services/state/client/StateProxyClient.scala",
        "patchSetId": 10
      },
      "lineNbr": 104,
      "author": {
        "id": 1003555
      },
      "writtenOn": "2016-06-28T17:44:26Z",
      "side": 1,
      "message": "transitionToDead and transitionToConnected make the code harder to follow. For transitionToDead, where are the observers coming from?\n\nFor transitionToConnected what does the opt returned mean? It would be clearer to just put the code itself here, since both these methods are only called once. And the broken out code wouldn\u0027t be much more verbose (perhaps 1-2 more cases).",
      "range": {
        "startLine": 104,
        "startChar": 14,
        "endLine": 104,
        "endChar": 30
      },
      "revId": "c498a275071f1438e162e77641f6d8a9d1925070",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "baa041b7_edd54b1b",
        "filename": "nsdb/src/main/scala/org/midonet/cluster/services/state/client/StateProxyClient.scala",
        "patchSetId": 10
      },
      "lineNbr": 120,
      "author": {
        "id": 1002751
      },
      "writtenOn": "2016-06-28T16:27:57Z",
      "side": 1,
      "message": "These may be too verbose, let\u0027s leave them like these for now, but maybe layer we\u0027d need to remove them or make them trace.",
      "range": {
        "startLine": 120,
        "startChar": 12,
        "endLine": 120,
        "endChar": 17
      },
      "revId": "c498a275071f1438e162e77641f6d8a9d1925070",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "baa041b7_0d2cef48",
        "filename": "nsdb/src/main/scala/org/midonet/cluster/services/state/client/StateProxyClient.scala",
        "patchSetId": 10
      },
      "lineNbr": 120,
      "author": {
        "id": 1002751
      },
      "writtenOn": "2016-06-28T16:27:57Z",
      "side": 1,
      "message": "Add a prefix to this message and below.",
      "range": {
        "startLine": 120,
        "startChar": 18,
        "endLine": 120,
        "endChar": 20
      },
      "revId": "c498a275071f1438e162e77641f6d8a9d1925070",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "baa041b7_2d1573e4",
        "filename": "nsdb/src/main/scala/org/midonet/cluster/services/state/client/StateProxyClient.scala",
        "patchSetId": 10
      },
      "lineNbr": 123,
      "author": {
        "id": 1002751
      },
      "writtenOn": "2016-06-28T16:27:57Z",
      "side": 1,
      "message": "We should add exception handling here, not to crash the executor and the agent.",
      "range": {
        "startLine": 123,
        "startChar": 12,
        "endLine": 123,
        "endChar": 16
      },
      "revId": "c498a275071f1438e162e77641f6d8a9d1925070",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "baa041b7_cd0e07e5",
        "filename": "nsdb/src/main/scala/org/midonet/cluster/services/state/client/StateProxyClient.scala",
        "patchSetId": 10
      },
      "lineNbr": 130,
      "author": {
        "id": 1002751
      },
      "writtenOn": "2016-06-28T16:27:57Z",
      "side": 1,
      "message": "remove",
      "range": {
        "startLine": 130,
        "startChar": 8,
        "endLine": 130,
        "endChar": 45
      },
      "revId": "c498a275071f1438e162e77641f6d8a9d1925070",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "baa041b7_0dbcef6a",
        "filename": "nsdb/src/main/scala/org/midonet/cluster/services/state/client/StateProxyClient.scala",
        "patchSetId": 10
      },
      "lineNbr": 160,
      "author": {
        "id": 1003555
      },
      "writtenOn": "2016-06-28T17:44:26Z",
      "side": 1,
      "message": "rather than wrapping this in a single thread thing, you should use the observable observeOn method",
      "range": {
        "startLine": 160,
        "startChar": 16,
        "endLine": 160,
        "endChar": 33
      },
      "revId": "c498a275071f1438e162e77641f6d8a9d1925070",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "baa041b7_6d1b7b1d",
        "filename": "nsdb/src/main/scala/org/midonet/cluster/services/state/client/StateProxyClient.scala",
        "patchSetId": 10
      },
      "lineNbr": 228,
      "author": {
        "id": 1002751
      },
      "writtenOn": "2016-06-28T16:27:57Z",
      "side": 1,
      "message": "* Assertions may be excluded from the bytecode, right? Check separately?\n\n* What if the assertion fails, e.g. the client is shutting down at the same time.",
      "range": {
        "startLine": 228,
        "startChar": 8,
        "endLine": 228,
        "endChar": 14
      },
      "revId": "c498a275071f1438e162e77641f6d8a9d1925070",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "baa041b7_4daaf71a",
        "filename": "nsdb/src/main/scala/org/midonet/cluster/services/state/client/StateProxyClientSettings.scala",
        "patchSetId": 10
      },
      "lineNbr": 21,
      "author": {
        "id": 1003555
      },
      "writtenOn": "2016-06-28T17:44:26Z",
      "side": 1,
      "message": "We already have a set of classes for config (see MidolmanConfig). This should go there and match the same style to keep things consistent.",
      "range": {
        "startLine": 21,
        "startChar": 6,
        "endLine": 21,
        "endChar": 30
      },
      "revId": "c498a275071f1438e162e77641f6d8a9d1925070",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    }
  ]
}
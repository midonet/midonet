/*
 * Copyright 2015 Midokura SARL
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

project.ext {
    midonetVersion = "5.3-SNAPSHOT"
    vendor = 'MidoNet'
    maintainer = "MidoNet user list <midonet-user@midonet.org>"
    url = "http://midonet.org"

    neutron_compatibility = ["kilo", "liberty"]

    if (!rootProject.hasProperty('rhelTarget')) {
        rhelTarget = "el7"
    }

    if (!(rhelTarget == "el7" || rhelTarget == "sles12")) {
        println("Only RHEL7 and SLES12 are supported: rhelTarget property will be ignored")
    }

    scalaLangLevel = 'Scala 2.11.7'

    versions = [akka: "2.3.6",
                guice: "3.0",
                hamcrest: "1.3",
                jackson: "2.5.4",
                java: "1.8",
                jersey: "1.19",
                jetty: "9.3.2.v20150730",
                jsonpath: "0.9.1",
                protobuf: "2.6.1"]

    libraries = [

        akka: ["com.typesafe.akka:akka-slf4j_2.11:${versions.akka}",
               "com.typesafe.akka:akka-actor_2.11:${versions.akka}"],
        akkatest: "com.typesafe.akka:akka-testkit_2.11:${versions.akka}",
        aspectj: "org.aspectj:aspectjrt:1.8.0",
        cassandra: "com.datastax.cassandra:cassandra-driver-core:2.0.10",
        cassandraunit: dependencies.create("org.cassandraunit:cassandra-unit:2.0.2.2") {
            exclude group: 'org.slf4j', module: 'slf4j-log4j12'
            exclude group: 'org.hamcrest', module: 'hamcrest-core'
            exclude group: 'org.hamcrest', module: 'hamcrest-all'
            exclude group: 'org.hamcrest', module: 'hamcrest-integration'},
        collections4: 'org.apache.commons:commons-collections4:4.0',
        commons_cli: "commons-cli:commons-cli:1.2",
        commons_codec: "commons-codec:commons-codec:1.9",
        commons_conf: "commons-configuration:commons-configuration:1.8",
        commons_dbcp2: "org.apache.commons:commons-dbcp2:2.0.1",
        commons_exec: "org.apache.commons:commons-exec:1.2",
        commons_io: "commons-io:commons-io:2.3",
        commons_lang: "commons-lang:commons-lang:2.6",
        commons_lang3: "org.apache.commons:commons-lang3:3.3",
        curator_discovery: "org.apache.curator:curator-x-discovery:2.9.1",
        curator_framework: dependencies.create("org.apache.curator:curator-framework:2.9.1") {
            exclude group: 'log4j', module: 'log4j'},
        curator_recipes: dependencies.create("org.apache.curator:curator-recipes:2.9.1") {
            exclude group: 'log4j', module: 'log4j'},
        curator_test: "org.apache.curator:curator-test:2.9.1",
        disruptor: "com.lmax:disruptor:3.3.0",
        findbugs: "com.google.code.findbugs:jsr305:2.0.0",
        grizzly_servlet: "org.glassfish.grizzly:grizzly-http-servlet:2.1.2",
        guava: "com.google.guava:guava:18.0",
        guice: ["com.google.inject:guice:${versions.guice}",
                "com.google.inject.extensions:guice-assistedinject:${versions.guice}"],
        guice_multibind: "com.google.inject.extensions:guice-multibindings:${versions.guice}",
        guice_servlet: "com.google.inject.extensions:guice-servlet:${versions.guice}",
        hamcrest: "org.hamcrest:hamcrest-all:${versions.hamcrest}",
        hamcrest_core: "org.hamcrest:hamcrest-core:${versions.hamcrest}",
        hamcrest_integration: "org.hamcrest:hamcrest-integration:${versions.hamcrest}",
        hamcrest_lib: "org.hamcrest:hamcrest-library:${versions.hamcrest}",
        hibernate_validator: "org.hibernate:hibernate-validator:4.3.0.Final",
        httpclient: "org.apache.httpcomponents:fluent-hc:4.4",
        infinispan: "org.infinispan:infinispan-commons:7.0.2.Final",
        jackson_annotations: "com.fasterxml.jackson.core:jackson-annotations:${versions.jackson}",
        jackson_core: "com.fasterxml.jackson.core:jackson-core:${versions.jackson}",
        jackson_databind: "com.fasterxml.jackson.core:jackson-databind:${versions.jackson}",
        jackson_jaxrs: "com.fasterxml.jackson.jaxrs:jackson-jaxrs-json-provider:${versions.jackson}",
        jcabi: "com.jcabi:jcabi-aspects:0.15.1",
        jctools: "org.jctools:jctools-core:1.1",
        jersey_bundle: "com.sun.jersey:jersey-bundle:${versions.jersey}",
        jersey_client: "com.sun.jersey:jersey-client:${versions.jersey}",
        jersey_core: "com.sun.jersey:jersey-core:${versions.jersey}",
        jersey_grizzly: "com.sun.jersey:jersey-grizzly2:${versions.jersey}",
        jersey_guice: "com.sun.jersey.contribs:jersey-guice:${versions.jersey}",
        jersey_json: dependencies.create("com.sun.jersey:jersey-json:${versions.jersey}") {
            exclude group: 'com.sun.xml.bind', module: 'jaxb-impl'},
        jersey_server: "com.sun.jersey:jersey-server:${versions.jersey}",
        jersey_servlet: "com.sun.jersey:jersey-servlet:${versions.jersey}",
        jersey_test_core: dependencies.create(
            "com.sun.jersey.jersey-test-framework:jersey-test-framework-core:${versions.jersey}") {
                exclude group: 'junit', module: 'junit'},
        jersey_test_grizzly: dependencies.create(
            "com.sun.jersey.jersey-test-framework:jersey-test-framework-grizzly2:${versions.jersey}") {
                exclude group: 'junit', module: 'junit'},
        jetty_deploy: "org.eclipse.jetty:jetty-deploy:${versions.jetty}",
        jetty_server: dependencies.create("org.eclipse.jetty:jetty-server:${versions.jetty}") {
            exclude group: "org.eclipse.jetty:orbit:javax.servlet"
        },
        jetty_servlet: "org.eclipse.jetty:jetty-servlet:${versions.jetty}",
        jetty_websocket: ["org.eclipse.jetty.websocket:websocket-server:${versions.jetty}",
                          "org.eclipse.jetty.websocket:websocket-client:${versions.jetty}"],
        jminix: "org.jminix:jminix:1.1.0",
        jna: ["net.java.dev.jna:jna:4.2.2", "net.java.dev.jna:jna-platform:4.2.2"],
        jsch: 'com.jcraft:jsch:0.1.45',
        jsonpath: "com.jayway.jsonpath:json-path:${versions.jsonpath}",
        jsonpath_assert: "com.jayway.jsonpath:json-path-assert:${versions.jsonpath}",
        jsr250: "javax.annotation:jsr250-api:1.0",
        jsr311: "javax.ws.rs:jsr311-api:1.1",
        logback: "ch.qos.logback:logback-classic:1.1.2",
        logback_logstash: "net.logstash.logback:logstash-logback-encoder:3.5",
        metrics: ["io.dropwizard.metrics:metrics-core:3.1.0",
                 "io.dropwizard.metrics:metrics-ganglia:3.1.0"],
        hdrhistogram: "org.hdrhistogram:HdrHistogram:2.1.9",
        mockit: "org.jmockit:jmockit:1.12",
        mysql_jdbc: dependencies.create("org.mariadb.jdbc:mariadb-java-client:1.1.8") {
            exclude group: 'net.java.dev.jna'
        },
        netty: "io.netty:netty-all:4.1.0.CR7",
        persistence: "javax.persistence:persistence-api:1.0",
        protobuf: "com.google.protobuf:protobuf-java:${versions.protobuf}",
        reflections: "org.reflections:reflections:0.9.10",
        rx: "io.reactivex:rxjava:1.0.16",
        sbe: "uk.co.real-logic:sbe:1.0.3-RC2",
        scala: "org.scala-lang:scala-library:2.11.7",
        scala_async: "org.scala-lang.modules:scala-async_2.11:0.9.2",
        scala_logging: "com.typesafe.scala-logging:scala-logging_2.11:3.1.0",
        scalacheck: "org.scalacheck:scalacheck_2.11:1.11.5",
        scalatest: "org.scalatest:scalatest_2.11:2.2.2",
        scallop: "org.rogach:scallop_2.11:0.9.5",
        slf4j: "org.slf4j:slf4j-api:1.7.7",
        snappy: "org.xerial.snappy:snappy-java:1.1.2.4",
        sqlite: "org.xerial:sqlite-jdbc:3.8.7",
        sun_tools: project.files("${System.properties['java.home']}/../lib/tools.jar"),
        test_frameworks: ["junit:junit:4.11",
                          "org.powermock:powermock-module-junit4:1.4.11",
                          "org.powermock:powermock-api-mockito:1.4.11",
                          "org.mockito:mockito-all:1.9.0",
                          "pl.pragmatists:JUnitParams:1.0.2",
                          "nl.jqno.equalsverifier:equalsverifier:1.4.1"],
        typesafeconf: "com.typesafe:config:1.2.1",
        validation: "javax.validation:validation-api:1.0.0.GA",
        vpp_core: "io.fd.vpp:jvpp-core:16.09-SNAPSHOT",
        vpp_registry: "io.fd.vpp:jvpp-registry:16.09-SNAPSHOT",
        zookeeper: dependencies.create("org.apache.zookeeper:zookeeper:3.4.8") {
            exclude group: 'jline', module: 'jline'
            exclude group: 'javax.jms', module: 'javax.jms'
            exclude group: 'com.sun.jdmk', module: 'jmxtools'
            exclude group: 'com.sun.jmx', module: 'jmxri'
            exclude group: 'io.netty', module: 'netty'
            exclude group: 'log4j', module: 'log4j'
            exclude group: 'org.slf4j', module: 'slf4j-log4j12'}
    ]

    timestamp = new Date().format("yyyyMMddHHmm")
    gitrev = getGitSHA()
    debVersion = midonetVersion.replaceAll(/SNAPSHOT$/, "${timestamp}.${gitrev}").
                                replaceAll(/-rc/, "~rc").
                                replaceAll(/-hf/, "+hf")
    rpmVersion = midonetVersion.replaceAll(/-.*$/, "")
    rpmRelease = midonetVersion.replaceAll(/^[^-]+$/, "1.0").
                                replaceAll(/^.*(hf\d*)$/, "1.0.\$1").
                                replaceAll(/^.*SNAPSHOT$/, "0.0.${timestamp}.${gitrev}").
                                replaceAll(/^.*-(.*)$/, "0.1.\$1")
    rpmRelease = "${rpmRelease}.${project.rhelTarget}"
}

buildscript {
    repositories {
        mavenCentral()
        jcenter()
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }

    dependencies {
        classpath 'com.github.jengelman.gradle.plugins:shadow:1.2.3'
        classpath 'net.saliman:gradle-cobertura-plugin:2.2.8'
        classpath 'com.google.protobuf:protobuf-gradle-plugin:0.7.6'
        classpath "com.github.nullstress:DependencyAnalysisPlugin:1.0.3"
    }
}

allprojects {
    apply plugin: 'idea'
    apply plugin: 'com.github.johnrengelman.shadow'
    apply plugin: "dependencyAnalysis"

    plugins.withType(ScalaPlugin).whenPluginAdded {
        dependencies { compile libraries.scala }

        tasks.withType(ScalaCompile) {
            scalaCompileOptions.deprecation = true
            scalaCompileOptions.unchecked = true
            scalaCompileOptions.additionalParameters = ["-language:_"]
        }
        idea.module.iml.withXml { p -> addScalaLangLevelToIdea(p) }
    }
    idea.module.iml.generateTo = file("${rootDir}/idea")

    idea.module {
        excludeDirs += file("${projectDir}/target")
        excludeDirs -= buildDir
        buildDir.listFiles().findAll{it.name != 'generated'}.each{excludeDirs += it}

        ['java', 'scala', 'resources'].each() { lang ->
            def dir = file("${projectDir}/src/main/${lang}")
            if (dir.exists()) {
                sourceDirs += dir
            }

            ['test', 'perf', 'integration'].each { type ->
                dir = file("${projectDir}/src/${type}/${lang}")
                if (dir.exists()) {
                    testSourceDirs += dir
                }
            }
        }

        def protoDir = file("${projectDir}/src/main/proto")
        if (protoDir.exists()) {
            def genDir = file("${buildDir}/generated/java")
            sourceDirs += genDir
            idea.module.iml.withXml { p -> addProtobufFacet(p, genDir) }
        }

        inheritOutputDirs = false
        outputDir = file("${rootDir}/idea/out/${project.name}")
        testOutputDir = file("${rootDir}/idea/test/${project.name}")
    }
}

idea.project {
    languageLevel = versions.java
    outputFile = file("${rootDir}/idea/midonet.ipr")
    ipr.withXml { p -> addCopyrightHeader(p) }
}

configure(subprojects.findAll {!it.name.contains('ovsdb')}) {
    apply plugin: 'java'
    apply plugin: 'com.google.protobuf'
    apply plugin: 'net.saliman.cobertura'
    apply plugin: 'com.github.johnrengelman.shadow'
    apply from: "${rootProject.projectDir}/git.gradle"

    configurations.all {
        exclude group: 'log4j', module: 'log4j'
    }

    sourceCompatibility = versions.java

    version = midonetVersion
    group = 'org.midonet'

    tasks.withType(JavaCompile) {
        options.compilerArgs << "-Xlint:unchecked" << "-Xlint:deprecation"
        options.compilerArgs << "-XDignore.symbol.file"
    }

    tasks.withType(ScalaCompile) {
        options.compilerArgs << "-XDignore.symbol.file"
        options.compilerArgs << "-Xlint:unchecked" << "-Xlint:deprecation"
    }

    configurations {
        provided
        perfCompile.extendsFrom provided
        perfRuntime.extendsFrom runtime
    }

    sourceSets {
        main.compileClasspath += configurations.provided
        test.compileClasspath += configurations.provided
        perf.compileClasspath += sourceSets.main.compileClasspath
        perf.compileClasspath += sourceSets.test.compileClasspath
        perf.compileClasspath += sourceSets.main.output
        perf.compileClasspath += sourceSets.test.output
        perf.runtimeClasspath += sourceSets.main.runtimeClasspath
        perf.runtimeClasspath += sourceSets.test.runtimeClasspath
        integration {
            resources.srcDir file('src/integration/resources')
            compileClasspath += sourceSets.main.compileClasspath
            compileClasspath += sourceSets.main.output
            runtimeClasspath += sourceSets.main.runtimeClasspath
        }
    }

    repositories {
        mavenCentral()
        mavenLocal()
        maven { url "http://jsch.sf.net/maven2/" }
        maven { url "http://maven.restlet.org" }
    }

    test {
        if (project.hasProperty('maxTestForks')) {
            maxParallelForks = Integer.parseInt(project.maxTestForks)
        } else {
            maxParallelForks = 4
        }

        forkEvery = 10

        testLogging {
            events "started", "passed", "skipped", "failed"
        }
    }

    dependencies {
        compile libraries.slf4j
        compile libraries.guava
        compile libraries.findbugs
        // NOTE: hamcrest needs to be brought into the classpath *before*
        //       junit, the opposite breaks compilation.
        testCompile libraries.hamcrest_core, libraries.test_frameworks
        runtime libraries.logback
        perfCompile 'org.openjdk.jmh:jmh-core:1.10.3'
        perfCompile 'org.openjdk.jmh:jmh-generator-bytecode:1.10.3'

        modules {
            module("asm:asm") {
                replacedBy("org.ow2.asm:asm")
            }
        }
    }

    idea.module {
        scopes.PROVIDED.plus += [configurations.perfCompile]
        scopes.PROVIDED.plus += [configurations.provided]
    }

    dependencies {
        integrationCompile sourceSets.main.output
        integrationCompile configurations.testCompile
        integrationCompile sourceSets.test.output
        integrationRuntime configurations.testRuntime
    }

    task integration(type: Test) {
        testClassesDir = sourceSets.integration.output.classesDir
        classpath = sourceSets.integration.runtimeClasspath
    }

    task manpages() {
        File outputDir = new File("${buildDir}/man")
        FileTree inputFiles = fileTree(dir: "src/man", include: "*.ronn")

        inputs.files { inputFiles }
        outputs.dir outputDir

        doLast {
            outputDir.mkdirs()
            println("Building manpages")
            inputFiles.each { File file ->
                String filename = file.getName()
                String outputFile = filename.replaceAll(/.ronn/, ".gz")
                println("    manpage: $filename -> $outputFile")
                project.exec {
                    commandLine "bash", "-c"
                    commandLine += "ronn --pipe --roff src/man/${filename} | gzip -c > ${buildDir}/man/${outputFile}"
                    workingDir project.projectDir
                }
            }
        }
    }

    check.dependsOn integration

    // The JMH annotation processor doesn't support Scala (yet?), so
    // we use the bytecode generator, which requires these two tasks.
    def benchOutput = sourceSets.perf.output.classesDir.absolutePath + '/generated-sources'

    task cleanPerf(type: Delete) {
        delete benchOutput
    }

    task generateBenchmarks(type: JavaExec) {
        main = 'org.openjdk.jmh.generators.bytecode.JmhBytecodeGenerator'
        classpath = sourceSets.perf.compileClasspath

        args += sourceSets.perf.output.classesDir // compiled-bytecode-dir
        args += benchOutput  // output-source-dir
        args += benchOutput // output-resource-dir
        args += 'asm'

        dependsOn(perfClasses, cleanPerf)
    }

    task compileBenchmarks(type: JavaCompile) {
        classpath = sourceSets.perf.runtimeClasspath
        source = benchOutput
        destinationDir = file(benchOutput)

        dependsOn(generateBenchmarks)
        onlyIf {
            !source.filter({f ->
                def n = f.getName()
                n.endsWith(".java") || n.endsWith(".scala")
            }).isEmpty()
        }
    }

    task benchmarks(type: JavaExec) {
        main = 'org.openjdk.jmh.Main'
        classpath = sourceSets.perf.runtimeClasspath + files(benchOutput)
        jvmArgs('-Djava.library.path=/lib:/usr/lib')
        maxHeapSize = "4096m"
        description 'Executes the specified benchmarks. By default runs all. ' +
                    'Example command: ./gradlew :midonet-util:benchmarks \'-Pjmh=.*Statistical.*\''

        if (project.hasProperty('jmh')) {
            args(jmh.split(' '))
        }

        dependsOn(compileBenchmarks)
    }

    tasks.build {
        dependsOn(compileBenchmarks)
    }

    cobertura {
        coverageDirs << file("midonet-util/build/classes/main")
        coverageDirs << file("netlink/build/classes/main")
        coverageDirs << file("nsdb/build/classes/main")
        coverageDirs << file("midolman/build/classes/main")
        coverageDirs << file("cluster/midonet-cluster/build/classes/main")
        coverageFormats = ['html', 'xml']
    }

    protobuf {
        protoc {
            artifact = "com.google.protobuf:protoc:${versions.protobuf}"
        }
    }
}

configure(subprojects.findAll {it.name.contains('ovsdb')}) {
    group = 'org.midonet'
    version = '0.5.0-1-MIDO'

    apply plugin: 'java'
    sourceCompatibility = 1.8
    targetCompatibility = 1.8

    dependencies {
        compile "com.google.guava:guava:16.0",
                "com.google.code.gson:gson:2.1",
                libraries.netty,
                libraries.rx,
                "javax.portlet:portlet-api:2.0",
                "org.apache.httpcomponents:httpcore-nio:4.2.1",
                "commons-collections:commons-collections:1.0",
                "commons-lang:commons-lang:2.6",
                "com.fasterxml.jackson.core:jackson-databind:${versions.jackson}",
                "com.fasterxml.jackson.core:jackson-core:${versions.jackson}",
                "com.fasterxml.jackson.core:jackson-annotations:${versions.jackson}"
    }

    repositories {
        mavenLocal()
        maven { url "http://repo.maven.apache.org/maven2" }
        maven { url "http://nexus.opendaylight.org/content/repositories/opendaylight.release/" }
    }
}

configure(subprojects) {
    repositories {
        maven { url "http://nexus.opendaylight.org/content/repositories/opendaylight.release/" }
        maven { url "https://nexus.fd.io/content/repositories/fd.io.snapshot/" }
    }
}

// Utility methods start here

def getOrAddComponent(iml, name) {
    iml.asNode().component.find { it.@name == name } ?:
         iml.asNode().appendNode('component', [name: name])
}

def addScalaLangLevelToIdea(iml) {
    def facets = getOrAddComponent(iml, 'FacetManager')
    def scala = facets.facet.find { it.@type == 'scala' } ?:
        facets.appendNode('facet', [type: 'scala', name: 'Scala'])
    def config = scala.configuration ? scala.configuration[0] :
                                       scala.appendNode('configuration', [])
    config.option.find { it.@name == 'languageLevel' } ?:
        config.appendNode('option', ['name': 'languageLevel',
                                     'value': scalaLangLevel])
}

def addProtobufFacet(iml, generatedDir) {
    def facets = getOrAddComponent(iml, 'FacetManager')
    def protobuf = facets.facet.find { it.@type == 'protobuf' } ?:
                        facets.appendNode('facet', [type: 'protobuf', name: 'Protobuf Facet'])
    def config = protobuf.configuration ? protobuf.configuration[0] :
                 protobuf.appendNode('configuration', [])
    config.option.find { it.@name == 'COMPILER_OUTPUT_SOURCE_DIRECTORY' } ?:
    config.appendNode('option', ['name': 'COMPILER_OUTPUT_SOURCE_DIRECTORY',
                                 'value': generatedDir])
}

def addCopyrightHeader(ipr) {
    def copyright = getOrAddComponent(ipr, 'CopyrightManager')
    copyright.attributes().put('default', 'midokura')

    def mido = copyright.appendNode('copyright')
    mido.appendNode('option', [name: 'notice', value: """\
Copyright 2015 Midokura SARL

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License."""])
    mido.appendNode('option', [name: 'keyword', value: 'Copyright'])
    mido.appendNode('option', [name: 'allowReplaceKeyword', value: ''])
    mido.appendNode('option', [name: 'myName', value: 'midokura'])
    mido.appendNode('option', [name: 'myLocal', value: 'true'])

    copyright.appendNode('module2copyright')
             .appendNode('element', [module: 'All', copyright: 'midokura'])
}

def getGitSHA() {
    try {
        def cmd = "git rev-parse --short HEAD"
        def proc = cmd.execute()
        proc.text.trim()
    } catch (e) {
        return "git"
    }
}

task wrapper(type: Wrapper) {
    description 'Generate wrapper, which is distributed as part of source to alleviate the need of installing gradle'
    gradleVersion = '2.12'
}

task copy_to_override(type:Exec) {
    commandLine 'tests/copy_to_override.sh', 'override_v2'
}

task sandbox(type:Exec, dependsOn: copy_to_override) {
    workingDir './tests/'
    commandLine 'sandbox-manage', '-c', 'sandbox.conf', 'run', 'default_v2'
    commandLine += '--name=mdts'
    commandLine += '--override=sandbox/override_v2'
    commandLine += '--provision=sandbox/provisioning/all-provisioning.sh'
}

task sandbox_stop(type:Exec) {
    workingDir './tests/'
    commandLine 'sandbox-manager', 'stop-all', '--remove'
}

task mdts(type:Exec) {
    workingDir './tests/mdts/tests/functional_tests'
    commandLine './run_tests.sh'
}

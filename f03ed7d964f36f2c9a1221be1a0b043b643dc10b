{
  "comments": [
    {
      "key": {
        "uuid": "1a106d94_9d35d3dd",
        "filename": "nsdb/src/main/scala/org/midonet/cluster/data/storage/MergedMap.scala",
        "patchSetId": 2
      },
      "lineNbr": 29,
      "author": {
        "id": 1002760
      },
      "writtenOn": "2015-05-18T07:09:58Z",
      "side": 1,
      "message": "I assume that a same owner must have a consistent opinion on a single key, correct?",
      "range": {
        "startLine": 28,
        "startChar": 30,
        "endLine": 29,
        "endChar": 56
      },
      "revId": "f03ed7d964f36f2c9a1221be1a0b043b643dc10b",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "facab960_a51fc808",
        "filename": "nsdb/src/main/scala/org/midonet/cluster/data/storage/MergedMap.scala",
        "patchSetId": 2
      },
      "lineNbr": 29,
      "author": {
        "id": 1002820
      },
      "writtenOn": "2015-05-19T15:29:22Z",
      "side": 1,
      "message": "An owner can over-write its opinion for a given key. This is explained in the doc for putOpinion.",
      "parentUuid": "1a106d94_9d35d3dd",
      "range": {
        "startLine": 28,
        "startChar": 30,
        "endLine": 29,
        "endChar": 56
      },
      "revId": "f03ed7d964f36f2c9a1221be1a0b043b643dc10b",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "1a106d94_ffefa4e6",
        "filename": "nsdb/src/main/scala/org/midonet/cluster/data/storage/MergedMap.scala",
        "patchSetId": 2
      },
      "lineNbr": 57,
      "author": {
        "id": 1002731
      },
      "writtenOn": "2015-05-15T12:42:15Z",
      "side": 1,
      "message": "As it\u0027s private, this seems redundant",
      "range": {
        "startLine": 57,
        "startChar": 11,
        "endLine": 57,
        "endChar": 18
      },
      "revId": "f03ed7d964f36f2c9a1221be1a0b043b643dc10b",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "1a106d94_7fb5747c",
        "filename": "nsdb/src/main/scala/org/midonet/cluster/data/storage/MergedMap.scala",
        "patchSetId": 2
      },
      "lineNbr": 57,
      "author": {
        "id": 1002820
      },
      "writtenOn": "2015-05-15T13:53:16Z",
      "side": 1,
      "message": "I kept this on purpose to make it clear that this an opinion. If your strongly against it, I\u0027ll remove this.",
      "parentUuid": "1a106d94_ffefa4e6",
      "range": {
        "startLine": 57,
        "startChar": 11,
        "endLine": 57,
        "endChar": 18
      },
      "revId": "f03ed7d964f36f2c9a1221be1a0b043b643dc10b",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "1a106d94_63aa0287",
        "filename": "nsdb/src/main/scala/org/midonet/cluster/data/storage/MergedMap.scala",
        "patchSetId": 2
      },
      "lineNbr": 57,
      "author": {
        "id": 1002731
      },
      "writtenOn": "2015-05-15T15:49:49Z",
      "side": 1,
      "message": "I realized English is lacking the handy Spanish verb \"opinar\" here.\n\nNo strong opinion, let\u0027s hear other reviewers.",
      "parentUuid": "1a106d94_7fb5747c",
      "range": {
        "startLine": 57,
        "startChar": 11,
        "endLine": 57,
        "endChar": 18
      },
      "revId": "f03ed7d964f36f2c9a1221be1a0b043b643dc10b",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "1a106d94_3d4c9f76",
        "filename": "nsdb/src/main/scala/org/midonet/cluster/data/storage/MergedMap.scala",
        "patchSetId": 2
      },
      "lineNbr": 57,
      "author": {
        "id": 1002760
      },
      "writtenOn": "2015-05-18T07:09:58Z",
      "side": 1,
      "message": "There is a word \"opine\" :) We can also use \"suggest\" or \"propose\".\n\n\nAlso a bit about the terminology. To me it\u0027s more intuitive if an opinion corresponds to a key-value pair, not just value alone. So \"Associate the given opinion ***to this key***\" sounds strange to me.",
      "parentUuid": "1a106d94_63aa0287",
      "range": {
        "startLine": 57,
        "startChar": 11,
        "endLine": 57,
        "endChar": 18
      },
      "revId": "f03ed7d964f36f2c9a1221be1a0b043b643dc10b",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "facab960_05eeb4ec",
        "filename": "nsdb/src/main/scala/org/midonet/cluster/data/storage/MergedMap.scala",
        "patchSetId": 2
      },
      "lineNbr": 57,
      "author": {
        "id": 1002820
      },
      "writtenOn": "2015-05-19T15:29:22Z",
      "side": 1,
      "message": "We typically speak of opinions for a given key. If you define an opinion as a key-value pair then it does not make sense to speak about a winning opinion in that case. Let me know what you think.",
      "parentUuid": "1a106d94_3d4c9f76",
      "range": {
        "startLine": 57,
        "startChar": 11,
        "endLine": 57,
        "endChar": 18
      },
      "revId": "f03ed7d964f36f2c9a1221be1a0b043b643dc10b",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "1a106d94_5d5b5b2e",
        "filename": "nsdb/src/main/scala/org/midonet/cluster/data/storage/MergedMap.scala",
        "patchSetId": 2
      },
      "lineNbr": 72,
      "author": {
        "id": 1002760
      },
      "writtenOn": "2015-05-18T07:09:58Z",
      "side": 1,
      "message": "s/the content of/updates to/",
      "range": {
        "startLine": 72,
        "startChar": 40,
        "endLine": 72,
        "endChar": 54
      },
      "revId": "f03ed7d964f36f2c9a1221be1a0b043b643dc10b",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "facab960_45bfdcd0",
        "filename": "nsdb/src/main/scala/org/midonet/cluster/data/storage/MergedMap.scala",
        "patchSetId": 2
      },
      "lineNbr": 72,
      "author": {
        "id": 1002820
      },
      "writtenOn": "2015-05-19T15:29:22Z",
      "side": 1,
      "message": "The observable indeed emits the content of the map followed by updates to it ;-)",
      "parentUuid": "1a106d94_5d5b5b2e",
      "range": {
        "startLine": 72,
        "startChar": 40,
        "endLine": 72,
        "endChar": 54
      },
      "revId": "f03ed7d964f36f2c9a1221be1a0b043b643dc10b",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "1a106d94_1fc0c04e",
        "filename": "nsdb/src/main/scala/org/midonet/cluster/data/storage/MergedMap.scala",
        "patchSetId": 2
      },
      "lineNbr": 96,
      "author": {
        "id": 1002731
      },
      "writtenOn": "2015-05-15T12:42:15Z",
      "side": 1,
      "message": "type MapEntry \u003d (K, V) ?\n\na deletion is (K, null)",
      "range": {
        "startLine": 96,
        "startChar": 17,
        "endLine": 96,
        "endChar": 26
      },
      "revId": "f03ed7d964f36f2c9a1221be1a0b043b643dc10b",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "1a106d94_bfb24c91",
        "filename": "nsdb/src/main/scala/org/midonet/cluster/data/storage/MergedMap.scala",
        "patchSetId": 2
      },
      "lineNbr": 96,
      "author": {
        "id": 1002820
      },
      "writtenOn": "2015-05-15T13:53:16Z",
      "side": 1,
      "message": "I thought it was cleaner as it is now. But I guess your solution is more efficient.",
      "parentUuid": "1a106d94_1fc0c04e",
      "range": {
        "startLine": 96,
        "startChar": 17,
        "endLine": 96,
        "endChar": 26
      },
      "revId": "f03ed7d964f36f2c9a1221be1a0b043b643dc10b",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "facab960_a5cd0889",
        "filename": "nsdb/src/main/scala/org/midonet/cluster/data/storage/MergedMap.scala",
        "patchSetId": 2
      },
      "lineNbr": 96,
      "author": {
        "id": 1002820
      },
      "writtenOn": "2015-05-19T15:29:22Z",
      "side": 1,
      "message": "The observable is now just: Observable[(K, V)]",
      "parentUuid": "1a106d94_bfb24c91",
      "range": {
        "startLine": 96,
        "startChar": 17,
        "endLine": 96,
        "endChar": 26
      },
      "revId": "f03ed7d964f36f2c9a1221be1a0b043b643dc10b",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "1a106d94_bd3fefb4",
        "filename": "nsdb/src/main/scala/org/midonet/cluster/data/storage/MergedMap.scala",
        "patchSetId": 2
      },
      "lineNbr": 103,
      "author": {
        "id": 1002760
      },
      "writtenOn": "2015-05-18T07:09:58Z",
      "side": 1,
      "message": "If the map is read-only, it seems to me that there shouldn\u0027t be methods such as \"merge\" and \"unmerge\" that implicitly modify the map.",
      "range": {
        "startLine": 102,
        "startChar": 52,
        "endLine": 103,
        "endChar": 54
      },
      "revId": "f03ed7d964f36f2c9a1221be1a0b043b643dc10b",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "facab960_25a1f8a9",
        "filename": "nsdb/src/main/scala/org/midonet/cluster/data/storage/MergedMap.scala",
        "patchSetId": 2
      },
      "lineNbr": 103,
      "author": {
        "id": 1002820
      },
      "writtenOn": "2015-05-19T15:29:22Z",
      "side": 1,
      "message": "The merged map can be modified indirectly using the private maps. Such private maps can now be obtained using the join interface method.",
      "parentUuid": "1a106d94_bd3fefb4",
      "range": {
        "startLine": 102,
        "startChar": 52,
        "endLine": 103,
        "endChar": 54
      },
      "revId": "f03ed7d964f36f2c9a1221be1a0b043b643dc10b",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "1a106d94_43b8a6e5",
        "filename": "nsdb/src/main/scala/org/midonet/cluster/data/storage/MergedMap.scala",
        "patchSetId": 2
      },
      "lineNbr": 112,
      "author": {
        "id": 1002731
      },
      "writtenOn": "2015-05-15T15:49:49Z",
      "side": 1,
      "message": "missing the CR strategy?",
      "revId": "f03ed7d964f36f2c9a1221be1a0b043b643dc10b",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "1a106d94_e37f12aa",
        "filename": "nsdb/src/main/scala/org/midonet/cluster/data/storage/MergedMap.scala",
        "patchSetId": 2
      },
      "lineNbr": 112,
      "author": {
        "id": 1002820
      },
      "writtenOn": "2015-05-15T17:22:09Z",
      "side": 1,
      "message": "The value class V implements the comparable interface. That\u0027s how the winning opinion is determined. However, I was thinking that it would perhaps be better with a specific trait for values:\n\ntrait MapValue[U, V] extends Comparable[U] {\n    def discriminant: U\n    def value: V\n}\n\nIn doing so, get would just return the actual value and not the discriminant with the value.",
      "parentUuid": "1a106d94_43b8a6e5",
      "revId": "f03ed7d964f36f2c9a1221be1a0b043b643dc10b",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    }
  ]
}
{
  "comments": [
    {
      "key": {
        "uuid": "fafc7978_4851bf61",
        "filename": "cluster/src/main/scala/org/midonet/cluster/data/storage/InMemoryStorage.scala",
        "patchSetId": 8
      },
      "lineNbr": 160,
      "author": {
        "id": 1002821
      },
      "writtenOn": "2014-12-01T17:08:07Z",
      "side": 1,
      "message": "Any particular reason for adding the ()?",
      "range": {
        "startLine": 160,
        "startChar": 20,
        "endLine": 160,
        "endChar": 29
      },
      "revId": "fc3aa60aea2c4a938f1c3492bf1ab2a6bd67b612",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "fafc7978_23a61c11",
        "filename": "cluster/src/main/scala/org/midonet/cluster/data/storage/InMemoryStorage.scala",
        "patchSetId": 8
      },
      "lineNbr": 160,
      "author": {
        "id": 1002731
      },
      "writtenOn": "2014-12-01T18:21:29Z",
      "side": 1,
      "message": "Scala style. But on closer inspection it seems to accept all accessors without () so I\u0027ll remove it.",
      "parentUuid": "fafc7978_4851bf61",
      "range": {
        "startLine": 160,
        "startChar": 20,
        "endLine": 160,
        "endChar": 29
      },
      "revId": "fc3aa60aea2c4a938f1c3492bf1ab2a6bd67b612",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "fafc7978_e34d3474",
        "filename": "cluster/src/main/scala/org/midonet/cluster/data/storage/Storage.scala",
        "patchSetId": 8
      },
      "lineNbr": 230,
      "author": {
        "id": 1002821
      },
      "writtenOn": "2014-12-01T17:08:07Z",
      "side": 1,
      "message": "It looks to me like it actually returns an IllegalStateException.",
      "range": {
        "startLine": 230,
        "startChar": 55,
        "endLine": 230,
        "endChar": 72
      },
      "revId": "fc3aa60aea2c4a938f1c3492bf1ab2a6bd67b612",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "fafc7978_03ab18d9",
        "filename": "cluster/src/main/scala/org/midonet/cluster/data/storage/Storage.scala",
        "patchSetId": 8
      },
      "lineNbr": 230,
      "author": {
        "id": 1002731
      },
      "writtenOn": "2014-12-01T18:21:29Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "fafc7978_e34d3474",
      "range": {
        "startLine": 230,
        "startChar": 55,
        "endLine": 230,
        "endChar": 72
      },
      "revId": "fc3aa60aea2c4a938f1c3492bf1ab2a6bd67b612",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "fafc7978_a8930bf9",
        "filename": "cluster/src/main/scala/org/midonet/cluster/data/storage/SubscriptionCache.scala",
        "patchSetId": 8
      },
      "lineNbr": 74,
      "author": {
        "id": 1002821
      },
      "writtenOn": "2014-12-01T17:08:07Z",
      "side": 1,
      "message": "This seems like it should be grouped with onUnsubscribe and refCount.",
      "range": {
        "startLine": 72,
        "startChar": 0,
        "endLine": 74,
        "endChar": 5
      },
      "revId": "fc3aa60aea2c4a938f1c3492bf1ab2a6bd67b612",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "fafc7978_43ac00ee",
        "filename": "cluster/src/main/scala/org/midonet/cluster/data/storage/SubscriptionCache.scala",
        "patchSetId": 8
      },
      "lineNbr": 74,
      "author": {
        "id": 1002731
      },
      "writtenOn": "2014-12-01T18:21:29Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "fafc7978_a8930bf9",
      "range": {
        "startLine": 72,
        "startChar": 0,
        "endLine": 74,
        "endChar": 5
      },
      "revId": "fc3aa60aea2c4a938f1c3492bf1ab2a6bd67b612",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "fafc7978_08edf7c3",
        "filename": "cluster/src/main/scala/org/midonet/cluster/data/storage/ZookeeperObjectMapper.scala",
        "patchSetId": 8
      },
      "lineNbr": 49,
      "author": {
        "id": 1002820
      },
      "writtenOn": "2014-12-01T14:12:52Z",
      "side": 1,
      "message": "If we invoke observable followed by a get, the get might throw an exception even though the corresponding object was created beforehand (because the instance cache exists already but it contains no data). Why not going directly to ZK in that case to fetch the object?",
      "range": {
        "startLine": 49,
        "startChar": 1,
        "endLine": 49,
        "endChar": 75
      },
      "revId": "fc3aa60aea2c4a938f1c3492bf1ab2a6bd67b612",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "fafc7978_c8092f97",
        "filename": "cluster/src/main/scala/org/midonet/cluster/data/storage/ZookeeperObjectMapper.scala",
        "patchSetId": 8
      },
      "lineNbr": 674,
      "author": {
        "id": 1002751
      },
      "writtenOn": "2014-12-01T14:26:14Z",
      "side": 1,
      "message": "To fix the bug discovered by Nicolas, I believe that in this patch we can simply do:\n\n  cache.observable.asFuture\n\nAlso, maybe we should remove the current() method, as in it\u0027s current form it will throw a NotFoundException if the underlying cache value is null.",
      "range": {
        "startLine": 674,
        "startChar": 16,
        "endLine": 674,
        "endChar": 72
      },
      "revId": "fc3aa60aea2c4a938f1c3492bf1ab2a6bd67b612",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "fafc7978_237d7c6f",
        "filename": "cluster/src/main/scala/org/midonet/cluster/data/storage/ZookeeperObjectMapper.scala",
        "patchSetId": 8
      },
      "lineNbr": 674,
      "author": {
        "id": 1002731
      },
      "writtenOn": "2014-12-01T18:21:29Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "fafc7978_c8092f97",
      "range": {
        "startLine": 674,
        "startChar": 16,
        "endLine": 674,
        "endChar": 72
      },
      "revId": "fc3aa60aea2c4a938f1c3492bf1ab2a6bd67b612",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "fafc7978_a8c4ab40",
        "filename": "cluster/src/main/scala/org/midonet/cluster/data/storage/ZookeeperObjectMapper.scala",
        "patchSetId": 8
      },
      "lineNbr": 816,
      "author": {
        "id": 1002820
      },
      "writtenOn": "2014-12-01T14:08:04Z",
      "side": 1,
      "message": "From the source code of TrieMap, it seems getOrElseUpdate is not performed atomically. Isn\u0027t that a problem if two threads concurrently call observable?",
      "range": {
        "startLine": 816,
        "startChar": 34,
        "endLine": 816,
        "endChar": 49
      },
      "revId": "fc3aa60aea2c4a938f1c3492bf1ab2a6bd67b612",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "fafc7978_48cedf5b",
        "filename": "cluster/src/main/scala/org/midonet/cluster/data/storage/ZookeeperObjectMapper.scala",
        "patchSetId": 8
      },
      "lineNbr": 816,
      "author": {
        "id": 1002821
      },
      "writtenOn": "2014-12-01T15:05:34Z",
      "side": 1,
      "message": "I\u0027m pretty sure getOrElseUpdate() is non-atomic. This will replace another cache being inserted concurrently, both will connect, and we\u0027ll return observables backed by two different caches.",
      "range": {
        "startLine": 816,
        "startChar": 34,
        "endLine": 816,
        "endChar": 49
      },
      "revId": "fc3aa60aea2c4a938f1c3492bf1ab2a6bd67b612",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "fafc7978_c30ab0d1",
        "filename": "cluster/src/main/scala/org/midonet/cluster/data/storage/ZookeeperObjectMapper.scala",
        "patchSetId": 8
      },
      "lineNbr": 816,
      "author": {
        "id": 1002731
      },
      "writtenOn": "2014-12-01T18:21:29Z",
      "side": 1,
      "message": "I\u0027m removing locks and GC approach as discussed with Alex and Brandon. Let\u0027s see what you think of the new options.",
      "parentUuid": "fafc7978_48cedf5b",
      "range": {
        "startLine": 816,
        "startChar": 34,
        "endLine": 816,
        "endChar": 49
      },
      "revId": "fc3aa60aea2c4a938f1c3492bf1ab2a6bd67b612",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "fafc7978_88c1e730",
        "filename": "cluster/src/main/scala/org/midonet/cluster/data/storage/ZookeeperObjectMapper.scala",
        "patchSetId": 8
      },
      "lineNbr": 837,
      "author": {
        "id": 1002820
      },
      "writtenOn": "2014-12-01T14:08:04Z",
      "side": 1,
      "message": "Same comment as above.",
      "range": {
        "startLine": 837,
        "startChar": 24,
        "endLine": 837,
        "endChar": 39
      },
      "revId": "fc3aa60aea2c4a938f1c3492bf1ab2a6bd67b612",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "fafc7978_e804f37f",
        "filename": "cluster/src/main/scala/org/midonet/cluster/data/storage/ZookeeperObjectMapper.scala",
        "patchSetId": 8
      },
      "lineNbr": 837,
      "author": {
        "id": 1002821
      },
      "writtenOn": "2014-12-01T15:05:34Z",
      "side": 1,
      "message": "Ditto.",
      "range": {
        "startLine": 837,
        "startChar": 24,
        "endLine": 837,
        "endChar": 39
      },
      "revId": "fc3aa60aea2c4a938f1c3492bf1ab2a6bd67b612",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "fafc7978_c8680ff8",
        "filename": "cluster/src/main/scala/org/midonet/cluster/data/storage/ZookeeperObjectMapper.scala",
        "patchSetId": 8
      },
      "lineNbr": 837,
      "author": {
        "id": 1002821
      },
      "writtenOn": "2014-12-01T17:08:07Z",
      "side": 1,
      "message": "I submitted my comments before I refreshed and saw Nicolas\u0027s.",
      "parentUuid": "fafc7978_e804f37f",
      "range": {
        "startLine": 837,
        "startChar": 24,
        "endLine": 837,
        "endChar": 39
      },
      "revId": "fc3aa60aea2c4a938f1c3492bf1ab2a6bd67b612",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "fafc7978_63f944c8",
        "filename": "cluster/src/main/scala/org/midonet/cluster/data/storage/ZookeeperObjectMapper.scala",
        "patchSetId": 8
      },
      "lineNbr": 837,
      "author": {
        "id": 1002731
      },
      "writtenOn": "2014-12-01T18:21:29Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "fafc7978_c8680ff8",
      "range": {
        "startLine": 837,
        "startChar": 24,
        "endLine": 837,
        "endChar": 39
      },
      "revId": "fc3aa60aea2c4a938f1c3492bf1ab2a6bd67b612",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "fafc7978_28139b67",
        "filename": "cluster/src/main/scala/org/midonet/cluster/util/ObservablePathChildrenCache.scala",
        "patchSetId": 8
      },
      "lineNbr": 125,
      "author": {
        "id": 1002821
      },
      "writtenOn": "2014-12-01T17:08:07Z",
      "side": 1,
      "message": "This needs to be under lock, right?\n\nAlso, do we need to call stream.onNext(s) in this case? Is this a situation that\u0027s expected to happen? We shouldn\u0027t get updates for children we don\u0027t know about, should we?\n\nShould log an error, as well (or instead).",
      "range": {
        "startLine": 125,
        "startChar": 12,
        "endLine": 125,
        "endChar": 37
      },
      "revId": "fc3aa60aea2c4a938f1c3492bf1ab2a6bd67b612",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "fafc7978_e326d4b9",
        "filename": "cluster/src/main/scala/org/midonet/cluster/util/ObservablePathChildrenCache.scala",
        "patchSetId": 8
      },
      "lineNbr": 155,
      "author": {
        "id": 1002821
      },
      "writtenOn": "2014-12-01T17:08:07Z",
      "side": 1,
      "message": "Option\u0027s orNull method does this.",
      "range": {
        "startLine": 152,
        "startChar": 50,
        "endLine": 155,
        "endChar": 9
      },
      "revId": "fc3aa60aea2c4a938f1c3492bf1ab2a6bd67b612",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "fafc7978_43f6c0d8",
        "filename": "cluster/src/main/scala/org/midonet/cluster/util/ObservablePathChildrenCache.scala",
        "patchSetId": 8
      },
      "lineNbr": 155,
      "author": {
        "id": 1002731
      },
      "writtenOn": "2014-12-01T18:21:29Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "fafc7978_e326d4b9",
      "range": {
        "startLine": 152,
        "startChar": 50,
        "endLine": 155,
        "endChar": 9
      },
      "revId": "fc3aa60aea2c4a938f1c3492bf1ab2a6bd67b612",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "fafc7978_c352b012",
        "filename": "cluster/src/test/java/org/midonet/cluster/data/storage/ZookeeperObjectMapperTest.java",
        "patchSetId": 8
      },
      "lineNbr": 936,
      "author": {
        "id": 1002821
      },
      "writtenOn": "2014-12-01T17:08:07Z",
      "side": 1,
      "message": "The documentation in Storage says NotFoundException. I\u0027d prefer if we could keep that, since it\u0027s a more informative exception type.",
      "range": {
        "startLine": 936,
        "startChar": 42,
        "endLine": 936,
        "endChar": 63
      },
      "revId": "fc3aa60aea2c4a938f1c3492bf1ab2a6bd67b612",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "fafc7978_a3032cb7",
        "filename": "cluster/src/test/java/org/midonet/cluster/data/storage/ZookeeperObjectMapperTest.java",
        "patchSetId": 8
      },
      "lineNbr": 936,
      "author": {
        "id": 1002731
      },
      "writtenOn": "2014-12-01T18:21:29Z",
      "side": 1,
      "message": "New solution, tell me what you think-",
      "parentUuid": "fafc7978_c352b012",
      "range": {
        "startLine": 936,
        "startChar": 42,
        "endLine": 936,
        "endChar": 63
      },
      "revId": "fc3aa60aea2c4a938f1c3492bf1ab2a6bd67b612",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "fafc7978_e8dd1316",
        "filename": "cluster/src/test/scala/org/midonet/cluster/data/storage/ZookeeperObjectMapperTests.scala",
        "patchSetId": 8
      },
      "lineNbr": 286,
      "author": {
        "id": 1002820
      },
      "writtenOn": "2014-12-01T14:08:04Z",
      "side": 1,
      "message": "This will throw an AssertionException when the observer receives a single notification because the connection to the node cache is asynchronous.",
      "range": {
        "startLine": 286,
        "startChar": 8,
        "endLine": 286,
        "endChar": 38
      },
      "revId": "fc3aa60aea2c4a938f1c3492bf1ab2a6bd67b612",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "fafc7978_433ec0b9",
        "filename": "cluster/src/test/scala/org/midonet/cluster/data/storage/ZookeeperObjectMapperTests.scala",
        "patchSetId": 8
      },
      "lineNbr": 286,
      "author": {
        "id": 1002821
      },
      "writtenOn": "2014-12-01T17:08:07Z",
      "side": 1,
      "message": "Do you mean in the case where the connection doesn\u0027t happen until after we update the bridge, so we only get the creation event and not the update event, because the data in the creation event already includes the update?",
      "parentUuid": "fafc7978_e8dd1316",
      "range": {
        "startLine": 286,
        "startChar": 8,
        "endLine": 286,
        "endChar": 38
      },
      "revId": "fc3aa60aea2c4a938f1c3492bf1ab2a6bd67b612",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    }
  ]
}
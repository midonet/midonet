{
  "comments": [
    {
      "key": {
        "uuid": "1a106d94_7c1d59bd",
        "filename": "cluster/src/test/scala/org/midonet/cluster/cli/BorisTest.scala",
        "patchSetId": 12
      },
      "lineNbr": 213,
      "author": {
        "id": 1003629
      },
      "writtenOn": "2015-03-30T08:24:24Z",
      "side": 1,
      "message": "I am assuming that all the tests above test the item that\u0027s listed in the string, and not double testing or testing a different scenario.\n\nGiven that, I have a few more ideas for tests that I didn\u0027t catch ion the above list (if it\u0027s there, apologies, just please point me to the line number; if it\u0027s irrelevant, apologies, just explain why it\u0027s not applicable):\n\n* What if we add an item that\u0027s already present\n* What if we remove an item that is NOT present\n* What if we list and there are no items\n* What if we remove from a repeated field when there are no more values (if valid) OR What if I remove from the repeated list using an ID that is not present.\n* What if creation of some items that take an already existing ID (like port create) are given a non-existent value?\n* What if I enter bad primitives or malformed IP?\n* What about deleting routers, rules, and Vteps (I see network and port)?\n* What about listing routers, ports, etc. (I see network)?\n* What about updating routers, ports, etc. (I see network)?\n* What about getting routers, ports, etc. (I see network)?\n* What about deleting routers with IDs still present?\n* What about deleting other entities that have already-configured objects (I see the network-port test, so that\u0027s covered)?",
      "revId": "e710db7d8738d5ab7804952121fb8efda9af49cc",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "1a106d94_66582757",
        "filename": "cluster/src/test/scala/org/midonet/cluster/cli/BorisTest.scala",
        "patchSetId": 12
      },
      "lineNbr": 213,
      "author": {
        "id": 1002731
      },
      "writtenOn": "2015-03-30T19:20:54Z",
      "side": 1,
      "message": "Mmm not really. So, the CLI is actually agnostic to the types that it manages. It doesn\u0027t really matter that we use Network in most tests. The goal is to prove that we can parse the grammar. Once a command like \"Type verb property value\" works, then it will work for all types, all verbs, all properties.\n\nThings that we *do* need to test are:\n- That only valid types are parsed (covered)\n- That valid verbs work (covered)\n- That only valid properties within a given type work (covered)\n- That values for properties of primitive types are parsed correctly (covered)\n- That values for properties of \"Commons\" types are parsed (these are the UUID, IPv4, etc.) (covered)\n- That values of complex types are parsed e.g.: a field of the Router is a list of Route entities (covered)\n\nGiven successes here, then the types are unimportant.\n\nI\u0027ll add more specific comments on your suggestions:\n\n    What if we add an item that\u0027s already present\n    What if we remove an item that is NOT present\n\nThese are not testing the CLI, but the underlying storage layer (ZOOM) which is already tested by itself. Both of these cases will throw a ZOOM error. What I will do is add some command that does trigger a ZOOM error, so we prove that the CLI can handle them.\n\n    What if we list and there are no items\n\nI could add this, but it won\u0027t actually add any real coverage (like, 0).\n\n    What if we remove from a repeated field when there are no more values (if valid) OR What if I remove from the repeated list using an ID that is not present.\n\nDitto, these are ZOOM errors that the CLI will report. But no much code to test on our side, beyond bubbling up the error.\n\n    What if creation of some items that take an already existing ID (like port create) are given a non-existent value?\n\nDitto, that\u0027s all in ZOOM, nothing in CLI.\n\n    What if I enter bad primitives or malformed IP?\n\nThese can be tested generically. I will add one or two cases that set invalid values in the properties to prove that the failure is bubbled up correctly.\n\n    What about deleting routers, rules, and Vteps (I see network and port)?\n    What about listing routers, ports, etc. (I see network)?\n    What about updating routers, ports, etc. (I see network)?\n    What about getting routers, ports, etc. (I see network)?\n\nAs noted above, these are identical. The CLI is generic so there is no difference between deleting a Router or a Network. Exactly the same code would be executed. \n\n    What about deleting routers with IDs still present?\n\nNot sure I understand? You mean deleting a router that contains routes that haven\u0027t been deleted?\n\n    What about deleting other entities that have already-configured objects (I see the network-port test, so that\u0027s covered)?\n\nThis is handled by the storage layer (ZOOM) that applies cascading deletes automatically. The CLI doesn\u0027t do anything with it, as long as it issues the DELETE to the parent object, ZOOM will take care of the rest (which is logically tested in the ZOOM tests).",
      "parentUuid": "1a106d94_7c1d59bd",
      "revId": "e710db7d8738d5ab7804952121fb8efda9af49cc",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "1a106d94_a4ee9720",
        "filename": "cluster/src/test/scala/org/midonet/cluster/cli/BorisTest.scala",
        "patchSetId": 12
      },
      "lineNbr": 213,
      "author": {
        "id": 1003629
      },
      "writtenOn": "2015-03-31T01:40:42Z",
      "side": 1,
      "message": "Okay.  \nRegarding printing a null list: that suggestion was just to make sure that some exception doesn\u0027t get thrown when a null list returns to the CLI and the CLI goes to print out something that\u0027s null. :)\n\nAs for the rest: as this is a unit test, I will go with your judgement on the tests to ensure I will encounter no issues with the boris tool when we use this as part of MDTS.  Just bear in mind that when MDTS starts throwing data at this, it will likely be highly variant, and sometimes incorrect (cleaning up a topology in a global tear_down function that has already been cleaned up in the test for example), as well as purposeful negative tests designed to exercise the topologies.  \n\nThe list above were just suggestions I came up with keeping MDTS in mind. If you are confident you have 100% test coverage and operability under any usable scenarios (i.e. I don\u0027t care about crazy, no-on-will-do-this scenarios, only the ones MDTS will actually need), then I won\u0027t push back on anything.",
      "parentUuid": "1a106d94_66582757",
      "revId": "e710db7d8738d5ab7804952121fb8efda9af49cc",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "1a106d94_3c512163",
        "filename": "cluster/src/tools/README-BORIS",
        "patchSetId": 12
      },
      "lineNbr": 25,
      "author": {
        "id": 1003629
      },
      "writtenOn": "2015-03-30T08:45:58Z",
      "side": 1,
      "message": "Separated by newlines, I assume?  Like a script?",
      "range": {
        "startLine": 25,
        "startChar": 0,
        "endLine": 25,
        "endChar": 61
      },
      "revId": "e710db7d8738d5ab7804952121fb8efda9af49cc",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "1a106d94_26258fc2",
        "filename": "cluster/src/tools/README-BORIS",
        "patchSetId": 12
      },
      "lineNbr": 25,
      "author": {
        "id": 1002731
      },
      "writtenOn": "2015-03-30T19:36:04Z",
      "side": 1,
      "message": "Yes, I\u0027ll clarify (and possibly give an example).",
      "parentUuid": "1a106d94_3c512163",
      "range": {
        "startLine": 25,
        "startChar": 0,
        "endLine": 25,
        "endChar": 61
      },
      "revId": "e710db7d8738d5ab7804952121fb8efda9af49cc",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "1a106d94_9cdbf51a",
        "filename": "cluster/src/tools/README-BORIS",
        "patchSetId": 12
      },
      "lineNbr": 31,
      "author": {
        "id": 1002732
      },
      "writtenOn": "2015-03-30T08:22:31Z",
      "side": 1,
      "message": "extra white space.",
      "range": {
        "startLine": 31,
        "startChar": 19,
        "endLine": 31,
        "endChar": 20
      },
      "revId": "e710db7d8738d5ab7804952121fb8efda9af49cc",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "1a106d94_bcbb51c3",
        "filename": "cluster/src/tools/README-BORIS",
        "patchSetId": 12
      },
      "lineNbr": 34,
      "author": {
        "id": 1002732
      },
      "writtenOn": "2015-03-30T08:22:31Z",
      "side": 1,
      "message": "Can you provide a list of Types? or how to find those?",
      "range": {
        "startLine": 33,
        "startChar": 0,
        "endLine": 34,
        "endChar": 23
      },
      "revId": "e710db7d8738d5ab7804952121fb8efda9af49cc",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "1a106d94_260c6f42",
        "filename": "cluster/src/tools/README-BORIS",
        "patchSetId": 12
      },
      "lineNbr": 34,
      "author": {
        "id": 1002731
      },
      "writtenOn": "2015-03-30T19:36:04Z",
      "side": 1,
      "message": "They are in cluster/src/main/proto/topology.proto, for dev I think we can keep them there as anyone can just look them up via Github and we\u0027re all sufficiently tech-savvy to read them. https://github.com/midonet/midonet/blob/master/cluster/src/main/proto/topology.proto\n\nBut, if this is going to be used beyond internal engineers, I\u0027d suggest to enhance this:\n\n- Either on build time, we generate a man page with this README, and dynamically paste the types (and possibly the definitions) in the README. \n- Or, have the CLI is to provide a command to dump of the supported objects (which is doable using pretty much the same code as for inline suggestions).\n\nThose are nice to haves, but as I said today for engineers I think the proto file is sufficiently readable. Tell me otherwise.",
      "parentUuid": "1a106d94_bcbb51c3",
      "range": {
        "startLine": 33,
        "startChar": 0,
        "endLine": 34,
        "endChar": 23
      },
      "revId": "e710db7d8738d5ab7804952121fb8efda9af49cc",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "1a106d94_dcc72d11",
        "filename": "cluster/src/tools/README-BORIS",
        "patchSetId": 12
      },
      "lineNbr": 46,
      "author": {
        "id": 1003629
      },
      "writtenOn": "2015-03-30T08:45:58Z",
      "side": 1,
      "message": "Can we get a pseudo-BNF or even just a standard \"Unix-style help\" list for these, so we know which verbs are useful for which types exactly?  And which exact parameters/fields are valid for which verb/type combo?\n\nSomething like:\n\nnetwork create name \u003cname\u003e [optional_field optional_value]\nnetwork update id \u003cid\u003e name \u003cname\u003e\n\nor:\n\n\u003ctype\u003e create name \u003cname\u003e\n\u003ctype\u003e update id \u003cid\u003e name \u003cname\u003e\n\nif the verbs are the same for all types.\n\nBasically, it would go a long way into explaining the full grammar as well as all the cool things I can do (and how!), in one quick summary section.",
      "range": {
        "startLine": 45,
        "startChar": 0,
        "endLine": 46,
        "endChar": 31
      },
      "revId": "e710db7d8738d5ab7804952121fb8efda9af49cc",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "1a106d94_66066722",
        "filename": "cluster/src/tools/README-BORIS",
        "patchSetId": 12
      },
      "lineNbr": 46,
      "author": {
        "id": 1002731
      },
      "writtenOn": "2015-03-30T19:36:04Z",
      "side": 1,
      "message": "Yeah, i\u0027ll specify the grammar better.\n\nRe documenting the specific types see the notes above. I plan to add auto completion, and we could have a dump command to show the syntax of each type. \n\nHowever, given that the proto file is very easy to read, and we\u0027re using this internally I\u0027d say we should prioritize other enhancements over it.\n\nMy point is avoiding to hardcode code or documentation with specific types, and instead generate them dynamically as the proto file grows, so that there is 0 maintenance cost.",
      "parentUuid": "1a106d94_dcc72d11",
      "range": {
        "startLine": 45,
        "startChar": 0,
        "endLine": 46,
        "endChar": 31
      },
      "revId": "e710db7d8738d5ab7804952121fb8efda9af49cc",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "1a106d94_1010894d",
        "filename": "cluster/src/tools/README-BORIS",
        "patchSetId": 12
      },
      "lineNbr": 50,
      "author": {
        "id": 1002763
      },
      "writtenOn": "2015-03-30T10:02:31Z",
      "side": 1,
      "message": "could we lower-case-ize the type names?\n\nplease please",
      "revId": "e710db7d8738d5ab7804952121fb8efda9af49cc",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "1a106d94_46036b0f",
        "filename": "cluster/src/tools/README-BORIS",
        "patchSetId": 12
      },
      "lineNbr": 50,
      "author": {
        "id": 1002731
      },
      "writtenOn": "2015-03-30T19:36:04Z",
      "side": 1,
      "message": "Yeah, I couldn\u0027t get bothered to do it but it\u0027s in the list :D",
      "parentUuid": "1a106d94_1010894d",
      "revId": "e710db7d8738d5ab7804952121fb8efda9af49cc",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "1a106d94_5cca1d50",
        "filename": "cluster/src/tools/README-BORIS",
        "patchSetId": 12
      },
      "lineNbr": 52,
      "author": {
        "id": 1002732
      },
      "writtenOn": "2015-03-30T08:22:31Z",
      "side": 1,
      "message": "Can you provide a machine friendly output? e.g. json. So it can be programmatically used?",
      "revId": "e710db7d8738d5ab7804952121fb8efda9af49cc",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "1a106d94_a9ff9000",
        "filename": "cluster/src/tools/README-BORIS",
        "patchSetId": 12
      },
      "lineNbr": 52,
      "author": {
        "id": 1002731
      },
      "writtenOn": "2015-03-30T19:36:04Z",
      "side": 1,
      "message": "Certainly. \n\nDo you prefer to see a full JSON dump of the object by default? This makes my life easier actually :D",
      "parentUuid": "1a106d94_5cca1d50",
      "revId": "e710db7d8738d5ab7804952121fb8efda9af49cc",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "1a106d94_7cd8b91d",
        "filename": "cluster/src/tools/README-BORIS",
        "patchSetId": 12
      },
      "lineNbr": 56,
      "author": {
        "id": 1002732
      },
      "writtenOn": "2015-03-30T08:22:31Z",
      "side": 1,
      "message": "What are the default values?",
      "range": {
        "startLine": 56,
        "startChar": 17,
        "endLine": 56,
        "endChar": 32
      },
      "revId": "e710db7d8738d5ab7804952121fb8efda9af49cc",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "1a106d94_491a5c6f",
        "filename": "cluster/src/tools/README-BORIS",
        "patchSetId": 12
      },
      "lineNbr": 56,
      "author": {
        "id": 1002731
      },
      "writtenOn": "2015-03-30T19:36:04Z",
      "side": 1,
      "message": "The ones defined in the proto file (again, these could be exposed in the inline suggestions, or the dump command, when implemented). \n\nBut actually we\u0027re planning to remove defaults because future versions of protobufs don\u0027t support it.",
      "parentUuid": "1a106d94_7cd8b91d",
      "range": {
        "startLine": 56,
        "startChar": 17,
        "endLine": 56,
        "endChar": 32
      },
      "revId": "e710db7d8738d5ab7804952121fb8efda9af49cc",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "1a106d94_3cd801ef",
        "filename": "cluster/src/tools/README-BORIS",
        "patchSetId": 12
      },
      "lineNbr": 58,
      "author": {
        "id": 1003629
      },
      "writtenOn": "2015-03-30T08:45:58Z",
      "side": 1,
      "message": "What\u0027s being updated here, the name or the ID?  The name I assume, but it\u0027d be nice to spell out that the UUID is constant and everything else can be changed.",
      "range": {
        "startLine": 58,
        "startChar": 0,
        "endLine": 58,
        "endChar": 9
      },
      "revId": "e710db7d8738d5ab7804952121fb8efda9af49cc",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "1a106d94_c925acac",
        "filename": "cluster/src/tools/README-BORIS",
        "patchSetId": 12
      },
      "lineNbr": 58,
      "author": {
        "id": 1002731
      },
      "writtenOn": "2015-03-30T19:36:04Z",
      "side": 1,
      "message": "On\n\n  Type verb id \u003cuuid\u003e \u003cproperty\u003e \u003cvalue\u003e\n\nyou\u0027d be updating the entity with id \u003cuuid\u003e of type Type, setting the \u003cproperty\u003e to \u003cvalue\u003e\n\nI\u0027ll clarify this.",
      "parentUuid": "1a106d94_3cd801ef",
      "range": {
        "startLine": 58,
        "startChar": 0,
        "endLine": 58,
        "endChar": 9
      },
      "revId": "e710db7d8738d5ab7804952121fb8efda9af49cc",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "1a106d94_70345dde",
        "filename": "cluster/src/tools/README-BORIS",
        "patchSetId": 12
      },
      "lineNbr": 60,
      "author": {
        "id": 1002763
      },
      "writtenOn": "2015-03-30T10:02:31Z",
      "side": 1,
      "message": "can i write a boris script where the second command uses the id returned by the 1st one?",
      "revId": "e710db7d8738d5ab7804952121fb8efda9af49cc",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "1a106d94_e957c800",
        "filename": "cluster/src/tools/README-BORIS",
        "patchSetId": 12
      },
      "lineNbr": 60,
      "author": {
        "id": 1002731
      },
      "writtenOn": "2015-03-30T19:36:04Z",
      "side": 1,
      "message": "Yeah, I have a plan for this, that works nicely assuming you can do \"cat script | boris\". E.g., Boris stacks internally all ids modified, and gives you aliases like \"id6\" meaning the id of the object modified 6 commands ago.\n\n@tomoe @michael your scripts are primary users of this, so idease are welcome.",
      "parentUuid": "1a106d94_70345dde",
      "revId": "e710db7d8738d5ab7804952121fb8efda9af49cc",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "1a106d94_fc030971",
        "filename": "cluster/src/tools/README-BORIS",
        "patchSetId": 12
      },
      "lineNbr": 83,
      "author": {
        "id": 1002732
      },
      "writtenOn": "2015-03-30T08:22:31Z",
      "side": 1,
      "message": "what does \"Commons package\" mean?",
      "range": {
        "startLine": 83,
        "startChar": 4,
        "endLine": 83,
        "endChar": 20
      },
      "revId": "e710db7d8738d5ab7804952121fb8efda9af49cc",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "1a106d94_093ea4b8",
        "filename": "cluster/src/tools/README-BORIS",
        "patchSetId": 12
      },
      "lineNbr": 83,
      "author": {
        "id": 1002731
      },
      "writtenOn": "2015-03-30T19:36:04Z",
      "side": 1,
      "message": "Commons is another protobuf file that contains various utility classes. For example, UUID, IP addresses, Ranges, etc. The definition is https://github.com/midonet/midonet/blob/master/cluster/src/main/proto/commons.proto",
      "parentUuid": "1a106d94_fc030971",
      "range": {
        "startLine": 83,
        "startChar": 4,
        "endLine": 83,
        "endChar": 20
      },
      "revId": "e710db7d8738d5ab7804952121fb8efda9af49cc",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "1a106d94_3cf5a183",
        "filename": "cluster/src/tools/README-BORIS",
        "patchSetId": 12
      },
      "lineNbr": 85,
      "author": {
        "id": 1002732
      },
      "writtenOn": "2015-03-30T08:22:31Z",
      "side": 1,
      "message": "extra spaces",
      "range": {
        "startLine": 85,
        "startChar": 36,
        "endLine": 85,
        "endChar": 39
      },
      "revId": "e710db7d8738d5ab7804952121fb8efda9af49cc",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "1a106d94_49489c5b",
        "filename": "cluster/src/tools/README-BORIS",
        "patchSetId": 12
      },
      "lineNbr": 85,
      "author": {
        "id": 1002731
      },
      "writtenOn": "2015-03-30T19:36:04Z",
      "side": 1,
      "message": "It\u0027s done on purpose, and all over the place, I think Jacob like these.",
      "parentUuid": "1a106d94_3cf5a183",
      "range": {
        "startLine": 85,
        "startChar": 36,
        "endLine": 85,
        "endChar": 39
      },
      "revId": "e710db7d8738d5ab7804952121fb8efda9af49cc",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "1a106d94_dc2bade9",
        "filename": "cluster/src/tools/README-BORIS",
        "patchSetId": 12
      },
      "lineNbr": 94,
      "author": {
        "id": 1002732
      },
      "writtenOn": "2015-03-30T08:22:31Z",
      "side": 1,
      "message": "extra f",
      "range": {
        "startLine": 94,
        "startChar": 15,
        "endLine": 94,
        "endChar": 16
      },
      "revId": "e710db7d8738d5ab7804952121fb8efda9af49cc",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "1a106d94_33414f3a",
        "filename": "cluster/src/tools/README-BORIS",
        "patchSetId": 12
      },
      "lineNbr": 137,
      "author": {
        "id": 1002732
      },
      "writtenOn": "2015-03-30T14:30:16Z",
      "side": 1,
      "message": "Can you define exit codes?",
      "revId": "e710db7d8738d5ab7804952121fb8efda9af49cc",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "1a106d94_a974b09c",
        "filename": "cluster/src/tools/README-BORIS",
        "patchSetId": 12
      },
      "lineNbr": 137,
      "author": {
        "id": 1002731
      },
      "writtenOn": "2015-03-30T19:36:04Z",
      "side": 1,
      "message": "Yes, I\u0027ll paste the real output",
      "parentUuid": "1a106d94_33414f3a",
      "revId": "e710db7d8738d5ab7804952121fb8efda9af49cc",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "1a106d94_902bd981",
        "filename": "cluster/src/tools/scala/cli/Boris.scala",
        "patchSetId": 12
      },
      "lineNbr": 17,
      "author": {
        "id": 1002763
      },
      "writtenOn": "2015-03-30T10:02:31Z",
      "side": 1,
      "message": "kudos for supporting all types on 431 lines of code :)",
      "revId": "e710db7d8738d5ab7804952121fb8efda9af49cc",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "1a106d94_8979f495",
        "filename": "cluster/src/tools/scala/cli/Boris.scala",
        "patchSetId": 12
      },
      "lineNbr": 17,
      "author": {
        "id": 1002731
      },
      "writtenOn": "2015-03-30T19:36:04Z",
      "side": 1,
      "message": "Midonet-cli set the right precedent ;)",
      "parentUuid": "1a106d94_902bd981",
      "revId": "e710db7d8738d5ab7804952121fb8efda9af49cc",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    }
  ]
}
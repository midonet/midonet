{
  "comments": [
    {
      "key": {
        "uuid": "fa81d914_aa801647",
        "filename": "midolman/src/main/java/org/midonet/cluster/data/dhcp/Opt121.java",
        "patchSetId": 1
      },
      "lineNbr": 65,
      "author": {
        "id": 1002740
      },
      "writtenOn": "2016-01-26T07:52:28Z",
      "side": 1,
      "message": "Why not just use the Guava\u0027s Objects here for cleanliness?\n\n        return Objects.equal(rtDstSubnet, o.rtDstSubnet)\n                \u0026\u0026 Objects.equal(gateway, other.gateway)",
      "revId": "ed373273ca187d365ba62344753679f2c3451756",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "fa81d914_8a42720e",
        "filename": "midolman/src/main/java/org/midonet/cluster/data/dhcp/Opt121.java",
        "patchSetId": 1
      },
      "lineNbr": 65,
      "author": {
        "id": 1002821
      },
      "writtenOn": "2016-01-26T10:03:02Z",
      "side": 1,
      "message": "I like to put the \u0026\u0026 and the end and align the \"Objects\". But either way it\u0027s preferable to this.",
      "parentUuid": "fa81d914_aa801647",
      "revId": "ed373273ca187d365ba62344753679f2c3451756",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "fa81d914_ea912e9b",
        "filename": "midolman/src/main/scala/org/midonet/midolman/simulation/DhcpImpl.scala",
        "patchSetId": 1
      },
      "lineNbr": 21,
      "author": {
        "id": 1002740
      },
      "writtenOn": "2016-01-26T07:52:28Z",
      "side": 1,
      "message": "Unused",
      "revId": "ed373273ca187d365ba62344753679f2c3451756",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "fa81d914_2a8c267f",
        "filename": "midolman/src/main/scala/org/midonet/midolman/simulation/DhcpImpl.scala",
        "patchSetId": 1
      },
      "lineNbr": 803,
      "author": {
        "id": 1002740
      },
      "writtenOn": "2016-01-26T07:52:28Z",
      "side": 1,
      "message": "Not a big deal, but it might be cleaner if you just added opt121DefaultRoute to opt121Routes instead of doing bytes.appendAll.",
      "revId": "ed373273ca187d365ba62344753679f2c3451756",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "fa81d914_0a912299",
        "filename": "midolman/src/test/scala/org/midonet/midolman/DhcpTest.scala",
        "patchSetId": 1
      },
      "lineNbr": 22,
      "author": {
        "id": 1002740
      },
      "writtenOn": "2016-01-26T07:52:28Z",
      "side": 1,
      "message": "Wrong import location",
      "revId": "ed373273ca187d365ba62344753679f2c3451756",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "fa81d914_8af432f3",
        "filename": "midolman/src/test/scala/org/midonet/midolman/DhcpTest.scala",
        "patchSetId": 1
      },
      "lineNbr": 437,
      "author": {
        "id": 1002740
      },
      "writtenOn": "2016-01-26T07:52:28Z",
      "side": 1,
      "message": "why not just use scala\u0027s List?",
      "revId": "ed373273ca187d365ba62344753679f2c3451756",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "fa81d914_cad1cafc",
        "filename": "midolman/src/test/scala/org/midonet/midolman/DhcpTest.scala",
        "patchSetId": 1
      },
      "lineNbr": 438,
      "author": {
        "id": 1002821
      },
      "writtenOn": "2016-01-26T10:03:02Z",
      "side": 1,
      "message": "Need to iterate through a byte buffer? Why not ByteBuffer?\n\n  val bb \u003d ByteBuffer.wrap(bytes)\n  while (bb.hasRemaining) {\n    val maskLen \u003d bb.get()\n    var mask \u003d 0\n    for (i \u003c- 0 to 3) {\n      mask \u003c\u003c\u003d 8\n      if (maskLen \u003e i * 8) mask |\u003d bb.get()\n    }\n    val opt121 \u003d new Opt121\n    opt121.setRtDstSubnet(new IPv4Subnet(mask, maskLen))\n    opt121.setGateway(IPv4Addr(bb.getInt()))\n    opt121Routes.add(opt121)\n  }\n\n...or something like that. I haven\u0027t tested it.",
      "range": {
        "startLine": 438,
        "startChar": 8,
        "endLine": 438,
        "endChar": 17
      },
      "revId": "ed373273ca187d365ba62344753679f2c3451756",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "fa81d914_aaf736f4",
        "filename": "midolman/src/test/scala/org/midonet/midolman/DhcpTest.scala",
        "patchSetId": 1
      },
      "lineNbr": 444,
      "author": {
        "id": 1002740
      },
      "writtenOn": "2016-01-26T07:52:28Z",
      "side": 1,
      "message": "Not sure what the consequence of defining this inside the while loop.  Was it because you wanted to directly access \u0027i\u0027?  If so, why not just do so in getByte()?",
      "revId": "ed373273ca187d365ba62344753679f2c3451756",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "fa81d914_cadd4a72",
        "filename": "midolman/src/test/scala/org/midonet/midolman/DhcpTest.scala",
        "patchSetId": 1
      },
      "lineNbr": 451,
      "author": {
        "id": 1002740
      },
      "writtenOn": "2016-01-26T07:52:28Z",
      "side": 1,
      "message": "Consider instead:\n\nval b1 \u003d if (maskLen \u003e 0) getByte() else 0\n\nand remove the initialization above",
      "revId": "ed373273ca187d365ba62344753679f2c3451756",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "fa81d914_6ad45e47",
        "filename": "midolman/src/test/scala/org/midonet/midolman/DhcpTest.scala",
        "patchSetId": 1
      },
      "lineNbr": 456,
      "author": {
        "id": 1002740
      },
      "writtenOn": "2016-01-26T07:52:28Z",
      "side": 1,
      "message": "Feels like there should be a cleaner way to achieve this.  Is the format.  How about something like:\n\nIPv4Addr.fromBytes(Array(b1, b2, b3, b4))",
      "revId": "ed373273ca187d365ba62344753679f2c3451756",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "fa81d914_4aea3a10",
        "filename": "midolman/src/test/scala/org/midonet/midolman/DhcpTest.scala",
        "patchSetId": 1
      },
      "lineNbr": 475,
      "author": {
        "id": 1002740
      },
      "writtenOn": "2016-01-26T07:52:28Z",
      "side": 1,
      "message": "There is enum defined for this: CLASSLESS_ROUTES",
      "revId": "ed373273ca187d365ba62344753679f2c3451756",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "fa81d914_6aed3e25",
        "filename": "midolman/src/test/scala/org/midonet/midolman/DhcpTest.scala",
        "patchSetId": 1
      },
      "lineNbr": 478,
      "author": {
        "id": 1002740
      },
      "writtenOn": "2016-01-26T07:52:28Z",
      "side": 1,
      "message": "break?  Or just count the number of matches and verify that it\u0027s only one?",
      "revId": "ed373273ca187d365ba62344753679f2c3451756",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "fa81d914_0adcc211",
        "filename": "midolman/src/test/scala/org/midonet/midolman/DhcpTest.scala",
        "patchSetId": 1
      },
      "lineNbr": 482,
      "author": {
        "id": 1002821
      },
      "writtenOn": "2016-01-26T10:03:02Z",
      "side": 1,
      "message": "Can we be more strict here? Don\u0027t we know more about what we expect to receive, other than that there should be at least one opt121 that has the specified data?",
      "range": {
        "startLine": 482,
        "startChar": 8,
        "endLine": 482,
        "endChar": 29
      },
      "revId": "ed373273ca187d365ba62344753679f2c3451756",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    }
  ]
}
{
  "comments": [
    {
      "key": {
        "uuid": "1a930d6b_ab694927",
        "filename": "midolman/src/main/scala/org/midonet/containers/IPSecContainer.scala",
        "patchSetId": 3
      },
      "lineNbr": 242,
      "author": {
        "id": 1003555
      },
      "writtenOn": "2015-12-29T18:16:10Z",
      "side": 1,
      "message": "this isn\u0027t thread safe. Is there guarantee that this always runs in the same thread, and likewise for delete?",
      "range": {
        "startLine": 240,
        "startChar": 12,
        "endLine": 242,
        "endChar": 52
      },
      "revId": "5f976eaed5882fe3e29b209aa450feb7da82b524",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "1a930d6b_31094896",
        "filename": "midolman/src/main/scala/org/midonet/containers/IPSecContainer.scala",
        "patchSetId": 3
      },
      "lineNbr": 242,
      "author": {
        "id": 1003318
      },
      "writtenOn": "2015-12-30T16:11:14Z",
      "side": 1,
      "message": "Yes, it\u0027s guaranteed that those methods are always executed by the same thread. The container service schedule events on its own executor which calls these create/delete/update methods (and it\u0027s the same executor used in this class). Besides, events for container handlers are serialized by means of a conveyor belt (so an op is not started until the previous one is completed). Now that I think, the conveyor belt could be multiline as we only need to serialize ops for a given container. Maybe on a future patch.",
      "parentUuid": "1a930d6b_ab694927",
      "range": {
        "startLine": 240,
        "startChar": 12,
        "endLine": 242,
        "endChar": 52
      },
      "revId": "5f976eaed5882fe3e29b209aa450feb7da82b524",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "1a930d6b_8b6c8d38",
        "filename": "midolman/src/main/scala/org/midonet/containers/IPSecContainer.scala",
        "patchSetId": 3
      },
      "lineNbr": 244,
      "author": {
        "id": 1003555
      },
      "writtenOn": "2015-12-29T18:16:10Z",
      "side": 1,
      "message": "should specify a scheduler for this to run on.",
      "range": {
        "startLine": 244,
        "startChar": 0,
        "endLine": 244,
        "endChar": 63
      },
      "revId": "5f976eaed5882fe3e29b209aa450feb7da82b524",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "1a930d6b_11b60cdd",
        "filename": "midolman/src/main/scala/org/midonet/containers/IPSecContainer.scala",
        "patchSetId": 3
      },
      "lineNbr": 244,
      "author": {
        "id": 1003318
      },
      "writtenOn": "2015-12-30T16:11:14Z",
      "side": 1,
      "message": "The scheduler (container scheduler) is specified on the vpnServiceObservable method. Should I move it here?",
      "parentUuid": "1a930d6b_8b6c8d38",
      "range": {
        "startLine": 244,
        "startChar": 0,
        "endLine": 244,
        "endChar": 63
      },
      "revId": "5f976eaed5882fe3e29b209aa450feb7da82b524",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "1a930d6b_6b8841e8",
        "filename": "midolman/src/main/scala/org/midonet/containers/IPSecContainer.scala",
        "patchSetId": 3
      },
      "lineNbr": 248,
      "author": {
        "id": 1003555
      },
      "writtenOn": "2015-12-29T18:16:10Z",
      "side": 1,
      "message": "actually, these actions can be given as the second and third argument to subscribe.",
      "range": {
        "startLine": 245,
        "startChar": 16,
        "endLine": 248,
        "endChar": 75
      },
      "revId": "5f976eaed5882fe3e29b209aa450feb7da82b524",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "1a930d6b_11044c7d",
        "filename": "midolman/src/main/scala/org/midonet/containers/IPSecContainer.scala",
        "patchSetId": 3
      },
      "lineNbr": 248,
      "author": {
        "id": 1003318
      },
      "writtenOn": "2015-12-30T16:11:14Z",
      "side": 1,
      "message": "Didn\u0027t know that, ok. Anyway, isn\u0027t it more clear to have it outside of the subscribe or is there a hidden side effect that I\u0027m not aware?",
      "parentUuid": "1a930d6b_6b8841e8",
      "range": {
        "startLine": 245,
        "startChar": 16,
        "endLine": 248,
        "endChar": 75
      },
      "revId": "5f976eaed5882fe3e29b209aa450feb7da82b524",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "fa81d914_2a3c7f93",
        "filename": "midolman/src/main/scala/org/midonet/containers/IPSecContainer.scala",
        "patchSetId": 3
      },
      "lineNbr": 248,
      "author": {
        "id": 1002751
      },
      "writtenOn": "2015-12-30T21:13:32Z",
      "side": 1,
      "message": "No side effect, afaik. Only that each operator will add an additional subscriber, so slightly more inefficient since it creates many more objects (including all makeAction functions), but it should be ok other than that. Alternatively you could create a single Observer instance to handle all three notifications.",
      "parentUuid": "1a930d6b_11044c7d",
      "range": {
        "startLine": 245,
        "startChar": 16,
        "endLine": 248,
        "endChar": 75
      },
      "revId": "5f976eaed5882fe3e29b209aa450feb7da82b524",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    }
  ]
}
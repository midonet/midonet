{
  "comments": [
    {
      "key": {
        "uuid": "5ac4a560_10909042",
        "filename": "midonet-cluster/src/main/java/org/midonet/cluster/rest_api/models/ServiceContainer.java",
        "patchSetId": 16
      },
      "lineNbr": 38,
      "author": {
        "id": 1002821
      },
      "writtenOn": "2015-12-03T05:43:35Z",
      "side": 1,
      "message": "What does this mean?",
      "range": {
        "startLine": 37,
        "startChar": 0,
        "endLine": 38,
        "endChar": 14
      },
      "revId": "532d8289e0f97067d976d9012d519731605d91ad",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5ac4a560_9bacc1ef",
        "filename": "midonet-cluster/src/main/java/org/midonet/cluster/rest_api/models/ServiceContainer.java",
        "patchSetId": 16
      },
      "lineNbr": 38,
      "author": {
        "id": 1002731
      },
      "writtenOn": "2015-12-03T07:08:30Z",
      "side": 1,
      "message": "Axplanation for the annotation below. The json contains some fields with URIs.  Since they are not declared as settable, if you use this class to deserialize in the tests it fails, because the test deserializer has a fail_if_unknown_field setting (for reasons unknown, but I don\u0027t want to change it and impact everything).",
      "parentUuid": "5ac4a560_10909042",
      "range": {
        "startLine": 37,
        "startChar": 0,
        "endLine": 38,
        "endChar": 14
      },
      "revId": "532d8289e0f97067d976d9012d519731605d91ad",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5ac4a560_1b6431b8",
        "filename": "midonet-cluster/src/main/scala/org/midonet/cluster/services/rest_api/resources/ServiceContainerResource.scala",
        "patchSetId": 16
      },
      "lineNbr": 34,
      "author": {
        "id": 1002821
      },
      "writtenOn": "2015-12-03T08:02:50Z",
      "side": 1,
      "message": "For the other resource types, we use lower camel case for the name (but still underscores for the @Path)",
      "range": {
        "startLine": 34,
        "startChar": 13,
        "endLine": 34,
        "endChar": 41
      },
      "revId": "532d8289e0f97067d976d9012d519731605d91ad",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5ac4a560_70b624db",
        "filename": "midonet-cluster/src/main/scala/org/midonet/cluster/services/rest_api/resources/ServiceContainerResource.scala",
        "patchSetId": 16
      },
      "lineNbr": 53,
      "author": {
        "id": 1002821
      },
      "writtenOn": "2015-12-03T05:43:35Z",
      "side": 1,
      "message": "I think the preferred way to do this is to make the constructor with more arguments the primary constructor. That way parentResId can be a val, and it also saves a line of code. You could even make it an optional argument, and eliminate the secondary constructor altogether, I think.",
      "range": {
        "startLine": 48,
        "startChar": 0,
        "endLine": 53,
        "endChar": 5
      },
      "revId": "532d8289e0f97067d976d9012d519731605d91ad",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5ac4a560_bbb97d30",
        "filename": "midonet-cluster/src/main/scala/org/midonet/cluster/services/rest_api/resources/ServiceContainerResource.scala",
        "patchSetId": 16
      },
      "lineNbr": 53,
      "author": {
        "id": 1002731
      },
      "writtenOn": "2015-12-03T07:08:30Z",
      "side": 1,
      "message": "It\u0027s an @Inject, so it\u0027ll be troublesome.",
      "parentUuid": "5ac4a560_70b624db",
      "range": {
        "startLine": 48,
        "startChar": 0,
        "endLine": 53,
        "endChar": 5
      },
      "revId": "532d8289e0f97067d976d9012d519731605d91ad",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5ac4a560_5b5ea9e7",
        "filename": "midonet-cluster/src/main/scala/org/midonet/cluster/services/rest_api/resources/ServiceContainerResource.scala",
        "patchSetId": 16
      },
      "lineNbr": 53,
      "author": {
        "id": 1002821
      },
      "writtenOn": "2015-12-03T08:02:50Z",
      "side": 1,
      "message": "Ah, that makes sense.",
      "parentUuid": "5ac4a560_bbb97d30",
      "range": {
        "startLine": 48,
        "startChar": 0,
        "endLine": 53,
        "endChar": 5
      },
      "revId": "532d8289e0f97067d976d9012d519731605d91ad",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5ac4a560_70ed44c3",
        "filename": "midonet-cluster/src/main/scala/org/midonet/cluster/services/rest_api/resources/ServiceContainerResource.scala",
        "patchSetId": 16
      },
      "lineNbr": 60,
      "author": {
        "id": 1002821
      },
      "writtenOn": "2015-12-03T05:43:35Z",
      "side": 1,
      "message": "It looks like this allows creating a container that doesn\u0027t belong to a group. And we don\u0027t support update, so it will never belong to a group.\n\nI believe that this also will let a ServiceContainer through without an ID. It should still fail in Zoom, but normally we assign a random ID to a topology object if none is specified.\n\nWe already have an established pattern for nested resources that\u0027s been tested extensively. Why don\u0027t we use that?",
      "range": {
        "startLine": 60,
        "startChar": 8,
        "endLine": 60,
        "endChar": 34
      },
      "revId": "532d8289e0f97067d976d9012d519731605d91ad",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5ac4a560_5bab09d8",
        "filename": "midonet-cluster/src/main/scala/org/midonet/cluster/services/rest_api/resources/ServiceContainerResource.scala",
        "patchSetId": 16
      },
      "lineNbr": 60,
      "author": {
        "id": 1002821
      },
      "writtenOn": "2015-12-03T07:04:33Z",
      "side": 1,
      "message": "Or is creating a service container with no group allowed?",
      "parentUuid": "5ac4a560_70ed44c3",
      "range": {
        "startLine": 60,
        "startChar": 8,
        "endLine": 60,
        "endChar": 34
      },
      "revId": "532d8289e0f97067d976d9012d519731605d91ad",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5ac4a560_dbb6393d",
        "filename": "midonet-cluster/src/main/scala/org/midonet/cluster/services/rest_api/resources/ServiceContainerResource.scala",
        "patchSetId": 16
      },
      "lineNbr": 60,
      "author": {
        "id": 1002731
      },
      "writtenOn": "2015-12-03T07:08:30Z",
      "side": 1,
      "message": "createFilter just applies generic filters, doesn\u0027t actually create.\n\nIt is intentional, an SC could exist by itself.",
      "parentUuid": "5ac4a560_5bab09d8",
      "range": {
        "startLine": 60,
        "startChar": 8,
        "endLine": 60,
        "endChar": 34
      },
      "revId": "532d8289e0f97067d976d9012d519731605d91ad",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5ac4a560_7b72857d",
        "filename": "midonet-cluster/src/main/scala/org/midonet/cluster/services/rest_api/resources/ServiceContainerResource.scala",
        "patchSetId": 16
      },
      "lineNbr": 60,
      "author": {
        "id": 1002821
      },
      "writtenOn": "2015-12-03T08:02:50Z",
      "side": 1,
      "message": "I have an implementation that uses the pattern we use for the other nested resources, if you want it. It does break all the tests, though, since they try to create ServiceContainers at the top level rather than under groups. It could be modified easily to allow top-level creates, but I\u0027m still not sure that that\u0027s what we want.",
      "parentUuid": "5ac4a560_dbb6393d",
      "range": {
        "startLine": 60,
        "startChar": 8,
        "endLine": 60,
        "endChar": 34
      },
      "revId": "532d8289e0f97067d976d9012d519731605d91ad",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5ac4a560_3b59edfe",
        "filename": "midonet-cluster/src/main/scala/org/midonet/cluster/services/rest_api/resources/ServiceContainerResource.scala",
        "patchSetId": 16
      },
      "lineNbr": 66,
      "author": {
        "id": 1002821
      },
      "writtenOn": "2015-12-03T08:02:50Z",
      "side": 1,
      "message": "Camel case. Also, these properties should be added to ApplicationDto.",
      "range": {
        "startLine": 66,
        "startChar": 13,
        "endLine": 66,
        "endChar": 47
      },
      "revId": "532d8289e0f97067d976d9012d519731605d91ad",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5ac4a560_300aec8a",
        "filename": "midonet-cluster/src/test/scala/org/midonet/cluster/HttpRequestChecks.scala",
        "patchSetId": 16
      },
      "lineNbr": 99,
      "author": {
        "id": 1002821
      },
      "writtenOn": "2015-12-03T05:43:35Z",
      "side": 1,
      "message": "There\u0027s an overload of getEntity that takes a Type instead of a Class. I wonder if that can be used to get a list directly.",
      "range": {
        "startLine": 99,
        "startChar": 0,
        "endLine": 99,
        "endChar": 46
      },
      "revId": "532d8289e0f97067d976d9012d519731605d91ad",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5ac4a560_1b88b170",
        "filename": "midonet-cluster/src/test/scala/org/midonet/cluster/HttpRequestChecks.scala",
        "patchSetId": 16
      },
      "lineNbr": 99,
      "author": {
        "id": 1002731
      },
      "writtenOn": "2015-12-03T07:08:30Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "5ac4a560_300aec8a",
      "range": {
        "startLine": 99,
        "startChar": 0,
        "endLine": 99,
        "endChar": 46
      },
      "revId": "532d8289e0f97067d976d9012d519731605d91ad",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5ac4a560_500da88f",
        "filename": "midonet-cluster/src/test/scala/org/midonet/cluster/HttpRequestChecks.scala",
        "patchSetId": 16
      },
      "lineNbr": 103,
      "author": {
        "id": 1002821
      },
      "writtenOn": "2015-12-03T05:43:35Z",
      "side": 1,
      "message": "In any case, this should be ct.runtimeClass.",
      "range": {
        "startLine": 103,
        "startChar": 47,
        "endLine": 103,
        "endChar": 63
      },
      "revId": "532d8289e0f97067d976d9012d519731605d91ad",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5ac4a560_3b7d6d6f",
        "filename": "midonet-cluster/src/test/scala/org/midonet/cluster/HttpRequestChecks.scala",
        "patchSetId": 16
      },
      "lineNbr": 103,
      "author": {
        "id": 1002731
      },
      "writtenOn": "2015-12-03T07:08:30Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "5ac4a560_500da88f",
      "range": {
        "startLine": 103,
        "startChar": 47,
        "endLine": 103,
        "endChar": 63
      },
      "revId": "532d8289e0f97067d976d9012d519731605d91ad",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5ac4a560_50ff6867",
        "filename": "midonet-cluster/src/test/scala/org/midonet/cluster/services/rest_api/resources/TestServiceContainersApi.scala",
        "patchSetId": 16
      },
      "lineNbr": 89,
      "author": {
        "id": 1002821
      },
      "writtenOn": "2015-12-03T05:43:35Z",
      "side": 1,
      "message": "Why are these commented out?",
      "revId": "532d8289e0f97067d976d9012d519731605d91ad",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5ac4a560_fb821551",
        "filename": "midonet-cluster/src/test/scala/org/midonet/cluster/services/rest_api/resources/TestServiceContainersApi.scala",
        "patchSetId": 16
      },
      "lineNbr": 89,
      "author": {
        "id": 1002731
      },
      "writtenOn": "2015-12-03T07:08:30Z",
      "side": 1,
      "message": "Impatience. Fixing.",
      "parentUuid": "5ac4a560_50ff6867",
      "revId": "532d8289e0f97067d976d9012d519731605d91ad",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    }
  ]
}
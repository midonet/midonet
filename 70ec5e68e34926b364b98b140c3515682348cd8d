{
  "comments": [
    {
      "key": {
        "uuid": "5ac4a560_dc48ef5d",
        "filename": "midonet-cluster/src/main/scala/org/midonet/cluster/services/DeviceStateWatcher.scala",
        "patchSetId": 7
      },
      "lineNbr": 46,
      "author": {
        "id": 1002731
      },
      "writtenOn": "2015-12-03T14:26:26Z",
      "side": 1,
      "message": "this one does make the case for exposing an Observable[Update[StateKey]], I think.",
      "range": {
        "startLine": 46,
        "startChar": 6,
        "endLine": 46,
        "endChar": 24
      },
      "revId": "70ec5e68e34926b364b98b140c3515682348cd8d",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5ac4a560_e4798dfd",
        "filename": "midonet-cluster/src/main/scala/org/midonet/cluster/services/DeviceStateWatcher.scala",
        "patchSetId": 7
      },
      "lineNbr": 46,
      "author": {
        "id": 1003318
      },
      "writtenOn": "2015-12-04T18:08:08Z",
      "side": 1,
      "message": "I\u0027ve removed this class as it was meant to manage shared subscriptions. But it seems that ZOOM already handles this internally and managing this outside just saves some duplicate subscriptions at the cost of adding more code.",
      "parentUuid": "5ac4a560_dc48ef5d",
      "range": {
        "startLine": 46,
        "startChar": 6,
        "endLine": 46,
        "endChar": 24
      },
      "revId": "70ec5e68e34926b364b98b140c3515682348cd8d",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5ac4a560_61181482",
        "filename": "midonet-cluster/src/main/scala/org/midonet/cluster/services/DeviceStateWatcher.scala",
        "patchSetId": 7
      },
      "lineNbr": 52,
      "author": {
        "id": 1002731
      },
      "writtenOn": "2015-12-03T14:26:26Z",
      "side": 1,
      "message": "given that this is passed around all the time, it might deserve a case class\n\nanother note (but I haven\u0027t read so I might not have enough context yet: even if we have several subscribers to the same key, the promise is the same one (either complete or not complete, they share it), so shouldn\u0027t we just index by obj id and state key?",
      "range": {
        "startLine": 52,
        "startChar": 56,
        "endLine": 52,
        "endChar": 78
      },
      "revId": "70ec5e68e34926b364b98b140c3515682348cd8d",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5ac4a560_810c5044",
        "filename": "midonet-cluster/src/main/scala/org/midonet/cluster/services/DeviceStateWatcher.scala",
        "patchSetId": 7
      },
      "lineNbr": 55,
      "author": {
        "id": 1002731
      },
      "writtenOn": "2015-12-03T14:26:26Z",
      "side": 1,
      "message": "5 seconds if you import scala.concurrent.duration._",
      "range": {
        "startLine": 55,
        "startChar": 26,
        "endLine": 55,
        "endChar": 61
      },
      "revId": "70ec5e68e34926b364b98b140c3515682348cd8d",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5ac4a560_bc1df368",
        "filename": "midonet-cluster/src/main/scala/org/midonet/cluster/services/DeviceStateWatcher.scala",
        "patchSetId": 7
      },
      "lineNbr": 68,
      "author": {
        "id": 1002731
      },
      "writtenOn": "2015-12-03T14:26:26Z",
      "side": 1,
      "message": "nit: Style prefers if (cond) else .. rather than if (!cond) else ..",
      "range": {
        "startLine": 68,
        "startChar": 12,
        "endLine": 68,
        "endChar": 14
      },
      "revId": "70ec5e68e34926b364b98b140c3515682348cd8d",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5ac4a560_fc74cb9d",
        "filename": "midonet-cluster/src/main/scala/org/midonet/cluster/services/DeviceStateWatcher.scala",
        "patchSetId": 7
      },
      "lineNbr": 73,
      "author": {
        "id": 1002731
      },
      "writtenOn": "2015-12-03T14:26:26Z",
      "side": 1,
      "message": "I don\u0027t think you need this one, zoom takes UUID too.",
      "range": {
        "startLine": 73,
        "startChar": 24,
        "endLine": 73,
        "endChar": 41
      },
      "revId": "70ec5e68e34926b364b98b140c3515682348cd8d",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5ac4a560_7c419b38",
        "filename": "midonet-cluster/src/main/scala/org/midonet/cluster/services/DeviceStateWatcher.scala",
        "patchSetId": 7
      },
      "lineNbr": 79,
      "author": {
        "id": 1002731
      },
      "writtenOn": "2015-12-03T14:26:26Z",
      "side": 1,
      "message": "not needed",
      "range": {
        "startLine": 79,
        "startChar": 27,
        "endLine": 79,
        "endChar": 33
      },
      "revId": "70ec5e68e34926b364b98b140c3515682348cd8d",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5ac4a560_211e1c71",
        "filename": "midonet-cluster/src/main/scala/org/midonet/cluster/services/DeviceStateWatcher.scala",
        "patchSetId": 7
      },
      "lineNbr": 82,
      "author": {
        "id": 1002731
      },
      "writtenOn": "2015-12-03T14:26:26Z",
      "side": 1,
      "message": "wrap",
      "revId": "70ec5e68e34926b364b98b140c3515682348cd8d",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5ac4a560_bc4b3358",
        "filename": "midonet-cluster/src/main/scala/org/midonet/cluster/services/DeviceStateWatcher.scala",
        "patchSetId": 7
      },
      "lineNbr": 86,
      "author": {
        "id": 1002731
      },
      "writtenOn": "2015-12-03T14:26:26Z",
      "side": 1,
      "message": "not sure why you need to do refcounts of subscriptions, the state observable should be doing that for you already",
      "range": {
        "startLine": 86,
        "startChar": 47,
        "endLine": 86,
        "endChar": 54
      },
      "revId": "70ec5e68e34926b364b98b140c3515682348cd8d",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5ac4a560_e103440d",
        "filename": "midonet-cluster/src/main/scala/org/midonet/cluster/services/DeviceStateWatcher.scala",
        "patchSetId": 7
      },
      "lineNbr": 102,
      "author": {
        "id": 1002731
      },
      "writtenOn": "2015-12-03T14:26:26Z",
      "side": 1,
      "message": "nit: if ! return, just to spare nesting",
      "range": {
        "startLine": 102,
        "startChar": 8,
        "endLine": 102,
        "endChar": 70
      },
      "revId": "70ec5e68e34926b364b98b140c3515682348cd8d",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5ac4a560_fc4dab73",
        "filename": "midonet-cluster/src/main/scala/org/midonet/cluster/services/DeviceStateWatcher.scala",
        "patchSetId": 7
      },
      "lineNbr": 107,
      "author": {
        "id": 1002731
      },
      "writtenOn": "2015-12-03T14:26:26Z",
      "side": 1,
      "message": "doesn\u0027t this fail? it\u0027s an empty option..",
      "range": {
        "startLine": 107,
        "startChar": 58,
        "endLine": 107,
        "endChar": 62
      },
      "revId": "70ec5e68e34926b364b98b140c3515682348cd8d",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5ac4a560_fcff6bff",
        "filename": "midonet-cluster/src/main/scala/org/midonet/cluster/services/DeviceStateWatcher.scala",
        "patchSetId": 7
      },
      "lineNbr": 107,
      "author": {
        "id": 1002731
      },
      "writtenOn": "2015-12-03T14:26:26Z",
      "side": 1,
      "message": "trySuccess, probably safer",
      "range": {
        "startLine": 107,
        "startChar": 28,
        "endLine": 107,
        "endChar": 35
      },
      "revId": "70ec5e68e34926b364b98b140c3515682348cd8d",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5ac4a560_dc31cfed",
        "filename": "midonet-cluster/src/main/scala/org/midonet/cluster/services/DeviceStateWatcher.scala",
        "patchSetId": 7
      },
      "lineNbr": 127,
      "author": {
        "id": 1002731
      },
      "writtenOn": "2015-12-03T14:26:26Z",
      "side": 1,
      "message": "why not return a Future[StateKey] and let the caller chose whether it wants to block or not?",
      "range": {
        "startLine": 127,
        "startChar": 61,
        "endLine": 127,
        "endChar": 69
      },
      "revId": "70ec5e68e34926b364b98b140c3515682348cd8d",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5ac4a560_1c88a770",
        "filename": "midonet-cluster/src/main/scala/org/midonet/cluster/services/containers/schedulers/AnywhereHostSelector.scala",
        "patchSetId": 7
      },
      "lineNbr": 49,
      "author": {
        "id": 1002731
      },
      "writtenOn": "2015-12-03T15:15:33Z",
      "side": 1,
      "message": "this feels a bit dodgy, it\u0027s a singleton that more or less captures capturing an instance..\n\nthe only one using this selector is a minion, you can simply build an instance there and use the same one, which spares you the ugliness of trying to make it a real singleton (which is hard to do).",
      "range": {
        "startLine": 42,
        "startChar": 3,
        "endLine": 49,
        "endChar": 66
      },
      "revId": "70ec5e68e34926b364b98b140c3515682348cd8d",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5ac4a560_0464c9b7",
        "filename": "midonet-cluster/src/main/scala/org/midonet/cluster/services/containers/schedulers/AnywhereHostSelector.scala",
        "patchSetId": 7
      },
      "lineNbr": 49,
      "author": {
        "id": 1003318
      },
      "writtenOn": "2015-12-04T18:08:08Z",
      "side": 1,
      "message": "Agreed. I\u0027ve removed it and created a single instance in the scheduler.",
      "parentUuid": "5ac4a560_1c88a770",
      "range": {
        "startLine": 42,
        "startChar": 3,
        "endLine": 49,
        "endChar": 66
      },
      "revId": "70ec5e68e34926b364b98b140c3515682348cd8d",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5ac4a560_fc9bebc6",
        "filename": "midonet-cluster/src/main/scala/org/midonet/cluster/services/containers/schedulers/AnywhereHostSelector.scala",
        "patchSetId": 7
      },
      "lineNbr": 69,
      "author": {
        "id": 1002731
      },
      "writtenOn": "2015-12-03T15:15:33Z",
      "side": 1,
      "message": "this will show in the logs as \n\nanwyhere INFO bla bla\n\nbecause we take the last segment. Use containers-selector-anywhere so the whole thing shows",
      "range": {
        "startLine": 69,
        "startChar": 59,
        "endLine": 69,
        "endChar": 86
      },
      "revId": "70ec5e68e34926b364b98b140c3515682348cd8d",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5ac4a560_846ff991",
        "filename": "midonet-cluster/src/main/scala/org/midonet/cluster/services/containers/schedulers/AnywhereHostSelector.scala",
        "patchSetId": 7
      },
      "lineNbr": 69,
      "author": {
        "id": 1003318
      },
      "writtenOn": "2015-12-04T18:08:08Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "5ac4a560_fc9bebc6",
      "range": {
        "startLine": 69,
        "startChar": 59,
        "endLine": 69,
        "endChar": 86
      },
      "revId": "70ec5e68e34926b364b98b140c3515682348cd8d",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5ac4a560_1ca187f8",
        "filename": "midonet-cluster/src/main/scala/org/midonet/cluster/services/containers/schedulers/AnywhereHostSelector.scala",
        "patchSetId": 7
      },
      "lineNbr": 71,
      "author": {
        "id": 1002731
      },
      "writtenOn": "2015-12-03T15:15:33Z",
      "side": 1,
      "message": "Depends on the threading model, but if this set is mutated by different threads you need a @volatile\n\ngiven that you don\u0027t controll who does, it\u0027s probably a good idea to add it",
      "revId": "70ec5e68e34926b364b98b140c3515682348cd8d",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5ac4a560_2410e500",
        "filename": "midonet-cluster/src/main/scala/org/midonet/cluster/services/containers/schedulers/AnywhereHostSelector.scala",
        "patchSetId": 7
      },
      "lineNbr": 71,
      "author": {
        "id": 1003318
      },
      "writtenOn": "2015-12-04T18:08:08Z",
      "side": 1,
      "message": "This knownHostIds is only modified on the ZOOM events. I understand it is safe to assume it\u0027s single threaded?",
      "parentUuid": "5ac4a560_1ca187f8",
      "revId": "70ec5e68e34926b364b98b140c3515682348cd8d",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5ac4a560_3ca64311",
        "filename": "midonet-cluster/src/main/scala/org/midonet/cluster/services/containers/schedulers/AnywhereHostSelector.scala",
        "patchSetId": 7
      },
      "lineNbr": 73,
      "author": {
        "id": 1002731
      },
      "writtenOn": "2015-12-03T15:15:33Z",
      "side": 1,
      "message": "ditto re. @volatile\n\nhostsDeletedDuringInit (or somethign similar) might be more informative.",
      "range": {
        "startLine": 73,
        "startChar": 16,
        "endLine": 73,
        "endChar": 40
      },
      "revId": "70ec5e68e34926b364b98b140c3515682348cd8d",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5ac4a560_c4c5715c",
        "filename": "midonet-cluster/src/main/scala/org/midonet/cluster/services/containers/schedulers/AnywhereHostSelector.scala",
        "patchSetId": 7
      },
      "lineNbr": 73,
      "author": {
        "id": 1003318
      },
      "writtenOn": "2015-12-04T18:08:08Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "5ac4a560_3ca64311",
      "range": {
        "startLine": 73,
        "startChar": 16,
        "endLine": 73,
        "endChar": 40
      },
      "revId": "70ec5e68e34926b364b98b140c3515682348cd8d",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5ac4a560_7cafdbe3",
        "filename": "midonet-cluster/src/main/scala/org/midonet/cluster/services/containers/schedulers/AnywhereHostSelector.scala",
        "patchSetId": 7
      },
      "lineNbr": 78,
      "author": {
        "id": 1002731
      },
      "writtenOn": "2015-12-03T15:15:33Z",
      "side": 1,
      "message": "wrap?",
      "range": {
        "startLine": 76,
        "startChar": 7,
        "endLine": 78,
        "endChar": 21
      },
      "revId": "70ec5e68e34926b364b98b140c3515682348cd8d",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5ac4a560_e4a18daa",
        "filename": "midonet-cluster/src/main/scala/org/midonet/cluster/services/containers/schedulers/AnywhereHostSelector.scala",
        "patchSetId": 7
      },
      "lineNbr": 78,
      "author": {
        "id": 1003318
      },
      "writtenOn": "2015-12-04T18:08:08Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "5ac4a560_7cafdbe3",
      "range": {
        "startLine": 76,
        "startChar": 7,
        "endLine": 78,
        "endChar": 21
      },
      "revId": "70ec5e68e34926b364b98b140c3515682348cd8d",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5ac4a560_9cacb7ef",
        "filename": "midonet-cluster/src/main/scala/org/midonet/cluster/services/containers/schedulers/AnywhereHostSelector.scala",
        "patchSetId": 7
      },
      "lineNbr": 82,
      "author": {
        "id": 1002731
      },
      "writtenOn": "2015-12-03T15:15:33Z",
      "side": 1,
      "message": "public api so worth a brief scaladoc",
      "range": {
        "startLine": 82,
        "startChar": 17,
        "endLine": 82,
        "endChar": 31
      },
      "revId": "70ec5e68e34926b364b98b140c3515682348cd8d",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5ac4a560_041849d2",
        "filename": "midonet-cluster/src/main/scala/org/midonet/cluster/services/containers/schedulers/AnywhereHostSelector.scala",
        "patchSetId": 7
      },
      "lineNbr": 82,
      "author": {
        "id": 1003318
      },
      "writtenOn": "2015-12-04T18:08:08Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "5ac4a560_9cacb7ef",
      "range": {
        "startLine": 82,
        "startChar": 17,
        "endLine": 82,
        "endChar": 31
      },
      "revId": "70ec5e68e34926b364b98b140c3515682348cd8d",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5ac4a560_1cd6e74f",
        "filename": "midonet-cluster/src/main/scala/org/midonet/cluster/services/containers/schedulers/AnywhereHostSelector.scala",
        "patchSetId": 7
      },
      "lineNbr": 85,
      "author": {
        "id": 1002731
      },
      "writtenOn": "2015-12-03T15:15:33Z",
      "side": 1,
      "message": "factoring this out to\n\n@inline\ndef isInitialized \u003d (deletedWhileInitializing \u003d\u003d null)\n\nwould make it more readable",
      "range": {
        "startLine": 85,
        "startChar": 12,
        "endLine": 85,
        "endChar": 44
      },
      "revId": "70ec5e68e34926b364b98b140c3515682348cd8d",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5ac4a560_c49c916c",
        "filename": "midonet-cluster/src/main/scala/org/midonet/cluster/services/containers/schedulers/AnywhereHostSelector.scala",
        "patchSetId": 7
      },
      "lineNbr": 85,
      "author": {
        "id": 1003318
      },
      "writtenOn": "2015-12-04T18:08:08Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "5ac4a560_1cd6e74f",
      "range": {
        "startLine": 85,
        "startChar": 12,
        "endLine": 85,
        "endChar": 44
      },
      "revId": "70ec5e68e34926b364b98b140c3515682348cd8d",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5ac4a560_5cd05f50",
        "filename": "midonet-cluster/src/main/scala/org/midonet/cluster/services/containers/schedulers/AnywhereHostSelector.scala",
        "patchSetId": 7
      },
      "lineNbr": 89,
      "author": {
        "id": 1002731
      },
      "writtenOn": "2015-12-03T15:15:33Z",
      "side": 1,
      "message": "space",
      "revId": "70ec5e68e34926b364b98b140c3515682348cd8d",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5ac4a560_24838505",
        "filename": "midonet-cluster/src/main/scala/org/midonet/cluster/services/containers/schedulers/AnywhereHostSelector.scala",
        "patchSetId": 7
      },
      "lineNbr": 89,
      "author": {
        "id": 1003318
      },
      "writtenOn": "2015-12-04T18:08:08Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "5ac4a560_5cd05f50",
      "revId": "70ec5e68e34926b364b98b140c3515682348cd8d",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5ac4a560_dcbb8f0c",
        "filename": "midonet-cluster/src/main/scala/org/midonet/cluster/services/containers/schedulers/AnywhereHostSelector.scala",
        "patchSetId": 7
      },
      "lineNbr": 93,
      "author": {
        "id": 1002731
      },
      "writtenOn": "2015-12-03T15:15:33Z",
      "side": 1,
      "message": "align? this might be more readable as:\n\n.map { hosts \u003d\u003e\n    hosts.map { h \u003d\u003e fromProto(h.getId))\n         .filterNot(...).toSet\n}",
      "revId": "70ec5e68e34926b364b98b140c3515682348cd8d",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5ac4a560_647c9d21",
        "filename": "midonet-cluster/src/main/scala/org/midonet/cluster/services/containers/schedulers/AnywhereHostSelector.scala",
        "patchSetId": 7
      },
      "lineNbr": 93,
      "author": {
        "id": 1003318
      },
      "writtenOn": "2015-12-04T18:08:08Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "5ac4a560_dcbb8f0c",
      "revId": "70ec5e68e34926b364b98b140c3515682348cd8d",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5ac4a560_1c3d0790",
        "filename": "midonet-cluster/src/main/scala/org/midonet/cluster/services/containers/schedulers/AnywhereHostSelector.scala",
        "patchSetId": 7
      },
      "lineNbr": 100,
      "author": {
        "id": 1002731
      },
      "writtenOn": "2015-12-03T15:15:33Z",
      "side": 1,
      "message": "keep the subscription, is there any moment where we want to stop watching for new hosts?",
      "revId": "70ec5e68e34926b364b98b140c3515682348cd8d",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5ac4a560_e4042d80",
        "filename": "midonet-cluster/src/main/scala/org/midonet/cluster/services/containers/schedulers/AnywhereHostSelector.scala",
        "patchSetId": 7
      },
      "lineNbr": 100,
      "author": {
        "id": 1003318
      },
      "writtenOn": "2015-12-04T18:08:08Z",
      "side": 1,
      "message": "Only when there is no group with anywhere allocation. But the DeviceWatcher does not return the subscription so cannot do that. We could subscribe once on the scheduler and clear the device watcher subscription once there are no groups with anywhere allocations but this complicates code on the scheduler.",
      "parentUuid": "5ac4a560_1c3d0790",
      "revId": "70ec5e68e34926b364b98b140c3515682348cd8d",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5ac4a560_5c821f50",
        "filename": "midonet-cluster/src/main/scala/org/midonet/cluster/services/containers/schedulers/AnywhereHostSelector.scala",
        "patchSetId": 7
      },
      "lineNbr": 109,
      "author": {
        "id": 1002731
      },
      "writtenOn": "2015-12-03T15:15:33Z",
      "side": 1,
      "message": "hostId?",
      "range": {
        "startLine": 109,
        "startChar": 16,
        "endLine": 109,
        "endChar": 19
      },
      "revId": "70ec5e68e34926b364b98b140c3515682348cd8d",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5ac4a560_c473b14b",
        "filename": "midonet-cluster/src/main/scala/org/midonet/cluster/services/containers/schedulers/AnywhereHostSelector.scala",
        "patchSetId": 7
      },
      "lineNbr": 109,
      "author": {
        "id": 1003318
      },
      "writtenOn": "2015-12-04T18:08:08Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "5ac4a560_5c821f50",
      "range": {
        "startLine": 109,
        "startChar": 16,
        "endLine": 109,
        "endChar": 19
      },
      "revId": "70ec5e68e34926b364b98b140c3515682348cd8d",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5ac4a560_1cc0a74f",
        "filename": "midonet-cluster/src/main/scala/org/midonet/cluster/services/containers/schedulers/Scheduler.scala",
        "patchSetId": 7
      },
      "lineNbr": 216,
      "author": {
        "id": 1002731
      },
      "writtenOn": "2015-12-03T15:15:33Z",
      "side": 1,
      "message": "worth factoring out:\n\nval meaningfulName \u003d makeFunc1 { ... }\n\nAnd then this is pretty:\n\n.map(meaningfulName)",
      "range": {
        "startLine": 214,
        "startChar": 53,
        "endLine": 216,
        "endChar": 77
      },
      "revId": "70ec5e68e34926b364b98b140c3515682348cd8d",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5ac4a560_5c5e9fe7",
        "filename": "midonet-cluster/src/main/scala/org/midonet/cluster/services/containers/schedulers/Scheduler.scala",
        "patchSetId": 7
      },
      "lineNbr": 295,
      "author": {
        "id": 1002731
      },
      "writtenOn": "2015-12-03T15:15:33Z",
      "side": 1,
      "message": "readability:\n\nval election \u003d new Election(..)\nresults ++\u003d createMappings(election)",
      "range": {
        "startLine": 292,
        "startChar": 36,
        "endLine": 295,
        "endChar": 65
      },
      "revId": "70ec5e68e34926b364b98b140c3515682348cd8d",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    }
  ]
}
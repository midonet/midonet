{
  "comments": [
    {
      "key": {
        "uuid": "9ad9bd40_ac08b328",
        "filename": "midolman/src/main/scala/org/midonet/cluster/state/ZookeeperLegacyStorage.scala",
        "patchSetId": 3
      },
      "lineNbr": 73,
      "author": {
        "id": 1002751
      },
      "writtenOn": "2015-08-07T14:06:17Z",
      "side": 1,
      "message": "Would it make sense to add this to the MidonetBackend now, and allow the mappers select between the replicated maps and merged mapes based on the config?",
      "range": {
        "startLine": 73,
        "startChar": 31,
        "endLine": 73,
        "endChar": 48
      },
      "revId": "32cfb55bbbe70bd31efb30d4bde1e62266a94241",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9ad9bd40_0ca99a23",
        "filename": "midolman/src/main/scala/org/midonet/cluster/state/ZookeeperLegacyStorage.scala",
        "patchSetId": 3
      },
      "lineNbr": 73,
      "author": {
        "id": 1002820
      },
      "writtenOn": "2015-08-10T14:38:43Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "9ad9bd40_ac08b328",
      "range": {
        "startLine": 73,
        "startChar": 31,
        "endLine": 73,
        "endChar": 48
      },
      "revId": "32cfb55bbbe70bd31efb30d4bde1e62266a94241",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9ad9bd40_e9270dc8",
        "filename": "midolman/src/main/scala/org/midonet/midolman/state/MacLearningTable.scala",
        "patchSetId": 3
      },
      "lineNbr": 33,
      "author": {
        "id": 1002751
      },
      "writtenOn": "2015-08-07T13:56:52Z",
      "side": 1,
      "message": "I don\u0027t have a strong opinion about this, but it seems that the MacLearningTable interface was intended as a wrapper around a ReplicatedMap (or in this case a StateTable), rather than extending it.\n\nPerhaps the reason behind this was that its purpose was to only expose the `add` and `get` methods to the Bridge simulation object, while hiding other specifics of the underlying map/table.\n\nIf you don\u0027t extend the StateTable, then:\n- we don\u0027t need expose the bridge simulation object to the a different interface, hence no refactor needed there\n- we don\u0027t need to add support for state tables to the legacy v1\n- we only need to add support for state table to the bridge mapper (hence v2)\n\u003c-- therefore, less work",
      "range": {
        "startLine": 33,
        "startChar": 23,
        "endLine": 33,
        "endChar": 68
      },
      "revId": "32cfb55bbbe70bd31efb30d4bde1e62266a94241",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9ad9bd40_af46e078",
        "filename": "midolman/src/main/scala/org/midonet/midolman/state/MacLearningTable.scala",
        "patchSetId": 3
      },
      "lineNbr": 33,
      "author": {
        "id": 1002820
      },
      "writtenOn": "2015-08-10T14:38:43Z",
      "side": 1,
      "message": "The MacLearningTable trait has been restored.",
      "parentUuid": "9ad9bd40_e9270dc8",
      "range": {
        "startLine": 33,
        "startChar": 23,
        "endLine": 33,
        "endChar": 68
      },
      "revId": "32cfb55bbbe70bd31efb30d4bde1e62266a94241",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9ad9bd40_29573527",
        "filename": "midolman/src/main/scala/org/midonet/midolman/state/MacLearningTable.scala",
        "patchSetId": 3
      },
      "lineNbr": 49,
      "author": {
        "id": 1002751
      },
      "writtenOn": "2015-08-07T13:56:52Z",
      "side": 1,
      "message": "This is a trait: is it necessary to add an implementation for these methods here?",
      "range": {
        "startLine": 38,
        "startChar": 0,
        "endLine": 49,
        "endChar": 27
      },
      "revId": "32cfb55bbbe70bd31efb30d4bde1e62266a94241",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9ad9bd40_ac118e05",
        "filename": "midolman/src/main/scala/org/midonet/midolman/state/MacLearningTable.scala",
        "patchSetId": 3
      },
      "lineNbr": 49,
      "author": {
        "id": 1002820
      },
      "writtenOn": "2015-08-10T14:38:43Z",
      "side": 1,
      "message": "This is not relevant anymore.",
      "parentUuid": "9ad9bd40_29573527",
      "range": {
        "startLine": 38,
        "startChar": 0,
        "endLine": 49,
        "endChar": 27
      },
      "revId": "32cfb55bbbe70bd31efb30d4bde1e62266a94241",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9ad9bd40_0c38bfd1",
        "filename": "nsdb/src/main/scala/org/midonet/cluster/data/storage/StateTable.scala",
        "patchSetId": 3
      },
      "lineNbr": 23,
      "author": {
        "id": 1002751
      },
      "writtenOn": "2015-08-07T14:06:17Z",
      "side": 1,
      "message": "If the MergedMap provides an implementation for this trait, should\u0027t the definition be here?",
      "range": {
        "startLine": 23,
        "startChar": 50,
        "endLine": 23,
        "endChar": 56
      },
      "revId": "32cfb55bbbe70bd31efb30d4bde1e62266a94241",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9ad9bd40_cc4df23f",
        "filename": "nsdb/src/main/scala/org/midonet/cluster/data/storage/StateTable.scala",
        "patchSetId": 3
      },
      "lineNbr": 23,
      "author": {
        "id": 1002820
      },
      "writtenOn": "2015-08-10T14:38:43Z",
      "side": 1,
      "message": "You mean the StateTable trait? I thought the file would become too large if I include all implementations of it.",
      "parentUuid": "9ad9bd40_0c38bfd1",
      "range": {
        "startLine": 23,
        "startChar": 50,
        "endLine": 23,
        "endChar": 56
      },
      "revId": "32cfb55bbbe70bd31efb30d4bde1e62266a94241",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9ad9bd40_ec3c7bca",
        "filename": "nsdb/src/main/scala/org/midonet/cluster/data/storage/StateTable.scala",
        "patchSetId": 3
      },
      "lineNbr": 29,
      "author": {
        "id": 1002751
      },
      "writtenOn": "2015-08-07T14:06:17Z",
      "side": 1,
      "message": "Indent",
      "range": {
        "startLine": 29,
        "startChar": 4,
        "endLine": 29,
        "endChar": 11
      },
      "revId": "32cfb55bbbe70bd31efb30d4bde1e62266a94241",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9ad9bd40_4cec822a",
        "filename": "nsdb/src/main/scala/org/midonet/cluster/data/storage/StateTable.scala",
        "patchSetId": 3
      },
      "lineNbr": 29,
      "author": {
        "id": 1002820
      },
      "writtenOn": "2015-08-10T14:38:43Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "9ad9bd40_ec3c7bca",
      "range": {
        "startLine": 29,
        "startChar": 4,
        "endLine": 29,
        "endChar": 11
      },
      "revId": "32cfb55bbbe70bd31efb30d4bde1e62266a94241",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9ad9bd40_cc2257a2",
        "filename": "nsdb/src/main/scala/org/midonet/cluster/data/storage/StateTable.scala",
        "patchSetId": 3
      },
      "lineNbr": 70,
      "author": {
        "id": 1002751
      },
      "writtenOn": "2015-08-07T14:06:17Z",
      "side": 1,
      "message": "I guess it makes sense from our perspective not to support primitive types as values, right?",
      "range": {
        "startLine": 70,
        "startChar": 21,
        "endLine": 70,
        "endChar": 22
      },
      "revId": "32cfb55bbbe70bd31efb30d4bde1e62266a94241",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9ad9bd40_accc2ebc",
        "filename": "nsdb/src/main/scala/org/midonet/cluster/data/storage/StateTable.scala",
        "patchSetId": 3
      },
      "lineNbr": 70,
      "author": {
        "id": 1002820
      },
      "writtenOn": "2015-08-10T14:38:43Z",
      "side": 1,
      "message": "Are you wondering whether V should be a subclass of Any instead of AnyRef? Primitive values did not seem to make sense to me for V since we must implement our own conflict resolution strategy. So class V would typically be the value plus some data to resolve conflicts. I hope this answer your question.",
      "parentUuid": "9ad9bd40_cc2257a2",
      "range": {
        "startLine": 70,
        "startChar": 21,
        "endLine": 70,
        "endChar": 22
      },
      "revId": "32cfb55bbbe70bd31efb30d4bde1e62266a94241",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9ad9bd40_2c1ca369",
        "filename": "nsdb/src/main/scala/org/midonet/cluster/data/storage/StateTable.scala",
        "patchSetId": 3
      },
      "lineNbr": 83,
      "author": {
        "id": 1002751
      },
      "writtenOn": "2015-08-07T14:06:17Z",
      "side": 1,
      "message": "Do we want to expose close to the consumers of a state table?",
      "range": {
        "startLine": 83,
        "startChar": 4,
        "endLine": 83,
        "endChar": 21
      },
      "revId": "32cfb55bbbe70bd31efb30d4bde1e62266a94241",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9ad9bd40_ecc1d680",
        "filename": "nsdb/src/main/scala/org/midonet/cluster/data/storage/StateTable.scala",
        "patchSetId": 3
      },
      "lineNbr": 83,
      "author": {
        "id": 1002820
      },
      "writtenOn": "2015-08-10T14:38:43Z",
      "side": 1,
      "message": "This is debatable. I kind of copied the functionality used in the bridge mapper for the replicated map. There you were starting and stopping the replicated map. I thought I could do the same for a merged map. \nThe downside of not including this is that the Kafka consumer will continue running forever (polling the brokers for new messages) even if no bridge is interested in mac table updates.",
      "parentUuid": "9ad9bd40_2c1ca369",
      "range": {
        "startLine": 83,
        "startChar": 4,
        "endLine": 83,
        "endChar": 21
      },
      "revId": "32cfb55bbbe70bd31efb30d4bde1e62266a94241",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    }
  ]
}
//
// Copyright 2014 Midokura SARL
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

package org.midonet.sdn.state;

option java_package = "org.midonet.rpc";
option java_outer_classname = "FlowStateProto";
option optimize_for = LITE_RUNTIME;

message UUID {
    required fixed64 msb = 1;
    required fixed64 lsb = 2;
}

message IpAddress {
    enum IpVersion {
        V4 = 0;
        V6 = 1;
    }
    required IpVersion version = 1;
    required uint32 quad0 = 2;
    optional uint32 quad1 = 3;
    optional uint32 quad2 = 4;
    optional uint32 quad3 = 5;
}

message NatKey {
    enum Type {
        FWD_DNAT = 0;
        FWD_STICKY_DNAT = 1;
        REV_DNAT = 2;
        REV_STICKY_DNAT = 3;
        FWD_SNAT = 4;
        REV_SNAT = 5;
    }
    required Type type = 1;
    required uint32 protocol = 2;
    required IpAddress src_ip = 3;
    required IpAddress dst_ip = 4;
    required uint32 src_port = 5;
    required uint32 dst_port = 6;
    required UUID device = 7;
}

message NatValue {
    required IpAddress ip = 1;
    required uint32 port = 2;
}

message NatEntry {
    required NatKey k = 1;
    required NatValue v = 2;
}

message ConntrackKey {
    required uint32 protocol = 1;
    required IpAddress src_ip = 2;
    required uint32 src_port = 3;
    required IpAddress dst_ip = 4;
    required uint32 dst_port = 5;
    required UUID device = 6;
}

message TraceEntry {
    // fields to build match from
    optional uint64 eth_src = 1;
    optional uint64 eth_dst = 2;
    optional uint32 etherType = 3;
    optional IpAddress ip_src = 4;
    optional IpAddress ip_dst = 5;
    optional uint32 ip_proto = 6;
    optional uint32 tp_src = 7;
    optional uint32 tp_dst = 8;

    // ids of trace requests
    optional UUID flow_trace_id = 10;
    repeated UUID request_id = 11;
}

message FlowState {
    optional ConntrackKey conntrack_key = 1;
    repeated NatEntry nat_entries = 2;
    required UUID ingress_port = 3;
    optional UUID egress_port = 4;
    optional UUID egress_port_set = 5;
    repeated TraceEntry trace_entry = 6;
}

message StateMessage {
    required uint64 seq = 1;
    required UUID sender = 2;
    required uint64 epoch = 3;
    repeated FlowState new_state = 4;
}

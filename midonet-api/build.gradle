/*
 * Copyright 2014 Midokura SARL
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

apply plugin: 'war'
apply plugin: 'java-library-distribution'
apply plugin: 'jetty'
apply from: "${rootProject.projectDir}/fpm.gradle"

jar {
    manifest {
        attributes 'Implementation-Title': 'MidNet REST API server',
                   'Implementation-Version': version
    }
}

repositories {
    maven { url "http://nexus.opendaylight.org/content/repositories/opendaylight.release/" }
    maven { url "http://nexus.opendaylight.org/content/repositories/public/"  }
}

dependencies {
    compile project(':nsdb'), project(':midolman'),
            project(':midonet-client'), project(':cluster:odl-ovsdb:ovsdb'),
            project(':cluster:midonet-cluster'), project(':odp')
    compile(project(':midonet-util')) {
        exclude group: 'com.sun', module: 'tools'
    }
    testCompile project(':midonet-client'), libraries.jsonpath_assert

    providedCompile libraries.servlet

    compile libraries.persistence, libraries.jsr311, libraries.jsr250,
            libraries.jackson_jaxrs, libraries.jackson_xc, libraries.guice,
            libraries.guice_servlet, libraries.jersey_servlet,
            libraries.jersey_server, libraries.jersey_client,
            libraries.jersey_json, libraries.jersey_guice,
            libraries.jersey_core, libraries.jersey_bundle,
            libraries.commons_lang, libraries.commons_lang3,
            libraries.commons_conf, libraries.typesafeconf,
            libraries.metrics,
            libraries.curator_framework,
            libraries.curator_recipes,
            libraries.commons_codec,
            libraries.hamcrest_core, libraries.hamcrest_lib,
            libraries.validation, libraries.hibernate_validator,
            libraries.guice_multibind, libraries.vmware_midoapi,
            libraries.jcabi, libraries.scala, libraries.protobuf

    runtime libraries.aspectj

    testCompile libraries.hamcrest_integration, libraries.grizzly_servlet,
                libraries.jersey_grizzly, libraries.jersey_test_grizzly,
                libraries.jersey_test_core, libraries.curator_test,
                libraries.commons_io
}

distributions {
    main {
        baseName = project.name
    }
}

task preparePkg(type: Copy, dependsOn: installDist) {
    String webapp = "usr/share/midonet-api"

    from("${buildDir}/install/midonet-api/lib/") {
        include "*.jar"
        into "${webapp}/WEB-INF/lib/"
    }
    from("${buildDir}/classes/main") {
        into "${webapp}/WEB-INF/classes/"
        include "**/*"
    }
    from("${buildDir}/resources/main") {
        into "${webapp}/WEB-INF/classes/"
        include "**/*"
    }
    from("CHANGE-LOG.txt") {
        into "usr/share/doc/midonet-api/"
    }
    from("src/main/webapp/WEB-INF/web.xml.prod") {
        into "${webapp}/WEB-INF"
        rename ('web.xml.prod', 'web.xml')
    }
    from("conf/logback.xml.prod") {
        into "${webapp}/WEB-INF/classes"
        rename ('logback.xml.prod', 'logback.xml')
    }
    into "${pkgDestDir}"

    doLast {
        new File("${pkgDestDir}/${webapp}/META-INF").mkdirs()
    }
    // XXX - guillermo: create a main output dir for installDist because
    // otherwise installDist will fail to run the second time.
    doFirst {
        new File("${buildDir}/install/${project.name}/main").mkdirs()
    }
}

packaging {
    version = project.debVersion
    maintainer = project.maintainer
    vendor = project.vendor
    url = project.url
    description = 'Midonet-API is the REST API for Midolman, a virtual network controller'
    confFiles = ['/usr/share/midonet-api/WEB-INF/web.xml',
                 '/usr/share/midonet-api/WEB-INF/classes/logback.xml']
    fpmOpts = ['-a', 'all']
}

preparePkg.dependsOn cleanPkg
debian.dependsOn preparePkg
rpm.dependsOn preparePkg

debian.doFirst {
    project.packaging.version = project.debVersion
    project.packaging.fpmOpts.addAll([
        '--deb-recommends', 'java7-runtime-headless | java7-runtime'])
}

rpm.doFirst {
    project.packaging.version = project.rpmVersion
    project.packaging.iteration = project.rpmRelease
}

debian.doLast {
    new File("${buildDir}/install/${project.name}").deleteDir()
}
rpm.doLast {
    new File("${buildDir}/install/${project.name}").deleteDir()
}

// You can specify a specific port (8080 by default) with -Pport= option as follows:
// ./gradlew :midonet-api:jettyRun -Pport=8888
jettyRun {
    if (project.hasProperty('port')) {
        httpPort = port.toInteger()
    }

    if (project.hasProperty('webXml')) {
        webXml = file("${project.webXml}")
    } else {
        webXml = file("${project.webAppDir}/WEB-INF/web.xml.dev")
    }
}

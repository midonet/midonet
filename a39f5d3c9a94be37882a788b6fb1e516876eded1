{
  "comments": [
    {
      "key": {
        "uuid": "facab960_9f5a0182",
        "filename": "nsdb/src/main/scala/org/midonet/cluster/data/storage/InMemoryMergedMap.scala",
        "patchSetId": 7
      },
      "lineNbr": 35,
      "author": {
        "id": 1002731
      },
      "writtenOn": "2015-05-23T18:02:36Z",
      "side": 1,
      "message": "Ditto. This assumes that private maps are a subordinate abstraction for the merged map.\n\nI think the goal is to have private maps as first class citizens that can be used completely independently of a merged map. (ARgument in favour for keeping them in their own file!)",
      "range": {
        "startLine": 35,
        "startChar": 40,
        "endLine": 35,
        "endChar": 75
      },
      "revId": "a39f5d3c9a94be37882a788b6fb1e516876eded1",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "facab960_b817e650",
        "filename": "nsdb/src/main/scala/org/midonet/cluster/data/storage/InMemoryMergedMap.scala",
        "patchSetId": 7
      },
      "lineNbr": 57,
      "author": {
        "id": 1002820
      },
      "writtenOn": "2015-05-21T16:58:10Z",
      "side": 1,
      "message": "I tried to strike a good balance between simplicity and reasonable efficiency. I\u0027m using a lock to update the map (methods removeOpinionFromOwner and newOpinionFromOwner) and snapshots of the triemap for methods that just read it. Let me know what you think.",
      "range": {
        "startLine": 54,
        "startChar": 42,
        "endLine": 57,
        "endChar": 14
      },
      "revId": "a39f5d3c9a94be37882a788b6fb1e516876eded1",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "facab960_d80bca29",
        "filename": "nsdb/src/main/scala/org/midonet/cluster/data/storage/InMemoryMergedMap.scala",
        "patchSetId": 7
      },
      "lineNbr": 217,
      "author": {
        "id": 1002820
      },
      "writtenOn": "2015-05-21T16:58:10Z",
      "side": 1,
      "message": "removeOwnerOpinion",
      "range": {
        "startLine": 217,
        "startChar": 16,
        "endLine": 217,
        "endChar": 39
      },
      "revId": "a39f5d3c9a94be37882a788b6fb1e516876eded1",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "facab960_f8088e2f",
        "filename": "nsdb/src/main/scala/org/midonet/cluster/data/storage/InMemoryMergedMap.scala",
        "patchSetId": 7
      },
      "lineNbr": 250,
      "author": {
        "id": 1002820
      },
      "writtenOn": "2015-05-21T16:58:10Z",
      "side": 1,
      "message": "newOwnerOpinion",
      "range": {
        "startLine": 250,
        "startChar": 16,
        "endLine": 250,
        "endChar": 35
      },
      "revId": "a39f5d3c9a94be37882a788b6fb1e516876eded1",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "facab960_bf5fc571",
        "filename": "nsdb/src/main/scala/org/midonet/cluster/data/storage/InMemoryMergedMap.scala",
        "patchSetId": 7
      },
      "lineNbr": 349,
      "author": {
        "id": 1002731
      },
      "writtenOn": "2015-05-23T18:02:36Z",
      "side": 1,
      "message": "Ditto, should be public in its own file, usable independently",
      "range": {
        "startLine": 349,
        "startChar": 0,
        "endLine": 349,
        "endChar": 41
      },
      "revId": "a39f5d3c9a94be37882a788b6fb1e516876eded1",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "facab960_df25690b",
        "filename": "nsdb/src/main/scala/org/midonet/cluster/data/storage/MergedMap.scala",
        "patchSetId": 7
      },
      "lineNbr": 26,
      "author": {
        "id": 1002731
      },
      "writtenOn": "2015-05-23T18:02:36Z",
      "side": 1,
      "message": "Does this mean I can\u0027t instantiate my own private map?",
      "range": {
        "startLine": 24,
        "startChar": 60,
        "endLine": 26,
        "endChar": 9
      },
      "revId": "a39f5d3c9a94be37882a788b6fb1e516876eded1",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "facab960_9f83e1cb",
        "filename": "nsdb/src/main/scala/org/midonet/cluster/data/storage/MergedMap.scala",
        "patchSetId": 7
      },
      "lineNbr": 29,
      "author": {
        "id": 1002731
      },
      "writtenOn": "2015-05-23T18:02:36Z",
      "side": 1,
      "message": "I don\u0027t think that the discriminant belongs here.\n\nThe Private map is a primitive type that models a simple map. The fact that private maps can be merged (and how this is made) is added by another abstraction (the merged map), so everything related to the conflict resolution would belong at the merged map.\n\nMy main concern with adding it here is that we break the notion of treating PrivateMap as a primitive for a simple map, agnostic of the aggregations. (Which is mostly why I also mentioned in an earlier patch that talking about \"opinions\" here doesn\u0027t seem relevant here but only in the merged map.)",
      "range": {
        "startLine": 28,
        "startChar": 30,
        "endLine": 29,
        "endChar": 70
      },
      "revId": "a39f5d3c9a94be37882a788b6fb1e516876eded1",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "facab960_edcfe0ae",
        "filename": "nsdb/src/main/scala/org/midonet/cluster/data/storage/MergedMap.scala",
        "patchSetId": 7
      },
      "lineNbr": 29,
      "author": {
        "id": 1002820
      },
      "writtenOn": "2015-05-25T07:45:23Z",
      "side": 1,
      "message": "I actually did not envision a private map as an independent entity. If we make it independent then is it not just a map that offers an observable? Why even call it private map then? I\u0027m not yet convinced that this is a better approach. We should probably discuss this.",
      "parentUuid": "facab960_9f83e1cb",
      "range": {
        "startLine": 28,
        "startChar": 30,
        "endLine": 29,
        "endChar": 70
      },
      "revId": "a39f5d3c9a94be37882a788b6fb1e516876eded1",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "facab960_70d8071e",
        "filename": "nsdb/src/main/scala/org/midonet/cluster/data/storage/MergedMap.scala",
        "patchSetId": 7
      },
      "lineNbr": 29,
      "author": {
        "id": 1002820
      },
      "writtenOn": "2015-05-25T12:18:13Z",
      "side": 1,
      "message": "I understand the desire to make a private map independent of the merged map. However, it seems to me that the discriminant needs to be inserted in the private maps. If not, who inserts this? If it is done at the merged map, then the discriminant may not be the same at two different hosts for the same opinion (when using time for instance). If we rely on a node that does the merging then it\u0027s a single point of failure. We could replicate it but do we want to go in that direction?",
      "parentUuid": "facab960_9f83e1cb",
      "range": {
        "startLine": 28,
        "startChar": 30,
        "endLine": 29,
        "endChar": 70
      },
      "revId": "a39f5d3c9a94be37882a788b6fb1e516876eded1",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "facab960_f05fb770",
        "filename": "nsdb/src/main/scala/org/midonet/cluster/data/storage/MergedMap.scala",
        "patchSetId": 7
      },
      "lineNbr": 29,
      "author": {
        "id": 1002731
      },
      "writtenOn": "2015-05-25T13:10:42Z",
      "side": 1,
      "message": "The way I see it is that people will implement higher order data structures based on these primitives. For example, for the MacPortMap:\n\nobject MacPortMap {\n  val discriminant \u003d new MergedMapDiscriminant() {\n     ...\n  }\n}\n \nclass MacPortMap(id: bridgeId) {\n\n  private val mergedMap \u003d new MergedMap[MAC, UUID](MacPortMap.discriminant)\n  private val myMap \u003d new SingleMap[MAC, UUID](myHostId)\n\n  topology.observable(classOf[Host]).subscribe {\n      case hostAddded(id) \u003d\u003e mergedMap.add(new SingleMap(id))\n      case hostRemoved(id) \u003d\u003e mergedMap.remove(new SingleMap(id))\n  }\n\n  def addEntry(k, v) \u003d myMap.put(k, v)\n  def rmEntry(k) \u003d myMap.remove(k, v)\n  def get() \u003d mergedMap.get(k)\n  def watch) \u003d mergedMap.observable()\n\n}\n\nSo you have all pieces decoupled:\n\n- Single maps are that, single maps, with no knowledge of where they might be used. Note that as I argued in a previous patch, the \"private\" map in the name is misleading since it already \"leaks\" into the primitive semantics about the fact that some uses of the single map will involve merging. IMO, a map is that, a map. \n\n- Merged maps do know about private maps, but not about higher abstractions such as MacPortMap. \n\n- MacPortMap uses low level primitives to compose its own api.\n\nAnd the problem you mention is solved. Every agent will use the same conflict resolution strategy for each use case (e.g., mac port maps), because the CR strategy is part of the higher level datastructure (the mac port map, the arp table, the routing table..)\n\nMakes sense?",
      "parentUuid": "facab960_70d8071e",
      "range": {
        "startLine": 28,
        "startChar": 30,
        "endLine": 29,
        "endChar": 70
      },
      "revId": "a39f5d3c9a94be37882a788b6fb1e516876eded1",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "facab960_3f7495fc",
        "filename": "nsdb/src/main/scala/org/midonet/cluster/data/storage/MergedMap.scala",
        "patchSetId": 7
      },
      "lineNbr": 98,
      "author": {
        "id": 1002731
      },
      "writtenOn": "2015-05-23T18:02:36Z",
      "side": 1,
      "message": "It seems better to join(m: PrivateMap). It\u0027s awkward that a private map is constructed by somebody else than its owner.",
      "range": {
        "startLine": 98,
        "startChar": 4,
        "endLine": 98,
        "endChar": 48
      },
      "revId": "a39f5d3c9a94be37882a788b6fb1e516876eded1",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "facab960_b009af97",
        "filename": "nsdb/src/main/scala/org/midonet/cluster/data/storage/MergedMap.scala",
        "patchSetId": 7
      },
      "lineNbr": 98,
      "author": {
        "id": 1002820
      },
      "writtenOn": "2015-05-25T12:18:13Z",
      "side": 1,
      "message": "I did not know that private maps should be independent. Since it is the case then I\u0027ll make it a 1st class citizen.",
      "parentUuid": "facab960_3f7495fc",
      "range": {
        "startLine": 98,
        "startChar": 4,
        "endLine": 98,
        "endChar": 48
      },
      "revId": "a39f5d3c9a94be37882a788b6fb1e516876eded1",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    }
  ]
}
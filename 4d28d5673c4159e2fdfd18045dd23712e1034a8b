{
  "comments": [
    {
      "key": {
        "uuid": "fa81d914_afe93d1c",
        "filename": "/COMMIT_MSG",
        "patchSetId": 3
      },
      "lineNbr": 11,
      "author": {
        "id": 1002820
      },
      "writtenOn": "2016-01-11T16:30:18Z",
      "side": 1,
      "message": "All load-balancer mdts tests pass except test_haproxy_failback and test_health_monitoring_backend_failback.",
      "range": {
        "startLine": 9,
        "startChar": 0,
        "endLine": 11,
        "endChar": 9
      },
      "revId": "4d28d5673c4159e2fdfd18045dd23712e1034a8b",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "fa81d914_4f8601bb",
        "filename": "midolman/src/main/java/org/midonet/midolman/Midolman.java",
        "patchSetId": 3
      },
      "lineNbr": 32,
      "author": {
        "id": 1002751
      },
      "writtenOn": "2016-01-11T19:59:38Z",
      "side": 1,
      "message": "Added import not used",
      "range": {
        "startLine": 32,
        "startChar": 0,
        "endLine": 32,
        "endChar": 40
      },
      "revId": "4d28d5673c4159e2fdfd18045dd23712e1034a8b",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "fa81d914_6f93c5fa",
        "filename": "midolman/src/main/java/org/midonet/midolman/Midolman.java",
        "patchSetId": 3
      },
      "lineNbr": 55,
      "author": {
        "id": 1002751
      },
      "writtenOn": "2016-01-11T19:59:38Z",
      "side": 1,
      "message": "Same here",
      "range": {
        "startLine": 55,
        "startChar": 0,
        "endLine": 55,
        "endChar": 47
      },
      "revId": "4d28d5673c4159e2fdfd18045dd23712e1034a8b",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "fa81d914_2f89cdca",
        "filename": "midolman/src/main/scala/org/midonet/midolman/MidolmanModule.scala",
        "patchSetId": 3
      },
      "lineNbr": 33,
      "author": {
        "id": 1002751
      },
      "writtenOn": "2016-01-11T19:59:38Z",
      "side": 1,
      "message": "Put below",
      "range": {
        "startLine": 33,
        "startChar": 0,
        "endLine": 33,
        "endChar": 46
      },
      "revId": "4d28d5673c4159e2fdfd18045dd23712e1034a8b",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "fa81d914_7b3467de",
        "filename": "midolman/src/main/scala/org/midonet/midolman/MidolmanModule.scala",
        "patchSetId": 3
      },
      "lineNbr": 157,
      "author": {
        "id": 1002731
      },
      "writtenOn": "2016-01-12T12:34:32Z",
      "side": 1,
      "message": "should users be allowed to configure this?",
      "range": {
        "startLine": 157,
        "startChar": 12,
        "endLine": 157,
        "endChar": 39
      },
      "revId": "4d28d5673c4159e2fdfd18045dd23712e1034a8b",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "fa81d914_832b6dea",
        "filename": "midolman/src/main/scala/org/midonet/midolman/l4lb/HaproxyHealthMonitor.scala",
        "patchSetId": 3
      },
      "lineNbr": 141,
      "author": {
        "id": 1002731
      },
      "writtenOn": "2016-01-13T12:26:30Z",
      "side": 1,
      "message": "this may will throw, and skip the notifyFailed",
      "range": {
        "startLine": 141,
        "startChar": 16,
        "endLine": 141,
        "endChar": 36
      },
      "revId": "4d28d5673c4159e2fdfd18045dd23712e1034a8b",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "fa81d914_c3356547",
        "filename": "midolman/src/main/scala/org/midonet/midolman/l4lb/HaproxyHealthMonitor.scala",
        "patchSetId": 3
      },
      "lineNbr": 151,
      "author": {
        "id": 1002731
      },
      "writtenOn": "2016-01-13T12:26:30Z",
      "side": 1,
      "message": "ditto, possibly other methods above",
      "range": {
        "startLine": 151,
        "startChar": 8,
        "endLine": 151,
        "endChar": 28
      },
      "revId": "4d28d5673c4159e2fdfd18045dd23712e1034a8b",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "fa81d914_033f7d26",
        "filename": "midolman/src/main/scala/org/midonet/midolman/l4lb/HaproxyHealthMonitor.scala",
        "patchSetId": 3
      },
      "lineNbr": 179,
      "author": {
        "id": 1002731
      },
      "writtenOn": "2016-01-13T12:26:30Z",
      "side": 1,
      "message": "maybe worth doing a multi.",
      "range": {
        "startLine": 174,
        "startChar": 19,
        "endLine": 179,
        "endChar": 37
      },
      "revId": "4d28d5673c4159e2fdfd18045dd23712e1034a8b",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "fa81d914_c383a5ca",
        "filename": "midolman/src/main/scala/org/midonet/midolman/l4lb/HaproxyHealthMonitor.scala",
        "patchSetId": 3
      },
      "lineNbr": 190,
      "author": {
        "id": 1002731
      },
      "writtenOn": "2016-01-13T12:26:30Z",
      "side": 1,
      "message": "may rethrow",
      "range": {
        "startLine": 190,
        "startChar": 16,
        "endLine": 190,
        "endChar": 36
      },
      "revId": "4d28d5673c4159e2fdfd18045dd23712e1034a8b",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "fa81d914_e31189ad",
        "filename": "midolman/src/main/scala/org/midonet/midolman/l4lb/HaproxyHealthMonitor.scala",
        "patchSetId": 3
      },
      "lineNbr": 201,
      "author": {
        "id": 1002731
      },
      "writtenOn": "2016-01-13T12:26:30Z",
      "side": 1,
      "message": "name seems misleading, it also setsMemberStatus",
      "range": {
        "startLine": 198,
        "startChar": 4,
        "endLine": 201,
        "endChar": 19
      },
      "revId": "4d28d5673c4159e2fdfd18045dd23712e1034a8b",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "fa81d914_631d99bd",
        "filename": "midolman/src/main/scala/org/midonet/midolman/l4lb/HaproxyHealthMonitor.scala",
        "patchSetId": 3
      },
      "lineNbr": 208,
      "author": {
        "id": 1002731
      },
      "writtenOn": "2016-01-13T12:26:30Z",
      "side": 1,
      "message": "ditto, may throw and skip the 2 steps below, would that be right?",
      "range": {
        "startLine": 208,
        "startChar": 12,
        "endLine": 208,
        "endChar": 28
      },
      "revId": "4d28d5673c4159e2fdfd18045dd23712e1034a8b",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "fa81d914_a37eb1e2",
        "filename": "midolman/src/main/scala/org/midonet/midolman/l4lb/HaproxyHealthMonitor.scala",
        "patchSetId": 3
      },
      "lineNbr": 216,
      "author": {
        "id": 1002731
      },
      "writtenOn": "2016-01-13T12:26:30Z",
      "side": 1,
      "message": "may rethrow",
      "range": {
        "startLine": 216,
        "startChar": 16,
        "endLine": 216,
        "endChar": 36
      },
      "revId": "4d28d5673c4159e2fdfd18045dd23712e1034a8b",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "fa81d914_cf9af113",
        "filename": "midolman/src/main/scala/org/midonet/midolman/l4lb/HealthMonitor.scala",
        "patchSetId": 3
      },
      "lineNbr": 232,
      "author": {
        "id": 1002751
      },
      "writtenOn": "2016-01-11T19:59:38Z",
      "side": 1,
      "message": "Access to some internal variables (including this one) is no longer synchronizes. Some calls are made from the observable thread, some from you executor.",
      "range": {
        "startLine": 232,
        "startChar": 4,
        "endLine": 232,
        "endChar": 77
      },
      "revId": "4d28d5673c4159e2fdfd18045dd23712e1034a8b",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "fa81d914_4f51a161",
        "filename": "midolman/src/main/scala/org/midonet/midolman/l4lb/HealthMonitor.scala",
        "patchSetId": 3
      },
      "lineNbr": 234,
      "author": {
        "id": 1002751
      },
      "writtenOn": "2016-01-11T19:59:38Z",
      "side": 1,
      "message": "If you add a new executor, use a NamedThreadFactory and give it a name. Also make it a deamon thread and stop in doStop.",
      "range": {
        "startLine": 234,
        "startChar": 16,
        "endLine": 234,
        "endChar": 71
      },
      "revId": "4d28d5673c4159e2fdfd18045dd23712e1034a8b",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "fa81d914_0f3b293b",
        "filename": "midolman/src/main/scala/org/midonet/midolman/l4lb/HealthMonitor.scala",
        "patchSetId": 3
      },
      "lineNbr": 269,
      "author": {
        "id": 1002751
      },
      "writtenOn": "2016-01-11T19:59:38Z",
      "side": 1,
      "message": "Shouldn\u0027t you store the subscription and unsubscribe in doStop?",
      "range": {
        "startLine": 269,
        "startChar": 8,
        "endLine": 269,
        "endChar": 18
      },
      "revId": "4d28d5673c4159e2fdfd18045dd23712e1034a8b",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "fa81d914_ef35f546",
        "filename": "midolman/src/main/scala/org/midonet/midolman/l4lb/HealthMonitor.scala",
        "patchSetId": 3
      },
      "lineNbr": 269,
      "author": {
        "id": 1002751
      },
      "writtenOn": "2016-01-11T19:59:38Z",
      "side": 1,
      "message": "Here you need an observerOn with back-pressure buffer. Otherwise this will hog the VT thread with synchronous I/O (e.g. waiting up to 10 seconds for a ha proxy service to start, write to ZK, etc)",
      "range": {
        "startLine": 269,
        "startChar": 34,
        "endLine": 269,
        "endChar": 71
      },
      "revId": "4d28d5673c4159e2fdfd18045dd23712e1034a8b",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "fa81d914_63c1192e",
        "filename": "midolman/src/main/scala/org/midonet/midolman/l4lb/HealthMonitor.scala",
        "patchSetId": 3
      },
      "lineNbr": 269,
      "author": {
        "id": 1002731
      },
      "writtenOn": "2016-01-13T12:06:44Z",
      "side": 1,
      "message": "This is a random idea but:\n\n- As noted in the other file, the observers are actually doing transformations + actions.  This indicates that you could compose on the source rx streams, applying transformations on the stream, then subscribing the \"actors\" (observers who do the actions).\n\n- A problem you have here is that the handleUpdate may block, so you may hog the VT thread. The solution I think goes in line with the note above.  Get the source observable, transform it into relevant actions, then pass those to a different observer that executes them on its own scheduler. Basically:\n\n\nObservable.create(watcher).flatMap(notificationToActions).observeOn(myScheduler).subscribe(actionPerformer)",
      "parentUuid": "fa81d914_ef35f546",
      "range": {
        "startLine": 269,
        "startChar": 34,
        "endLine": 269,
        "endChar": 71
      },
      "revId": "4d28d5673c4159e2fdfd18045dd23712e1034a8b",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "fa81d914_23a00190",
        "filename": "midolman/src/main/scala/org/midonet/midolman/l4lb/HealthMonitor.scala",
        "patchSetId": 3
      },
      "lineNbr": 273,
      "author": {
        "id": 1002731
      },
      "writtenOn": "2016-01-13T12:06:44Z",
      "side": 1,
      "message": "Why would this happen?",
      "range": {
        "startLine": 273,
        "startChar": 8,
        "endLine": 273,
        "endChar": 30
      },
      "revId": "4d28d5673c4159e2fdfd18045dd23712e1034a8b",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "fa81d914_6f774503",
        "filename": "midolman/src/main/scala/org/midonet/midolman/l4lb/HealthMonitor.scala",
        "patchSetId": 3
      },
      "lineNbr": 274,
      "author": {
        "id": 1002751
      },
      "writtenOn": "2016-01-11T19:59:38Z",
      "side": 1,
      "message": "()",
      "revId": "4d28d5673c4159e2fdfd18045dd23712e1034a8b",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "fa81d914_43adf587",
        "filename": "midolman/src/main/scala/org/midonet/midolman/l4lb/HealthMonitor.scala",
        "patchSetId": 3
      },
      "lineNbr": 286,
      "author": {
        "id": 1002731
      },
      "writtenOn": "2016-01-13T12:06:44Z",
      "side": 1,
      "message": "can throw, and you\u0027d miss the notifyStopped",
      "range": {
        "startLine": 286,
        "startChar": 16,
        "endLine": 286,
        "endChar": 21
      },
      "revId": "4d28d5673c4159e2fdfd18045dd23712e1034a8b",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "fa81d914_0fa5e952",
        "filename": "midolman/src/main/scala/org/midonet/midolman/l4lb/HealthMonitor.scala",
        "patchSetId": 3
      },
      "lineNbr": 308,
      "author": {
        "id": 1002751
      },
      "writtenOn": "2016-01-11T19:59:38Z",
      "side": 1,
      "message": "Does this need to be public?",
      "range": {
        "startLine": 308,
        "startChar": 4,
        "endLine": 308,
        "endChar": 21
      },
      "revId": "4d28d5673c4159e2fdfd18045dd23712e1034a8b",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "fa81d914_4ff52182",
        "filename": "midolman/src/main/scala/org/midonet/midolman/l4lb/HealthMonitor.scala",
        "patchSetId": 3
      },
      "lineNbr": 335,
      "author": {
        "id": 1002751
      },
      "writtenOn": "2016-01-11T19:59:38Z",
      "side": 1,
      "message": "Parentheses not needed. The same for other case options below.",
      "range": {
        "startLine": 335,
        "startChar": 38,
        "endLine": 335,
        "endChar": 64
      },
      "revId": "4d28d5673c4159e2fdfd18045dd23712e1034a8b",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "fa81d914_c3b005e0",
        "filename": "midolman/src/main/scala/org/midonet/midolman/l4lb/HealthMonitor.scala",
        "patchSetId": 3
      },
      "lineNbr": 338,
      "author": {
        "id": 1002731
      },
      "writtenOn": "2016-01-13T12:06:44Z",
      "side": 1,
      "message": "This is bad.  You\u0027re locking the thread when processing an onNext on the source observable.  It should instead schedule it on a separate scheduler, see note above.",
      "range": {
        "startLine": 338,
        "startChar": 19,
        "endLine": 338,
        "endChar": 39
      },
      "revId": "4d28d5673c4159e2fdfd18045dd23712e1034a8b",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "fa81d914_ef8335ca",
        "filename": "midolman/src/main/scala/org/midonet/midolman/l4lb/HealthMonitorConfigWatcher.scala",
        "patchSetId": 3
      },
      "lineNbr": 111,
      "author": {
        "id": 1002751
      },
      "writtenOn": "2016-01-11T19:59:38Z",
      "side": 1,
      "message": "Should this be private?",
      "range": {
        "startLine": 111,
        "startChar": 8,
        "endLine": 111,
        "endChar": 25
      },
      "revId": "4d28d5673c4159e2fdfd18045dd23712e1034a8b",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "fa81d914_0f8969eb",
        "filename": "midolman/src/main/scala/org/midonet/midolman/l4lb/HealthMonitorConfigWatcher.scala",
        "patchSetId": 3
      },
      "lineNbr": 113,
      "author": {
        "id": 1002751
      },
      "writtenOn": "2016-01-11T19:59:38Z",
      "side": 1,
      "message": "This too?",
      "range": {
        "startLine": 113,
        "startChar": 8,
        "endLine": 113,
        "endChar": 21
      },
      "revId": "4d28d5673c4159e2fdfd18045dd23712e1034a8b",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "fa81d914_6fc4a540",
        "filename": "midolman/src/main/scala/org/midonet/midolman/l4lb/HealthMonitorConfigWatcher.scala",
        "patchSetId": 3
      },
      "lineNbr": 115,
      "author": {
        "id": 1002751
      },
      "writtenOn": "2016-01-11T19:59:38Z",
      "side": 1,
      "message": "Since this is not an actor, this is not needed (?)",
      "range": {
        "startLine": 115,
        "startChar": 4,
        "endLine": 115,
        "endChar": 43
      },
      "revId": "4d28d5673c4159e2fdfd18045dd23712e1034a8b",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "fa81d914_efb095df",
        "filename": "midolman/src/main/scala/org/midonet/midolman/l4lb/HealthMonitorConfigWatcher.scala",
        "patchSetId": 3
      },
      "lineNbr": 118,
      "author": {
        "id": 1002751
      },
      "writtenOn": "2016-01-11T19:59:38Z",
      "side": 1,
      "message": "Maybe this should be:\n\norg.midonet.haproxy.health-monitor\n\nor just:\n\norg.midonet.haproxy",
      "range": {
        "startLine": 118,
        "startChar": 33,
        "endLine": 118,
        "endChar": 72
      },
      "revId": "4d28d5673c4159e2fdfd18045dd23712e1034a8b",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "fa81d914_c3b485f4",
        "filename": "midolman/src/main/scala/org/midonet/midolman/l4lb/HealthMonitorConfigWatcher.scala",
        "patchSetId": 3
      },
      "lineNbr": 122,
      "author": {
        "id": 1002731
      },
      "writtenOn": "2016-01-13T11:56:01Z",
      "side": 1,
      "message": "the name is misleading, this is a Subject, and calls done below (e.g.: observable.onNext) actually use the Observer interface, not the Observable. hmMessageBus seems more adequate.",
      "range": {
        "startLine": 122,
        "startChar": 22,
        "endLine": 122,
        "endChar": 32
      },
      "revId": "4d28d5673c4159e2fdfd18045dd23712e1034a8b",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "fa81d914_cfe2f1d4",
        "filename": "midolman/src/main/scala/org/midonet/midolman/l4lb/HealthMonitorConfigWatcher.scala",
        "patchSetId": 3
      },
      "lineNbr": 127,
      "author": {
        "id": 1002751
      },
      "writtenOn": "2016-01-11T19:59:38Z",
      "side": 1,
      "message": "Maybe this observable should support only one subscriber, since any subsequent subscriber after the first will get an inconsistent flow of updates. In this case this like could go in the if below.",
      "range": {
        "startLine": 127,
        "startChar": 8,
        "endLine": 127,
        "endChar": 35
      },
      "revId": "4d28d5673c4159e2fdfd18045dd23712e1034a8b",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "fa81d914_0fede9c3",
        "filename": "midolman/src/main/scala/org/midonet/midolman/l4lb/HealthMonitorConfigWatcher.scala",
        "patchSetId": 3
      },
      "lineNbr": 131,
      "author": {
        "id": 1002751
      },
      "writtenOn": "2016-01-11T19:59:38Z",
      "side": 1,
      "message": "And add an else here throwing an exception.",
      "revId": "4d28d5673c4159e2fdfd18045dd23712e1034a8b",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "fa81d914_03ce9d83",
        "filename": "midolman/src/main/scala/org/midonet/midolman/l4lb/HealthMonitorConfigWatcher.scala",
        "patchSetId": 3
      },
      "lineNbr": 131,
      "author": {
        "id": 1002731
      },
      "writtenOn": "2016-01-13T11:56:01Z",
      "side": 1,
      "message": "There is a HermitObservable that does that.\n\nThat said, not sure about the use case for an Observable that we know will only accept one subscriber.",
      "parentUuid": "fa81d914_0fede9c3",
      "revId": "4d28d5673c4159e2fdfd18045dd23712e1034a8b",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "fa81d914_4f3c4130",
        "filename": "midolman/src/main/scala/org/midonet/midolman/l4lb/HealthMonitorConfigWatcher.scala",
        "patchSetId": 3
      },
      "lineNbr": 132,
      "author": {
        "id": 1002751
      },
      "writtenOn": "2016-01-11T19:59:38Z",
      "side": 1,
      "message": "How about unsubscribe? When the child (or the last child if you want to support multiple subscribers) unsubscribes you have to undo all these subscriptions.\n\nSuggestion for a single subscriber: Use a CompositeSubscription and do an:\n\n  child.add(compositeSubscription)\n\nAnd then you can add/remove each additional subscription to the composite one. I think that when the child unsubcribes, it will also unsubscribe all subscriptions from the composite one (but you have to test it).",
      "revId": "4d28d5673c4159e2fdfd18045dd23712e1034a8b",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "fa81d914_8f4639be",
        "filename": "midolman/src/main/scala/org/midonet/midolman/l4lb/HealthMonitorConfigWatcher.scala",
        "patchSetId": 3
      },
      "lineNbr": 134,
      "author": {
        "id": 1002751
      },
      "writtenOn": "2016-01-11T19:59:38Z",
      "side": 1,
      "message": "If the composite subscriptions works, you don\u0027t need this.",
      "range": {
        "startLine": 134,
        "startChar": 4,
        "endLine": 134,
        "endChar": 72
      },
      "revId": "4d28d5673c4159e2fdfd18045dd23712e1034a8b",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "fa81d914_23cba173",
        "filename": "midolman/src/main/scala/org/midonet/midolman/l4lb/HealthMonitorConfigWatcher.scala",
        "patchSetId": 3
      },
      "lineNbr": 136,
      "author": {
        "id": 1002731
      },
      "writtenOn": "2016-01-13T11:56:01Z",
      "side": 1,
      "message": "Why? Aren\u0027t all messages of a common type?",
      "range": {
        "startLine": 136,
        "startChar": 42,
        "endLine": 136,
        "endChar": 48
      },
      "revId": "4d28d5673c4159e2fdfd18045dd23712e1034a8b",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "fa81d914_e387c90d",
        "filename": "midolman/src/main/scala/org/midonet/midolman/l4lb/HealthMonitorConfigWatcher.scala",
        "patchSetId": 3
      },
      "lineNbr": 141,
      "author": {
        "id": 1002731
      },
      "writtenOn": "2016-01-13T11:56:01Z",
      "side": 1,
      "message": "Is this correct? If the VT emits an error the source observable is useless (according to Rx) and the Observer should reconnect to a new one.",
      "range": {
        "startLine": 137,
        "startChar": 8,
        "endLine": 141,
        "endChar": 39
      },
      "revId": "4d28d5673c4159e2fdfd18045dd23712e1034a8b",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "fa81d914_af121db2",
        "filename": "midolman/src/main/scala/org/midonet/midolman/l4lb/HealthMonitorConfigWatcher.scala",
        "patchSetId": 3
      },
      "lineNbr": 168,
      "author": {
        "id": 1002751
      },
      "writtenOn": "2016-01-11T19:59:38Z",
      "side": 1,
      "message": "service",
      "range": {
        "startLine": 168,
        "startChar": 30,
        "endLine": 168,
        "endChar": 35
      },
      "revId": "4d28d5673c4159e2fdfd18045dd23712e1034a8b",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "fa81d914_6f4905d0",
        "filename": "midolman/src/main/scala/org/midonet/midolman/l4lb/HealthMonitorConfigWatcher.scala",
        "patchSetId": 3
      },
      "lineNbr": 251,
      "author": {
        "id": 1002751
      },
      "writtenOn": "2016-01-11T19:59:38Z",
      "side": 1,
      "message": "I think you should have two methods here: one that receives notifications from the pool health monitor (i.e. handleMappingChange and one that receives updates from the load balancer). In this way, you don\u0027t need to keep track of all these subscriptions.",
      "range": {
        "startLine": 251,
        "startChar": 4,
        "endLine": 251,
        "endChar": 61
      },
      "revId": "4d28d5673c4159e2fdfd18045dd23712e1034a8b",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "fa81d914_6373d94d",
        "filename": "midolman/src/main/scala/org/midonet/midolman/l4lb/HealthMonitorConfigWatcher.scala",
        "patchSetId": 3
      },
      "lineNbr": 267,
      "author": {
        "id": 1002731
      },
      "writtenOn": "2016-01-13T11:56:01Z",
      "side": 1,
      "message": "the fact that you\u0027re doing transformations and then emissions on another observer seem to indicate that you actually would rather compose on the source.\n\nE.g.: observable.flatMap(handleUpdate)\n\nAnd let the subscribers subscribe to the result of the composition.",
      "range": {
        "startLine": 267,
        "startChar": 30,
        "endLine": 267,
        "endChar": 48
      },
      "revId": "4d28d5673c4159e2fdfd18045dd23712e1034a8b",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "fa81d914_2f6d4d33",
        "filename": "midolman/src/main/scala/org/midonet/midolman/l4lb/HealthMonitorConfigWatcher.scala",
        "patchSetId": 3
      },
      "lineNbr": 288,
      "author": {
        "id": 1002751
      },
      "writtenOn": "2016-01-11T19:59:38Z",
      "side": 1,
      "message": "This looks like a public method, similar to call.",
      "range": {
        "startLine": 288,
        "startChar": 4,
        "endLine": 288,
        "endChar": 18
      },
      "revId": "4d28d5673c4159e2fdfd18045dd23712e1034a8b",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "fa81d914_af793dfe",
        "filename": "midolman/src/main/scala/org/midonet/midolman/l4lb/HealthMonitorConfigWatcher.scala",
        "patchSetId": 3
      },
      "lineNbr": 289,
      "author": {
        "id": 1002751
      },
      "writtenOn": "2016-01-11T19:59:38Z",
      "side": 1,
      "message": "HAProxy health monitor is now leader",
      "range": {
        "startLine": 289,
        "startChar": 18,
        "endLine": 289,
        "endChar": 59
      },
      "revId": "4d28d5673c4159e2fdfd18045dd23712e1034a8b",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "fa81d914_c399e56f",
        "filename": "midolman/src/test/scala/org/midonet/midolman/util/MidolmanSpec.scala",
        "patchSetId": 3
      },
      "lineNbr": 119,
      "author": {
        "id": 1002731
      },
      "writtenOn": "2016-01-13T12:06:44Z",
      "side": 1,
      "message": "is this change related to the patch?",
      "revId": "4d28d5673c4159e2fdfd18045dd23712e1034a8b",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    }
  ]
}